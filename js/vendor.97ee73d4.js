(globalThis["webpackChunkpok"] = globalThis["webpackChunkpok"] || []).push([[121],{

/***/ 8582:
/***/ ((module) => {

/**
 * Quasar runtime for auto-importing
 * components or directives.
 *
 * Warning! This file does NOT get transpiled by Babel
 * but is included into the UI code.
 *
 * @param {component} Vue Component object
 * @param {type}      One of 'components' or 'directives'
 * @param {items}     Object containing components or directives
 */
module.exports = function qInstall (component, type, items) {
  const targetComponent = component.__vccOpts !== void 0
    ? component.__vccOpts
    : component

  const target = targetComponent[ type ]

  if (target === void 0) {
    targetComponent[ type ] = items
  }
  else {
    for (const i in items) {
      if (target[ i ] === void 0) {
        target[ i ] = items[ i ]
      }
    }
  }
}


/***/ }),

/***/ 2461:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  $q: () => (/* binding */ setupDevtoolsPlugin)
});

// UNUSED EXPORTS: isPerformanceSupported, now

;// CONCATENATED MODULE: ./node_modules/@vue/devtools-api/lib/esm/env.js
function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
    // @ts-expect-error navigator and windows are not available in all environments
    return (typeof navigator !== 'undefined' && typeof window !== 'undefined')
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : {};
}
const isProxyAvailable = typeof Proxy === 'function';

;// CONCATENATED MODULE: ./node_modules/@vue/devtools-api/lib/esm/const.js
const HOOK_SETUP = 'devtools-plugin:setup';
const HOOK_PLUGIN_SETTINGS_SET = 'plugin:settings:set';

;// CONCATENATED MODULE: ./node_modules/@vue/devtools-api/lib/esm/time.js
let supported;
let perf;
function isPerformanceSupported() {
    var _a;
    if (supported !== undefined) {
        return supported;
    }
    if (typeof window !== 'undefined' && window.performance) {
        supported = true;
        perf = window.performance;
    }
    else if (typeof globalThis !== 'undefined' && ((_a = globalThis.perf_hooks) === null || _a === void 0 ? void 0 : _a.performance)) {
        supported = true;
        perf = globalThis.perf_hooks.performance;
    }
    else {
        supported = false;
    }
    return supported;
}
function now() {
    return isPerformanceSupported() ? perf.now() : Date.now();
}

;// CONCATENATED MODULE: ./node_modules/@vue/devtools-api/lib/esm/proxy.js


class ApiProxy {
    constructor(plugin, hook) {
        this.target = null;
        this.targetQueue = [];
        this.onQueue = [];
        this.plugin = plugin;
        this.hook = hook;
        const defaultSettings = {};
        if (plugin.settings) {
            for (const id in plugin.settings) {
                const item = plugin.settings[id];
                defaultSettings[id] = item.defaultValue;
            }
        }
        const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;
        let currentSettings = Object.assign({}, defaultSettings);
        try {
            const raw = localStorage.getItem(localSettingsSaveId);
            const data = JSON.parse(raw);
            Object.assign(currentSettings, data);
        }
        catch (e) {
            // noop
        }
        this.fallbacks = {
            getSettings() {
                return currentSettings;
            },
            setSettings(value) {
                try {
                    localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
                }
                catch (e) {
                    // noop
                }
                currentSettings = value;
            },
            now() {
                return now();
            },
        };
        if (hook) {
            hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {
                if (pluginId === this.plugin.id) {
                    this.fallbacks.setSettings(value);
                }
            });
        }
        this.proxiedOn = new Proxy({}, {
            get: (_target, prop) => {
                if (this.target) {
                    return this.target.on[prop];
                }
                else {
                    return (...args) => {
                        this.onQueue.push({
                            method: prop,
                            args,
                        });
                    };
                }
            },
        });
        this.proxiedTarget = new Proxy({}, {
            get: (_target, prop) => {
                if (this.target) {
                    return this.target[prop];
                }
                else if (prop === 'on') {
                    return this.proxiedOn;
                }
                else if (Object.keys(this.fallbacks).includes(prop)) {
                    return (...args) => {
                        this.targetQueue.push({
                            method: prop,
                            args,
                            resolve: () => { },
                        });
                        return this.fallbacks[prop](...args);
                    };
                }
                else {
                    return (...args) => {
                        return new Promise((resolve) => {
                            this.targetQueue.push({
                                method: prop,
                                args,
                                resolve,
                            });
                        });
                    };
                }
            },
        });
    }
    async setRealTarget(target) {
        this.target = target;
        for (const item of this.onQueue) {
            this.target.on[item.method](...item.args);
        }
        for (const item of this.targetQueue) {
            item.resolve(await this.target[item.method](...item.args));
        }
    }
}

;// CONCATENATED MODULE: ./node_modules/@vue/devtools-api/lib/esm/index.js






function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const descriptor = pluginDescriptor;
    const target = getTarget();
    const hook = getDevtoolsGlobalHook();
    const enableProxy = isProxyAvailable && descriptor.enableEarlyProxy;
    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
        hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);
    }
    else {
        const proxy = enableProxy ? new ApiProxy(descriptor, hook) : null;
        const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
        list.push({
            pluginDescriptor: descriptor,
            setupFn,
            proxy,
        });
        if (proxy) {
            setupFn(proxy.proxiedTarget);
        }
    }
}


/***/ }),

/***/ 8734:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C4: () => (/* binding */ pauseTracking),
/* harmony export */   EW: () => (/* binding */ computed),
/* harmony export */   Gc: () => (/* binding */ shallowReactive),
/* harmony export */   IG: () => (/* binding */ markRaw),
/* harmony export */   IJ: () => (/* binding */ shallowRef),
/* harmony export */   KR: () => (/* binding */ ref),
/* harmony export */   Kh: () => (/* binding */ reactive),
/* harmony export */   Pr: () => (/* binding */ proxyRefs),
/* harmony export */   QW: () => (/* binding */ toRefs),
/* harmony export */   R1: () => (/* binding */ unref),
/* harmony export */   X2: () => (/* binding */ ReactiveEffect),
/* harmony export */   bl: () => (/* binding */ resetTracking),
/* harmony export */   fE: () => (/* binding */ isShallow),
/* harmony export */   g8: () => (/* binding */ isReactive),
/* harmony export */   hZ: () => (/* binding */ trigger),
/* harmony export */   i9: () => (/* binding */ isRef),
/* harmony export */   jr: () => (/* binding */ onScopeDispose),
/* harmony export */   ju: () => (/* binding */ isProxy),
/* harmony export */   o5: () => (/* binding */ getCurrentScope),
/* harmony export */   u4: () => (/* binding */ track),
/* harmony export */   uY: () => (/* binding */ effectScope),
/* harmony export */   ux: () => (/* binding */ toRaw),
/* harmony export */   yC: () => (/* binding */ EffectScope)
/* harmony export */ });
/* unused harmony exports ITERATE_KEY, ReactiveFlags, TrackOpTypes, TriggerOpTypes, customRef, deferredComputed, effect, enableTracking, isReadonly, pauseScheduling, readonly, resetScheduling, shallowReadonly, stop, toRef, toValue, triggerRef */
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8790);
/**
* @vue/reactivity v3.4.33
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/


function warn(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}

let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    /**
     * @internal
     */
    this._active = true;
    /**
     * @internal
     */
    this.effects = [];
    /**
     * @internal
     */
    this.cleanups = [];
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
        this
      ) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    } else if (false) {}
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i, l;
      for (i = 0, l = this.effects.length; i < l; i++) {
        this.effects[i].stop();
      }
      for (i = 0, l = this.cleanups.length; i < l; i++) {
        this.cleanups[i]();
      }
      if (this.scopes) {
        for (i = 0, l = this.scopes.length; i < l; i++) {
          this.scopes[i].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect, scope = activeEffectScope) {
  if (scope && scope.active) {
    scope.effects.push(effect);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn);
  } else if (false) {}
}

let activeEffect;
class ReactiveEffect {
  constructor(fn, trigger, scheduler, scope) {
    this.fn = fn;
    this.trigger = trigger;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    /**
     * @internal
     */
    this._dirtyLevel = 4;
    /**
     * @internal
     */
    this._trackId = 0;
    /**
     * @internal
     */
    this._runnings = 0;
    /**
     * @internal
     */
    this._shouldSchedule = false;
    /**
     * @internal
     */
    this._depsLength = 0;
    recordEffectScope(this, scope);
  }
  get dirty() {
    if (this._dirtyLevel === 2 || this._dirtyLevel === 3) {
      this._dirtyLevel = 1;
      pauseTracking();
      for (let i = 0; i < this._depsLength; i++) {
        const dep = this.deps[i];
        if (dep.computed) {
          triggerComputed(dep.computed);
          if (this._dirtyLevel >= 4) {
            break;
          }
        }
      }
      if (this._dirtyLevel === 1) {
        this._dirtyLevel = 0;
      }
      resetTracking();
    }
    return this._dirtyLevel >= 4;
  }
  set dirty(v) {
    this._dirtyLevel = v ? 4 : 0;
  }
  run() {
    this._dirtyLevel = 0;
    if (!this.active) {
      return this.fn();
    }
    let lastShouldTrack = shouldTrack;
    let lastEffect = activeEffect;
    try {
      shouldTrack = true;
      activeEffect = this;
      this._runnings++;
      preCleanupEffect(this);
      return this.fn();
    } finally {
      postCleanupEffect(this);
      this._runnings--;
      activeEffect = lastEffect;
      shouldTrack = lastShouldTrack;
    }
  }
  stop() {
    if (this.active) {
      preCleanupEffect(this);
      postCleanupEffect(this);
      this.onStop && this.onStop();
      this.active = false;
    }
  }
}
function triggerComputed(computed) {
  return computed.value;
}
function preCleanupEffect(effect2) {
  effect2._trackId++;
  effect2._depsLength = 0;
}
function postCleanupEffect(effect2) {
  if (effect2.deps.length > effect2._depsLength) {
    for (let i = effect2._depsLength; i < effect2.deps.length; i++) {
      cleanupDepEffect(effect2.deps[i], effect2);
    }
    effect2.deps.length = effect2._depsLength;
  }
}
function cleanupDepEffect(dep, effect2) {
  const trackId = dep.get(effect2);
  if (trackId !== void 0 && effect2._trackId !== trackId) {
    dep.delete(effect2);
    if (dep.size === 0) {
      dep.cleanup();
    }
  }
}
function effect(fn, options) {
  if (fn.effect instanceof ReactiveEffect) {
    fn = fn.effect.fn;
  }
  const _effect = new ReactiveEffect(fn, NOOP, () => {
    if (_effect.dirty) {
      _effect.run();
    }
  });
  if (options) {
    extend(_effect, options);
    if (options.scope) recordEffectScope(_effect, options.scope);
  }
  if (!options || !options.lazy) {
    _effect.run();
  }
  const runner = _effect.run.bind(_effect);
  runner.effect = _effect;
  return runner;
}
function stop(runner) {
  runner.effect.stop();
}
let shouldTrack = true;
let pauseScheduleStack = 0;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function enableTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = true;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function pauseScheduling() {
  pauseScheduleStack++;
}
function resetScheduling() {
  pauseScheduleStack--;
  while (!pauseScheduleStack && queueEffectSchedulers.length) {
    queueEffectSchedulers.shift()();
  }
}
function trackEffect(effect2, dep, debuggerEventExtraInfo) {
  var _a;
  if (dep.get(effect2) !== effect2._trackId) {
    dep.set(effect2, effect2._trackId);
    const oldDep = effect2.deps[effect2._depsLength];
    if (oldDep !== dep) {
      if (oldDep) {
        cleanupDepEffect(oldDep, effect2);
      }
      effect2.deps[effect2._depsLength++] = dep;
    } else {
      effect2._depsLength++;
    }
    if (false) {}
  }
}
const queueEffectSchedulers = [];
function triggerEffects(dep, dirtyLevel, debuggerEventExtraInfo) {
  var _a;
  pauseScheduling();
  for (const effect2 of dep.keys()) {
    let tracking;
    if (effect2._dirtyLevel < dirtyLevel && (tracking != null ? tracking : tracking = dep.get(effect2) === effect2._trackId)) {
      effect2._shouldSchedule || (effect2._shouldSchedule = effect2._dirtyLevel === 0);
      effect2._dirtyLevel = dirtyLevel;
    }
    if (effect2._shouldSchedule && (tracking != null ? tracking : tracking = dep.get(effect2) === effect2._trackId)) {
      if (false) {}
      effect2.trigger();
      if ((!effect2._runnings || effect2.allowRecurse) && effect2._dirtyLevel !== 2) {
        effect2._shouldSchedule = false;
        if (effect2.scheduler) {
          queueEffectSchedulers.push(effect2.scheduler);
        }
      }
    }
  }
  resetScheduling();
}

const createDep = (cleanup, computed) => {
  const dep = /* @__PURE__ */ new Map();
  dep.cleanup = cleanup;
  dep.computed = computed;
  return dep;
};

const targetMap = /* @__PURE__ */ new WeakMap();
const ITERATE_KEY = Symbol( false ? 0 : "");
const MAP_KEY_ITERATE_KEY = Symbol( false ? 0 : "");
function track(target, type, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep(() => depsMap.delete(key)));
    }
    trackEffect(
      activeEffect,
      dep,
       false ? 0 : void 0
    );
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(target)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSymbol */ .Bm)(key2) && key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ .CE)(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isIntegerKey */ .yI)(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ .CE)(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ .CE)(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  pauseScheduling();
  for (const dep of deps) {
    if (dep) {
      triggerEffects(
        dep,
        4,
         false ? 0 : void 0
      );
    }
  }
  resetScheduling();
}
function getDepFromReactive(object, key) {
  const depsMap = targetMap.get(object);
  return depsMap && depsMap.get(key);
}

const isNonTrackableKeys = /* @__PURE__ */ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .makeMap */ .pD)(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSymbol */ .Bm)
);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i = 0, l = this.length; i < l; i++) {
        track(arr, "get", i + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      pauseScheduling();
      const res = toRaw(this)[key].apply(this, args);
      resetScheduling();
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty(key) {
  if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSymbol */ .Bm)(key)) key = String(key);
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
class BaseReactiveHandler {
  constructor(_isReadonly = false, _isShallow = false) {
    this._isReadonly = _isReadonly;
    this._isShallow = _isShallow;
  }
  get(target, key, receiver) {
    const isReadonly2 = this._isReadonly, isShallow2 = this._isShallow;
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return isShallow2;
    } else if (key === "__v_raw") {
      if (receiver === (isReadonly2 ? isShallow2 ? shallowReadonlyMap : readonlyMap : isShallow2 ? shallowReactiveMap : reactiveMap).get(target) || // receiver is not the reactive proxy, but has the same prototype
      // this means the reciever is a user proxy of the reactive proxy
      Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) {
        return target;
      }
      return;
    }
    const targetIsArray = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(target);
    if (!isReadonly2) {
      if (targetIsArray && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .$3)(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty;
      }
    }
    const res = Reflect.get(target, key, receiver);
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSymbol */ .Bm)(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (isShallow2) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isIntegerKey */ .yI)(key) ? res : res.value;
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Gv)(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  }
}
class MutableReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(false, isShallow2);
  }
  set(target, key, value, receiver) {
    let oldValue = target[key];
    if (!this._isShallow) {
      const isOldValueReadonly = isReadonly(oldValue);
      if (!isShallow(value) && !isReadonly(value)) {
        oldValue = toRaw(oldValue);
        value = toRaw(value);
      }
      if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(target) && isRef(oldValue) && !isRef(value)) {
        if (isOldValueReadonly) {
          return false;
        } else {
          oldValue.value = value;
          return true;
        }
      }
    }
    const hadKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(target) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isIntegerKey */ .yI)(key) ? Number(key) < target.length : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .$3)(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .$H)(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
    }
    return result;
  }
  deleteProperty(target, key) {
    const hadKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .$3)(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
      trigger(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  has(target, key) {
    const result = Reflect.has(target, key);
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSymbol */ .Bm)(key) || !builtInSymbols.has(key)) {
      track(target, "has", key);
    }
    return result;
  }
  ownKeys(target) {
    track(
      target,
      "iterate",
      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(target) ? "length" : ITERATE_KEY
    );
    return Reflect.ownKeys(target);
  }
}
class ReadonlyReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(true, isShallow2);
  }
  set(target, key) {
    if (false) {}
    return true;
  }
  deleteProperty(target, key) {
    if (false) {}
    return true;
  }
}
const mutableHandlers = /* @__PURE__ */ new MutableReactiveHandler();
const readonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler();
const shallowReactiveHandlers = /* @__PURE__ */ new MutableReactiveHandler(
  true
);
const shallowReadonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler(true);

const toShallow = (value) => value;
const getProto = (v) => Reflect.getPrototypeOf(v);
function get(target, key, isReadonly2 = false, isShallow2 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .$H)(key, rawKey)) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .$H)(key, rawKey)) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add(value, _isShallow = false) {
  if (!_isShallow && !isShallow(value) && !isReadonly(value)) {
    value = toRaw(value);
  }
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set(key, value, _isShallow = false) {
  if (!_isShallow && !isShallow(value) && !isReadonly(value)) {
    value = toRaw(value);
  }
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (false) {}
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .$H)(value, oldValue)) {
    trigger(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (false) {}
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget =  false ? 0 : void 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly2, isShallow2) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ .CE)(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
    );
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    if (false) {}
    return type === "delete" ? false : type === "clear" ? void 0 : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get(this, key);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has,
    add(value) {
      return add.call(this, value, true);
    },
    set(key, value) {
      return set.call(this, key, value, true);
    },
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = [
    "keys",
    "values",
    "entries",
    Symbol.iterator
  ];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      true
    );
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [
  mutableInstrumentations,
  readonlyInstrumentations,
  shallowInstrumentations,
  shallowReadonlyInstrumentations
] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(
      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .$3)(instrumentations, key) && key in target ? instrumentations : target,
      key,
      receiver
    );
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has2, key) {
  const rawKey = toRaw(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType(target);
    warn(
      `Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
    );
  }
}

const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1 /* COMMON */;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2 /* COLLECTION */;
    default:
      return 0 /* INVALID */;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 /* INVALID */ : targetTypeMap((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .toRawType */ .Zf)(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(
    target,
    false,
    mutableHandlers,
    mutableCollectionHandlers,
    reactiveMap
  );
}
function shallowReactive(target) {
  return createReactiveObject(
    target,
    false,
    shallowReactiveHandlers,
    shallowCollectionHandlers,
    shallowReactiveMap
  );
}
function readonly(target) {
  return createReactiveObject(
    target,
    true,
    readonlyHandlers,
    readonlyCollectionHandlers,
    readonlyMap
  );
}
function shallowReadonly(target) {
  return createReactiveObject(
    target,
    true,
    shallowReadonlyHandlers,
    shallowReadonlyCollectionHandlers,
    shallowReadonlyMap
  );
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Gv)(target)) {
    if (false) {}
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0 /* INVALID */) {
    return target;
  }
  const proxy = new Proxy(
    target,
    targetType === 2 /* COLLECTION */ ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return value ? !!value["__v_raw"] : false;
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  if (Object.isExtensible(value)) {
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .def */ .yQ)(value, "__v_skip", true);
  }
  return value;
}
const toReactive = (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Gv)(value) ? reactive(value) : value;
const toReadonly = (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Gv)(value) ? readonly(value) : value;

const COMPUTED_SIDE_EFFECT_WARN = (/* unused pure expression or super */ null && (`Computed is still dirty after getter evaluation, likely because a computed is mutating its own dependency in its getter. State mutations in computed getters should be avoided.  Check the docs for more details: https://vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free`));
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly, isSSR) {
    this.getter = getter;
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this["__v_isReadonly"] = false;
    this.effect = new ReactiveEffect(
      () => getter(this._value),
      () => triggerRefValue(
        this,
        this.effect._dirtyLevel === 2 ? 2 : 3
      )
    );
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly;
  }
  get value() {
    const self = toRaw(this);
    if ((!self._cacheable || self.effect.dirty) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .$H)(self._value, self._value = self.effect.run())) {
      triggerRefValue(self, 4);
    }
    trackRefValue(self);
    if (self.effect._dirtyLevel >= 2) {
      if (false) {}
      triggerRefValue(self, 2);
    }
    return self._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
  // #region polyfill _dirty for backward compatibility third party code for Vue <= 3.3.x
  get _dirty() {
    return this.effect.dirty;
  }
  set _dirty(v) {
    this.effect.dirty = v;
  }
  // #endregion
}
function computed(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .Tn)(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter =  false ? 0 : _vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .NOOP */ .tE;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  if (false) {}
  return cRef;
}

function trackRefValue(ref2) {
  var _a;
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    trackEffect(
      activeEffect,
      (_a = ref2.dep) != null ? _a : ref2.dep = createDep(
        () => ref2.dep = void 0,
        ref2 instanceof ComputedRefImpl ? ref2 : void 0
      ),
       false ? 0 : void 0
    );
  }
}
function triggerRefValue(ref2, dirtyLevel = 4, newVal, oldVal) {
  ref2 = toRaw(ref2);
  const dep = ref2.dep;
  if (dep) {
    triggerEffects(
      dep,
      dirtyLevel,
       false ? 0 : void 0
    );
  }
}
function isRef(r) {
  return !!(r && r.__v_isRef === true);
}
function ref(value) {
  return createRef(value, false);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw(value);
    this._value = __v_isShallow ? value : toReactive(value);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
    newVal = useDirectValue ? newVal : toRaw(newVal);
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .$H)(newVal, this._rawValue)) {
      const oldVal = this._rawValue;
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive(newVal);
      triggerRefValue(this, 4, newVal, oldVal);
    }
  }
}
function triggerRef(ref2) {
  triggerRefValue(ref2, 4,  false ? 0 : void 0);
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
function toValue(source) {
  return isFunction(source) ? source() : unref(source);
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
  constructor(factory) {
    this.dep = void 0;
    this.__v_isRef = true;
    const { get, set } = factory(
      () => trackRefValue(this),
      () => triggerRefValue(this)
    );
    this._get = get;
    this._set = set;
  }
  get value() {
    return this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
}
function customRef(factory) {
  return new CustomRefImpl(factory);
}
function toRefs(object) {
  if (false) {}
  const ret = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .cy)(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = propertyToRef(object, key);
  }
  return ret;
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive(toRaw(this._object), this._key);
  }
}
class GetterRefImpl {
  constructor(_getter) {
    this._getter = _getter;
    this.__v_isRef = true;
    this.__v_isReadonly = true;
  }
  get value() {
    return this._getter();
  }
}
function toRef(source, key, defaultValue) {
  if (isRef(source)) {
    return source;
  } else if (isFunction(source)) {
    return new GetterRefImpl(source);
  } else if (isObject(source) && arguments.length > 1) {
    return propertyToRef(source, key, defaultValue);
  } else {
    return ref(source);
  }
}
function propertyToRef(source, key, defaultValue) {
  const val = source[key];
  return isRef(val) ? val : new ObjectRefImpl(source, key, defaultValue);
}

const deferredComputed = (/* unused pure expression or super */ null && (computed));

const TrackOpTypes = {
  "GET": "get",
  "HAS": "has",
  "ITERATE": "iterate"
};
const TriggerOpTypes = {
  "SET": "set",
  "ADD": "add",
  "DELETE": "delete",
  "CLEAR": "clear"
};
const ReactiveFlags = {
  "SKIP": "__v_skip",
  "IS_REACTIVE": "__v_isReactive",
  "IS_READONLY": "__v_isReadonly",
  "IS_SHALLOW": "__v_isShallow",
  "RAW": "__v_raw"
};




/***/ }),

/***/ 1758:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $u: () => (/* binding */ onUpdated),
/* harmony export */   CE: () => (/* binding */ createElementBlock),
/* harmony export */   Df: () => (/* binding */ getTransitionRawChildren),
/* harmony export */   EW: () => (/* binding */ computed),
/* harmony export */   FK: () => (/* binding */ Fragment),
/* harmony export */   Gt: () => (/* binding */ provide),
/* harmony export */   Gy: () => (/* binding */ useTransitionState),
/* harmony export */   Ic: () => (/* binding */ onBeforeUpdate),
/* harmony export */   Im: () => (/* binding */ Teleport),
/* harmony export */   K9: () => (/* binding */ createRenderer),
/* harmony export */   KC: () => (/* binding */ onBeforeMount),
/* harmony export */   Lk: () => (/* binding */ createBaseVNode),
/* harmony export */   MZ: () => (/* binding */ setTransitionHooks),
/* harmony export */   Ng: () => (/* binding */ guardReactiveProps),
/* harmony export */   OW: () => (/* binding */ resolveTransitionHooks),
/* harmony export */   PR: () => (/* binding */ KeepAlive),
/* harmony export */   PS: () => (/* binding */ hasInjectionContext),
/* harmony export */   Q3: () => (/* binding */ createCommentVNode),
/* harmony export */   QP: () => (/* binding */ BaseTransitionPropsValidators),
/* harmony export */   Qi: () => (/* binding */ pushScopeId),
/* harmony export */   WQ: () => (/* binding */ inject),
/* harmony export */   Wv: () => (/* binding */ createBlock),
/* harmony export */   Y4: () => (/* binding */ onDeactivated),
/* harmony export */   bF: () => (/* binding */ createVNode),
/* harmony export */   bo: () => (/* binding */ withDirectives),
/* harmony export */   dY: () => (/* binding */ nextTick),
/* harmony export */   eW: () => (/* binding */ createTextVNode),
/* harmony export */   g2: () => (/* binding */ resolveComponent),
/* harmony export */   gN: () => (/* binding */ resolveDirective),
/* harmony export */   h: () => (/* binding */ h),
/* harmony export */   hi: () => (/* binding */ onUnmounted),
/* harmony export */   jt: () => (/* binding */ popScopeId),
/* harmony export */   k6: () => (/* binding */ withCtx),
/* harmony export */   n: () => (/* binding */ onActivated),
/* harmony export */   nI: () => (/* binding */ getCurrentInstance),
/* harmony export */   nT: () => (/* binding */ watchEffect),
/* harmony export */   pI: () => (/* binding */ renderList),
/* harmony export */   pM: () => (/* binding */ defineComponent),
/* harmony export */   pR: () => (/* binding */ BaseTransition),
/* harmony export */   qL: () => (/* binding */ callWithAsyncErrorHandling),
/* harmony export */   sV: () => (/* binding */ onMounted),
/* harmony export */   uX: () => (/* binding */ openBlock),
/* harmony export */   v6: () => (/* binding */ mergeProps),
/* harmony export */   wB: () => (/* binding */ watch),
/* harmony export */   xo: () => (/* binding */ onBeforeUnmount)
/* harmony export */ });
/* unused harmony exports Comment, DeprecationTypes, ErrorCodes, ErrorTypeStrings, Static, Suspense, Text, assertNumber, callWithErrorHandling, cloneVNode, compatUtils, createHydrationRenderer, createPropsRestProxy, createSlots, createStaticVNode, defineAsyncComponent, defineEmits, defineExpose, defineModel, defineOptions, defineProps, defineSlots, devtools, handleError, initCustomFormatter, isMemoSame, isRuntimeOnly, isVNode, mergeDefaults, mergeModels, onErrorCaptured, onRenderTracked, onRenderTriggered, onServerPrefetch, queuePostFlushCb, registerRuntimeCompiler, renderSlot, resolveDynamicComponent, resolveFilter, setBlockTracking, setDevtoolsHook, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useAttrs, useModel, useSSRContext, useSlots, version, warn, watchPostEffect, watchSyncEffect, withAsyncContext, withDefaults, withMemo, withScopeId */
/* harmony import */ var _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8734);
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8790);
/**
* @vue/runtime-core v3.4.33
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/





const stack = [];
function pushWarningContext(vnode) {
  stack.push(vnode);
}
function popWarningContext() {
  stack.pop();
}
let isWarning = false;
function warn$1(msg, ...args) {
  if (isWarning) return;
  isWarning = true;
  (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .C4)();
  const instance = stack.length ? stack[stack.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(
      appWarnHandler,
      instance,
      11,
      [
        // eslint-disable-next-line no-restricted-syntax
        msg + args.map((a) => {
          var _a, _b;
          return (_b = (_a = a.toString) == null ? void 0 : _a.call(a)) != null ? _b : JSON.stringify(a);
        }).join(""),
        instance && instance.proxy,
        trace.map(
          ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
        ).join("\n"),
        trace
      ]
    );
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && // avoid spamming console during tests
    true) {
      warnArgs.push(`
`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .bl)();
  isWarning = false;
}
function getComponentTrace() {
  let currentVNode = stack[stack.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i) => {
    logs.push(...i === 0 ? [] : [`
`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open = ` at <${formatComponentName(
    vnode.component,
    vnode.type,
    isRoot
  )}`;
  const close = `>` + postfix;
  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
}
function formatProps(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .i9)(value)) {
    value = formatProp(key, (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .toRaw */ .ux)(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .toRaw */ .ux)(value);
    return raw ? value : [`${key}=`, value];
  }
}
function assertNumber(val, type) {
  if (true) return;
  if (val === void 0) {
    return;
  } else if (typeof val !== "number") {
    warn$1(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
  } else if (isNaN(val)) {
    warn$1(`${type} is NaN - the duration expression might be incorrect.`);
  }
}

const ErrorCodes = {
  "SETUP_FUNCTION": 0,
  "0": "SETUP_FUNCTION",
  "RENDER_FUNCTION": 1,
  "1": "RENDER_FUNCTION",
  "WATCH_GETTER": 2,
  "2": "WATCH_GETTER",
  "WATCH_CALLBACK": 3,
  "3": "WATCH_CALLBACK",
  "WATCH_CLEANUP": 4,
  "4": "WATCH_CLEANUP",
  "NATIVE_EVENT_HANDLER": 5,
  "5": "NATIVE_EVENT_HANDLER",
  "COMPONENT_EVENT_HANDLER": 6,
  "6": "COMPONENT_EVENT_HANDLER",
  "VNODE_HOOK": 7,
  "7": "VNODE_HOOK",
  "DIRECTIVE_HOOK": 8,
  "8": "DIRECTIVE_HOOK",
  "TRANSITION_HOOK": 9,
  "9": "TRANSITION_HOOK",
  "APP_ERROR_HANDLER": 10,
  "10": "APP_ERROR_HANDLER",
  "APP_WARN_HANDLER": 11,
  "11": "APP_WARN_HANDLER",
  "FUNCTION_REF": 12,
  "12": "FUNCTION_REF",
  "ASYNC_COMPONENT_LOADER": 13,
  "13": "ASYNC_COMPONENT_LOADER",
  "SCHEDULER": 14,
  "14": "SCHEDULER",
  "COMPONENT_UPDATE": 15,
  "15": "COMPONENT_UPDATE"
};
const ErrorTypeStrings$1 = {
  ["sp"]: "serverPrefetch hook",
  ["bc"]: "beforeCreate hook",
  ["c"]: "created hook",
  ["bm"]: "beforeMount hook",
  ["m"]: "mounted hook",
  ["bu"]: "beforeUpdate hook",
  ["u"]: "updated",
  ["bum"]: "beforeUnmount hook",
  ["um"]: "unmounted hook",
  ["a"]: "activated hook",
  ["da"]: "deactivated hook",
  ["ec"]: "errorCaptured hook",
  ["rtc"]: "renderTracked hook",
  ["rtg"]: "renderTriggered hook",
  [0]: "setup function",
  [1]: "render function",
  [2]: "watcher getter",
  [3]: "watcher callback",
  [4]: "watcher cleanup function",
  [5]: "native event handler",
  [6]: "component event handler",
  [7]: "vnode hook",
  [8]: "directive hook",
  [9]: "transition hook",
  [10]: "app errorHandler",
  [11]: "app warnHandler",
  [12]: "ref function",
  [13]: "async component loader",
  [14]: "scheduler flush",
  [15]: "component update"
};
function callWithErrorHandling(fn, instance, type, args) {
  try {
    return args ? fn(...args) : fn();
  } catch (err) {
    handleError(err, instance, type);
  }
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(fn)) {
    const res = callWithErrorHandling(fn, instance, type, args);
    if (res && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isPromise */ .yL)(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(fn)) {
    const values = [];
    for (let i = 0; i < fn.length; i++) {
      values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
    }
    return values;
  } else if (false) {}
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo =  false ? 0 : `https://vuejs.org/error-reference/#runtime-${type}`;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i = 0; i < errorCapturedHooks.length; i++) {
          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .C4)();
      callWithErrorHandling(
        appErrorHandler,
        null,
        10,
        [err, exposedInstance, errorInfo]
      );
      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .bl)();
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  if (false) {} else {
    console.error(err);
  }
}

let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
const RECURSION_LIMIT = 100;
function nextTick(fn) {
  const p = currentFlushPromise || resolvedPromise;
  return fn ? p.then(this ? fn.bind(this) : fn) : p;
}
function findInsertionIndex(id) {
  let start = flushIndex + 1;
  let end = queue.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJob = queue[middle];
    const middleJobId = getId(middleJob);
    if (middleJobId < id || middleJobId === id && middleJob.pre) {
      start = middle + 1;
    } else {
      end = middle;
    }
  }
  return start;
}
function queueJob(job) {
  if (!queue.length || !queue.includes(
    job,
    isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex
  )) {
    if (job.id == null) {
      queue.push(job);
    } else {
      queue.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i = queue.indexOf(job);
  if (i > flushIndex) {
    queue.splice(i, 1);
  }
}
function queuePostFlushCb(cb) {
  if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(cb)) {
    if (!activePostFlushCbs || !activePostFlushCbs.includes(
      cb,
      cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex
    )) {
      pendingPostFlushCbs.push(cb);
    }
  } else {
    pendingPostFlushCbs.push(...cb);
  }
  queueFlush();
}
function flushPreFlushCbs(instance, seen, i = isFlushing ? flushIndex + 1 : 0) {
  if (false) {}
  for (; i < queue.length; i++) {
    const cb = queue[i];
    if (cb && cb.pre) {
      if (instance && cb.id !== instance.uid) {
        continue;
      }
      if (false) {}
      queue.splice(i, 1);
      i--;
      cb();
    }
  }
}
function flushPostFlushCbs(seen) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)].sort(
      (a, b) => getId(a) - getId(b)
    );
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    if (false) {}
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      const cb = activePostFlushCbs[postFlushIndex];
      if (false) {}
      if (cb.active !== false) cb();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
const comparator = (a, b) => {
  const diff = getId(a) - getId(b);
  if (diff === 0) {
    if (a.pre && !b.pre) return -1;
    if (b.pre && !a.pre) return 1;
  }
  return diff;
};
function flushJobs(seen) {
  isFlushPending = false;
  isFlushing = true;
  if (false) {}
  queue.sort(comparator);
  const check =  false ? 0 : _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE;
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job && job.active !== false) {
        if (false) {}
        callWithErrorHandling(
          job,
          job.i,
          job.i ? 15 : 14
        );
      }
    }
  } finally {
    flushIndex = 0;
    queue.length = 0;
    flushPostFlushCbs(seen);
    isFlushing = false;
    currentFlushPromise = null;
    if (queue.length || pendingPostFlushCbs.length) {
      flushJobs(seen);
    }
  }
}
function checkRecursiveUpdates(seen, fn) {
  if (!seen.has(fn)) {
    seen.set(fn, 1);
  } else {
    const count = seen.get(fn);
    if (count > RECURSION_LIMIT) {
      const instance = fn.i;
      const componentName = instance && getComponentName(instance.type);
      handleError(
        `Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,
        null,
        10
      );
      return true;
    } else {
      seen.set(fn, count + 1);
    }
  }
}

let isHmrUpdating = false;
const hmrDirtyComponents = /* @__PURE__ */ new Map();
if (false) {}
const map = /* @__PURE__ */ new Map();
function registerHMR(instance) {
  const id = instance.type.__hmrId;
  let record = map.get(id);
  if (!record) {
    createRecord(id, instance.type);
    record = map.get(id);
  }
  record.instances.add(instance);
}
function unregisterHMR(instance) {
  map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id, initialDef) {
  if (map.has(id)) {
    return false;
  }
  map.set(id, {
    initialDef: normalizeClassComponent(initialDef),
    instances: /* @__PURE__ */ new Set()
  });
  return true;
}
function normalizeClassComponent(component) {
  return isClassComponent(component) ? component.__vccOpts : component;
}
function rerender(id, newRender) {
  const record = map.get(id);
  if (!record) {
    return;
  }
  record.initialDef.render = newRender;
  [...record.instances].forEach((instance) => {
    if (newRender) {
      instance.render = newRender;
      normalizeClassComponent(instance.type).render = newRender;
    }
    instance.renderCache = [];
    isHmrUpdating = true;
    instance.effect.dirty = true;
    instance.update();
    isHmrUpdating = false;
  });
}
function reload(id, newComp) {
  const record = map.get(id);
  if (!record) return;
  newComp = normalizeClassComponent(newComp);
  updateComponentDef(record.initialDef, newComp);
  const instances = [...record.instances];
  for (let i = 0; i < instances.length; i++) {
    const instance = instances[i];
    const oldComp = normalizeClassComponent(instance.type);
    let dirtyInstances = hmrDirtyComponents.get(oldComp);
    if (!dirtyInstances) {
      if (oldComp !== record.initialDef) {
        updateComponentDef(oldComp, newComp);
      }
      hmrDirtyComponents.set(oldComp, dirtyInstances = /* @__PURE__ */ new Set());
    }
    dirtyInstances.add(instance);
    instance.appContext.propsCache.delete(instance.type);
    instance.appContext.emitsCache.delete(instance.type);
    instance.appContext.optionsCache.delete(instance.type);
    if (instance.ceReload) {
      dirtyInstances.add(instance);
      instance.ceReload(newComp.styles);
      dirtyInstances.delete(instance);
    } else if (instance.parent) {
      instance.parent.effect.dirty = true;
      queueJob(() => {
        instance.parent.update();
        dirtyInstances.delete(instance);
      });
    } else if (instance.appContext.reload) {
      instance.appContext.reload();
    } else if (typeof window !== "undefined") {
      window.location.reload();
    } else {
      console.warn(
        "[HMR] Root or manually mounted instance modified. Full reload required."
      );
    }
  }
  queuePostFlushCb(() => {
    hmrDirtyComponents.clear();
  });
}
function updateComponentDef(oldComp, newComp) {
  extend(oldComp, newComp);
  for (const key in oldComp) {
    if (key !== "__file" && !(key in newComp)) {
      delete oldComp[key];
    }
  }
}
function tryWrap(fn) {
  return (id, arg) => {
    try {
      return fn(id, arg);
    } catch (e) {
      console.error(e);
      console.warn(
        `[HMR] Something went wrong during Vue component hot-reload. Full reload required.`
      );
    }
  };
}

let devtools$1;
let buffer = [];
let devtoolsNotInstalled = false;
function emit$1(event, ...args) {
  if (devtools$1) {
    devtools$1.emit(event, ...args);
  } else if (!devtoolsNotInstalled) {
    buffer.push({ event, args });
  }
}
function setDevtoolsHook$1(hook, target) {
  var _a, _b;
  devtools$1 = hook;
  if (devtools$1) {
    devtools$1.enabled = true;
    buffer.forEach(({ event, args }) => devtools$1.emit(event, ...args));
    buffer = [];
  } else if (
    // handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== "undefined" && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    // eslint-disable-next-line no-restricted-syntax
    !((_b = (_a = window.navigator) == null ? void 0 : _a.userAgent) == null ? void 0 : _b.includes("jsdom"))
  ) {
    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    replay.push((newHook) => {
      setDevtoolsHook$1(newHook, target);
    });
    setTimeout(() => {
      if (!devtools$1) {
        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
        devtoolsNotInstalled = true;
        buffer = [];
      }
    }, 3e3);
  } else {
    devtoolsNotInstalled = true;
    buffer = [];
  }
}
function devtoolsInitApp(app, version) {
  emit$1("app:init" /* APP_INIT */, app, version, {
    Fragment,
    Text,
    Comment,
    Static
  });
}
function devtoolsUnmountApp(app) {
  emit$1("app:unmount" /* APP_UNMOUNT */, app);
}
const devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:added" /* COMPONENT_ADDED */
);
const devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook("component:updated" /* COMPONENT_UPDATED */);
const _devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:removed" /* COMPONENT_REMOVED */
);
const devtoolsComponentRemoved = (component) => {
  if (devtools$1 && typeof devtools$1.cleanupBuffer === "function" && // remove the component if it wasn't buffered
  !devtools$1.cleanupBuffer(component)) {
    _devtoolsComponentRemoved(component);
  }
};
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function createDevtoolsComponentHook(hook) {
  return (component) => {
    emit$1(
      hook,
      component.appContext.app,
      component.uid,
      component.parent ? component.parent.uid : void 0,
      component
    );
  };
}
const devtoolsPerfStart = /* @__PURE__ */ (/* unused pure expression or super */ null && (createDevtoolsPerformanceHook(
  "perf:start" /* PERFORMANCE_START */
)));
const devtoolsPerfEnd = /* @__PURE__ */ (/* unused pure expression or super */ null && (createDevtoolsPerformanceHook(
  "perf:end" /* PERFORMANCE_END */
)));
function createDevtoolsPerformanceHook(hook) {
  return (component, type, time) => {
    emit$1(hook, component.appContext.app, component.uid, component, type, time);
  };
}
function devtoolsComponentEmit(component, event, params) {
  emit$1(
    "component:emit" /* COMPONENT_EMIT */,
    component.appContext.app,
    component,
    event,
    params
  );
}

let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId(id) {
  currentScopeId = id;
}
function popScopeId() {
  currentScopeId = null;
}
const withScopeId = (_id) => withCtx;
function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx) return fn;
  if (fn._n) {
    return fn;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    let res;
    try {
      res = fn(...args);
    } finally {
      setCurrentRenderingInstance(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking(1);
      }
    }
    if (true) {
      devtoolsComponentUpdated(ctx);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}

function validateDirectiveName(name) {
  if (isBuiltInDirective(name)) {
    warn$1("Do not use built-in directive ids as custom directive id: " + name);
  }
}
function withDirectives(vnode, directives) {
  if (currentRenderingInstance === null) {
     false && 0;
    return vnode;
  }
  const instance = getComponentPublicInstance(currentRenderingInstance);
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i = 0; i < directives.length; i++) {
    let [dir, value, arg, modifiers = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ] = directives[i];
    if (dir) {
      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse(value);
      }
      bindings.push({
        dir,
        instance,
        value,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i = 0; i < bindings.length; i++) {
    const binding = bindings[i];
    if (oldBindings) {
      binding.oldValue = oldBindings[i].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .C4)();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .bl)();
    }
  }
}

const leaveCbKey = Symbol("_leaveCb");
const enterCbKey = Symbol("_enterCb");
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionPropsValidators = {
  mode: String,
  appear: Boolean,
  persisted: Boolean,
  // enter
  onBeforeEnter: TransitionHookValidator,
  onEnter: TransitionHookValidator,
  onAfterEnter: TransitionHookValidator,
  onEnterCancelled: TransitionHookValidator,
  // leave
  onBeforeLeave: TransitionHookValidator,
  onLeave: TransitionHookValidator,
  onAfterLeave: TransitionHookValidator,
  onLeaveCancelled: TransitionHookValidator,
  // appear
  onBeforeAppear: TransitionHookValidator,
  onAppear: TransitionHookValidator,
  onAfterAppear: TransitionHookValidator,
  onAppearCancelled: TransitionHookValidator
};
const recursiveGetSubtree = (instance) => {
  const subTree = instance.subTree;
  return subTree.component ? recursiveGetSubtree(subTree.component) : subTree;
};
const BaseTransitionImpl = {
  name: `BaseTransition`,
  props: BaseTransitionPropsValidators,
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      let child = children[0];
      if (children.length > 1) {
        let hasFound = false;
        for (const c of children) {
          if (c.type !== Comment) {
            if (false) {}
            child = c;
            hasFound = true;
            if (true) break;
          }
        }
      }
      const rawProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .toRaw */ .ux)(props);
      const { mode } = rawProps;
      if (false) {}
      if (state.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getKeepAliveChild(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      let enterHooks = resolveTransitionHooks(
        innerChild,
        rawProps,
        state,
        instance,
        // #11061, ensure enterHooks is fresh after clone
        (hooks) => enterHooks = hooks
      );
      setTransitionHooks(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
      if (oldInnerChild && oldInnerChild.type !== Comment && !isSameVNodeType(innerChild, oldInnerChild) && recursiveGetSubtree(instance).type !== Comment) {
        const leavingHooks = resolveTransitionHooks(
          oldInnerChild,
          rawProps,
          state,
          instance
        );
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode === "out-in" && innerChild.type !== Comment) {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            if (instance.update.active !== false) {
              instance.effect.dirty = true;
              instance.update();
            }
          };
          return emptyPlaceholder(child);
        } else if (mode === "in-out" && innerChild.type !== Comment) {
          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(
              state,
              oldInnerChild
            );
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el[leaveCbKey] = () => {
              earlyRemove();
              el[leaveCbKey] = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance, postClone) {
  const {
    appear,
    mode,
    persisted = false,
    onBeforeEnter,
    onEnter,
    onAfterEnter,
    onEnterCancelled,
    onBeforeLeave,
    onLeave,
    onAfterLeave,
    onLeaveCancelled,
    onBeforeAppear,
    onAppear,
    onAfterAppear,
    onAppearCancelled
  } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook = (hook, args) => {
    hook && callWithAsyncErrorHandling(
      hook,
      instance,
      9,
      args
    );
  };
  const callAsyncHook = (hook, args) => {
    const done = args[1];
    callHook(hook, args);
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(hook)) {
      if (hook.every((hook2) => hook2.length <= 1)) done();
    } else if (hook.length <= 1) {
      done();
    }
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el[leaveCbKey]) {
        el[leaveCbKey](
          true
          /* cancelled */
        );
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el[leaveCbKey]) {
        leavingVNode.el[leaveCbKey]();
      }
      callHook(hook, [el]);
    },
    enter(el) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el[enterCbKey] = (cancelled) => {
        if (called) return;
        called = true;
        if (cancelled) {
          callHook(cancelHook, [el]);
        } else {
          callHook(afterHook, [el]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el[enterCbKey] = void 0;
      };
      if (hook) {
        callAsyncHook(hook, [el, done]);
      } else {
        done();
      }
    },
    leave(el, remove) {
      const key2 = String(vnode.key);
      if (el[enterCbKey]) {
        el[enterCbKey](
          true
          /* cancelled */
        );
      }
      if (state.isUnmounting) {
        return remove();
      }
      callHook(onBeforeLeave, [el]);
      let called = false;
      const done = el[leaveCbKey] = (cancelled) => {
        if (called) return;
        called = true;
        remove();
        if (cancelled) {
          callHook(onLeaveCancelled, [el]);
        } else {
          callHook(onAfterLeave, [el]);
        }
        el[leaveCbKey] = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      const hooks2 = resolveTransitionHooks(
        vnode2,
        props,
        state,
        instance,
        postClone
      );
      if (postClone) postClone(hooks2);
      return hooks2;
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  if (!isKeepAlive(vnode)) {
    return vnode;
  }
  if (false) {}
  const { shapeFlag, children } = vnode;
  if (children) {
    if (shapeFlag & 16) {
      return children[0];
    }
    if (shapeFlag & 32 && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(children.default)) {
      return children.default();
    }
  }
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i = 0; i < children.length; i++) {
    let child = children[i];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i);
    if (child.type === Fragment) {
      if (child.patchFlag & 128) keyedFragmentCount++;
      ret = ret.concat(
        getTransitionRawChildren(child.children, keepComment, key)
      );
    } else if (keepComment || child.type !== Comment) {
      ret.push(key != null ? cloneVNode(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i = 0; i < ret.length; i++) {
      ret[i].patchFlag = -2;
    }
  }
  return ret;
}

/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineComponent(options, extraOptions) {
  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(options) ? (
    // #8326: extend call and options.name access are considered side-effects
    // by Rollup, so we have to wrap it in a pure-annotated IIFE.
    /* @__PURE__ */ (() => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)({ name: options.name }, extraOptions, { setup: options }))()
  ) : options;
}

const isAsyncWrapper = (i) => !!i.type.__asyncLoader;
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineAsyncComponent(source) {
  if (isFunction(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    // undefined = never times out
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve, reject) => {
          const userRetry = () => resolve(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (false) {}
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      if (false) {}
      resolvedComp = comp;
      return comp;
    }));
  };
  return defineComponent({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance;
      if (resolvedComp) {
        return () => createInnerComp(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError(
          err,
          instance,
          13,
          !errorComponent
        );
      };
      if (suspensible && instance.suspense || isInSSRComponentSetup) {
        return load().then((comp) => {
          return () => createInnerComp(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded = ref(false);
      const error = ref();
      const delayed = ref(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded.value && !error.value) {
            const err = new Error(
              `Async component timed out after ${timeout}ms.`
            );
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded.value = true;
        if (instance.parent && isKeepAlive(instance.parent.vnode)) {
          instance.parent.effect.dirty = true;
          queueJob(instance.parent.update);
        }
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded.value && resolvedComp) {
          return createInnerComp(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp(comp, parent) {
  const { ref: ref2, props, children, ce } = parent.vnode;
  const vnode = createVNode(comp, props, children);
  vnode.ref = ref2;
  vnode.ce = ce;
  delete parent.vnode.ce;
  return vnode;
}

const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
const KeepAliveImpl = {
  name: `KeepAlive`,
  // Marker for special handling inside the renderer. We are not using a ===
  // check directly on KeepAlive in the renderer, because importing it directly
  // would prevent it from being tree-shaken.
  __isKeepAlive: true,
  props: {
    include: [String, RegExp, Array],
    exclude: [String, RegExp, Array],
    max: [String, Number]
  },
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const sharedContext = instance.ctx;
    if (!sharedContext.renderer) {
      return () => {
        const children = slots.default && slots.default();
        return children && children.length === 1 ? children[0] : children;
      };
    }
    const cache = /* @__PURE__ */ new Map();
    const keys = /* @__PURE__ */ new Set();
    let current = null;
    if (true) {
      instance.__v_cache = cache;
    }
    const parentSuspense = instance.suspense;
    const {
      renderer: {
        p: patch,
        m: move,
        um: _unmount,
        o: { createElement }
      }
    } = sharedContext;
    const storageContainer = createElement("div");
    sharedContext.activate = (vnode, container, anchor, namespace, optimized) => {
      const instance2 = vnode.component;
      move(vnode, container, anchor, 0, parentSuspense);
      patch(
        instance2.vnode,
        vnode,
        container,
        anchor,
        instance2,
        parentSuspense,
        namespace,
        vnode.slotScopeIds,
        optimized
      );
      queuePostRenderEffect(() => {
        instance2.isDeactivated = false;
        if (instance2.a) {
          (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .invokeArrayFns */ .DY)(instance2.a);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
      }, parentSuspense);
      if (true) {
        devtoolsComponentAdded(instance2);
      }
    };
    sharedContext.deactivate = (vnode) => {
      const instance2 = vnode.component;
      invalidateMount(instance2.m);
      invalidateMount(instance2.a);
      move(vnode, storageContainer, null, 1, parentSuspense);
      queuePostRenderEffect(() => {
        if (instance2.da) {
          (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .invokeArrayFns */ .DY)(instance2.da);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
        instance2.isDeactivated = true;
      }, parentSuspense);
      if (true) {
        devtoolsComponentAdded(instance2);
      }
    };
    function unmount(vnode) {
      resetShapeFlag(vnode);
      _unmount(vnode, instance, parentSuspense, true);
    }
    function pruneCache(filter) {
      cache.forEach((vnode, key) => {
        const name = getComponentName(vnode.type);
        if (name && (!filter || !filter(name))) {
          pruneCacheEntry(key);
        }
      });
    }
    function pruneCacheEntry(key) {
      const cached = cache.get(key);
      if (!current || !isSameVNodeType(cached, current)) {
        unmount(cached);
      } else if (current) {
        resetShapeFlag(current);
      }
      cache.delete(key);
      keys.delete(key);
    }
    watch(
      () => [props.include, props.exclude],
      ([include, exclude]) => {
        include && pruneCache((name) => matches(include, name));
        exclude && pruneCache((name) => !matches(exclude, name));
      },
      // prune post-render after `current` has been updated
      { flush: "post", deep: true }
    );
    let pendingCacheKey = null;
    const cacheSubtree = () => {
      if (pendingCacheKey != null) {
        if (isSuspense(instance.subTree.type)) {
          queuePostRenderEffect(() => {
            cache.set(pendingCacheKey, getInnerChild(instance.subTree));
          }, instance.subTree.suspense);
        } else {
          cache.set(pendingCacheKey, getInnerChild(instance.subTree));
        }
      }
    };
    onMounted(cacheSubtree);
    onUpdated(cacheSubtree);
    onBeforeUnmount(() => {
      cache.forEach((cached) => {
        const { subTree, suspense } = instance;
        const vnode = getInnerChild(subTree);
        if (cached.type === vnode.type && cached.key === vnode.key) {
          resetShapeFlag(vnode);
          const da = vnode.component.da;
          da && queuePostRenderEffect(da, suspense);
          return;
        }
        unmount(cached);
      });
    });
    return () => {
      pendingCacheKey = null;
      if (!slots.default) {
        return null;
      }
      const children = slots.default();
      const rawVNode = children[0];
      if (children.length > 1) {
        if (false) {}
        current = null;
        return children;
      } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
        current = null;
        return rawVNode;
      }
      let vnode = getInnerChild(rawVNode);
      const comp = vnode.type;
      const name = getComponentName(
        isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp
      );
      const { include, exclude, max } = props;
      if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
        current = vnode;
        return rawVNode;
      }
      const key = vnode.key == null ? comp : vnode.key;
      const cachedVNode = cache.get(key);
      if (vnode.el) {
        vnode = cloneVNode(vnode);
        if (rawVNode.shapeFlag & 128) {
          rawVNode.ssContent = vnode;
        }
      }
      pendingCacheKey = key;
      if (cachedVNode) {
        vnode.el = cachedVNode.el;
        vnode.component = cachedVNode.component;
        if (vnode.transition) {
          setTransitionHooks(vnode, vnode.transition);
        }
        vnode.shapeFlag |= 512;
        keys.delete(key);
        keys.add(key);
      } else {
        keys.add(key);
        if (max && keys.size > parseInt(max, 10)) {
          pruneCacheEntry(keys.values().next().value);
        }
      }
      vnode.shapeFlag |= 256;
      current = vnode;
      return isSuspense(rawVNode.type) ? rawVNode : vnode;
    };
  }
};
const KeepAlive = KeepAliveImpl;
function matches(pattern, name) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(pattern)) {
    return pattern.some((p) => matches(p, name));
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(pattern)) {
    return pattern.split(",").includes(name);
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isRegExp */ .gd)(pattern)) {
    return pattern.test(name);
  }
  return false;
}
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(
    type,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted(() => {
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .remove */ .TF)(keepAliveRoot[type], injected);
  }, target);
}
function resetShapeFlag(vnode) {
  vnode.shapeFlag &= ~256;
  vnode.shapeFlag &= ~512;
}
function getInnerChild(vnode) {
  return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
}

function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .C4)();
      const reset = setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      reset();
      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .bl)();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else if (false) {}
}
const createHook = (lifecycle) => (hook, target = currentInstance) => {
  if (!isInSSRComponentSetup || lifecycle === "sp") {
    injectHook(lifecycle, (...args) => hook(...args), target);
  }
};
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook("bu");
const onUpdated = createHook("u");
const onBeforeUnmount = createHook("bum");
const onUnmounted = createHook("um");
const onServerPrefetch = createHook("sp");
const onRenderTriggered = createHook(
  "rtg"
);
const onRenderTracked = createHook(
  "rtc"
);
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}

const COMPONENTS = "components";
const DIRECTIVES = "directives";
function resolveComponent(name, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
function resolveDynamicComponent(component) {
  if (isString(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveDirective(name) {
  return resolveAsset(DIRECTIVES, name);
}
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS) {
      const selfName = getComponentName(
        Component,
        false
      );
      if (selfName && (selfName === name || selfName === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(name) || selfName === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .capitalize */ .ZH)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(name)))) {
        return Component;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve(instance[type] || Component[type], name) || // global registration
      resolve(instance.appContext[type], name)
    );
    if (!res && maybeSelfReference) {
      return Component;
    }
    if (false) {}
    return res;
  } else if (false) {}
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(name)] || registry[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .capitalize */ .ZH)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(name))]);
}

function renderList(source, renderItem, cache, index) {
  let ret;
  const cached = cache && cache[index];
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(source) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(source)) {
    ret = new Array(source.length);
    for (let i = 0, l = source.length; i < l; i++) {
      ret[i] = renderItem(source[i], i, void 0, cached && cached[i]);
    }
  } else if (typeof source === "number") {
    if (false) {}
    ret = new Array(source);
    for (let i = 0; i < source; i++) {
      ret[i] = renderItem(i + 1, i, void 0, cached && cached[i]);
    }
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(
        source,
        (item, i) => renderItem(item, i, void 0, cached && cached[i])
      );
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i = 0, l = keys.length; i < l; i++) {
        const key = keys[i];
        ret[i] = renderItem(source[key], key, i, cached && cached[i]);
      }
    }
  } else {
    ret = [];
  }
  if (cache) {
    cache[index] = ret;
  }
  return ret;
}

function createSlots(slots, dynamicSlots) {
  for (let i = 0; i < dynamicSlots.length; i++) {
    const slot = dynamicSlots[i];
    if (isArray(slot)) {
      for (let j = 0; j < slot.length; j++) {
        slots[slot[j].name] = slot[j].fn;
      }
    } else if (slot) {
      slots[slot.name] = slot.key ? (...args) => {
        const res = slot.fn(...args);
        if (res) res.key = slot.key;
        return res;
      } : slot.fn;
    }
  }
  return slots;
}

function renderSlot(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) {
    if (name !== "default") props.name = name;
    return createVNode("slot", props, fallback && fallback());
  }
  let slot = slots[name];
  if (false) {}
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock();
  const validSlotContent = slot && ensureValidVNode(slot(props));
  const rendered = createBlock(
    Fragment,
    {
      key: (props.key || // slot content array of a dynamic conditional slot may have a branch
      // key attached in the `createSlots` helper, respect that
      validSlotContent && validSlotContent.key || `_${name}`) + // #7256 force differentiate fallback content from actual content
      (!validSlotContent && fallback ? "_fb" : "")
    },
    validSlotContent || (fallback ? fallback() : []),
    validSlotContent && slots._ === 1 ? 64 : -2
  );
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode(child)) return true;
    if (child.type === Comment) return false;
    if (child.type === Fragment && !ensureValidVNode(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}

function toHandlers(obj, preserveCaseIfNecessary) {
  const ret = {};
  if (false) {}
  for (const key in obj) {
    ret[preserveCaseIfNecessary && /[A-Z]/.test(key) ? `on:${key}` : toHandlerKey(key)] = obj[key];
  }
  return ret;
}

const getPublicInstance = (i) => {
  if (!i) return null;
  if (isStatefulComponent(i)) return getComponentPublicInstance(i);
  return getPublicInstance(i.parent);
};
const publicPropertiesMap = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(/* @__PURE__ */ Object.create(null), {
    $: (i) => i,
    $el: (i) => i.vnode.el,
    $data: (i) => i.data,
    $props: (i) =>  false ? 0 : i.props,
    $attrs: (i) =>  false ? 0 : i.attrs,
    $slots: (i) =>  false ? 0 : i.slots,
    $refs: (i) =>  false ? 0 : i.refs,
    $parent: (i) => getPublicInstance(i.parent),
    $root: (i) => getPublicInstance(i.root),
    $emit: (i) => i.emit,
    $options: (i) =>  true ? resolveMergedOptions(i) : 0,
    $forceUpdate: (i) => i.f || (i.f = () => {
      i.effect.dirty = true;
      queueJob(i.update);
    }),
    $nextTick: (i) => i.n || (i.n = nextTick.bind(i.proxy)),
    $watch: (i) =>  true ? instanceWatch.bind(i) : 0
  })
);
const isReservedPrefix = (key) => key === "_" || key === "$";
const hasSetupBinding = (state, key) => state !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ && !state.__isScriptSetup && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(state, key);
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    if (key === "__v_skip") {
      return true;
    }
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    if (false) {}
    let normalizedProps;
    if (key[0] !== "$") {
      const n = accessCache[key];
      if (n !== void 0) {
        switch (n) {
          case 1 /* SETUP */:
            return setupState[key];
          case 2 /* DATA */:
            return data[key];
          case 4 /* CONTEXT */:
            return ctx[key];
          case 3 /* PROPS */:
            return props[key];
        }
      } else if (hasSetupBinding(setupState, key)) {
        accessCache[key] = 1 /* SETUP */;
        return setupState[key];
      } else if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(data, key)) {
        accessCache[key] = 2 /* DATA */;
        return data[key];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(normalizedProps, key)
      ) {
        accessCache[key] = 3 /* PROPS */;
        return props[key];
      } else if (ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(ctx, key)) {
        accessCache[key] = 4 /* CONTEXT */;
        return ctx[key];
      } else if ( false || shouldCacheAccess) {
        accessCache[key] = 0 /* OTHER */;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .track */ .u4)(instance.attrs, "get", "");
         false && 0;
      } else if (false) {}
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type.__cssModules) && (cssModule = cssModule[key])
    ) {
      return cssModule;
    } else if (ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(ctx, key)) {
      accessCache[key] = 4 /* CONTEXT */;
      return ctx[key];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(globalProperties, key)
    ) {
      {
        return globalProperties[key];
      }
    } else if (false) {}
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (false) {} else if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(data, key)) {
      data[key] = value;
      return true;
    } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(instance.props, key)) {
       false && 0;
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
       false && 0;
      return false;
    } else {
      if (false) {} else {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({
    _: { data, setupState, accessCache, ctx, appContext, propsOptions }
  }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(normalizedProps, key) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(ctx, key) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(publicPropertiesMap, key) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
if (false) {}
const RuntimeCompiledPublicInstanceProxyHandlers = /* @__PURE__ */ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(
  {},
  PublicInstanceProxyHandlers,
  {
    get(target, key) {
      if (key === Symbol.unscopables) {
        return;
      }
      return PublicInstanceProxyHandlers.get(target, key, target);
    },
    has(_, key) {
      const has = key[0] !== "_" && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isGloballyAllowed */ .BH)(key);
      if (false) {}
      return has;
    }
  }
);
function createDevRenderContext(instance) {
  const target = {};
  Object.defineProperty(target, `_`, {
    configurable: true,
    enumerable: false,
    get: () => instance
  });
  Object.keys(publicPropertiesMap).forEach((key) => {
    Object.defineProperty(target, key, {
      configurable: true,
      enumerable: false,
      get: () => publicPropertiesMap[key](instance),
      // intercepted by the proxy so no need for implementation,
      // but needed to prevent set errors
      set: NOOP
    });
  });
  return target;
}
function exposePropsOnRenderContext(instance) {
  const {
    ctx,
    propsOptions: [propsOptions]
  } = instance;
  if (propsOptions) {
    Object.keys(propsOptions).forEach((key) => {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => instance.props[key],
        set: NOOP
      });
    });
  }
}
function exposeSetupStateOnRenderContext(instance) {
  const { ctx, setupState } = instance;
  Object.keys(toRaw(setupState)).forEach((key) => {
    if (!setupState.__isScriptSetup) {
      if (isReservedPrefix(key[0])) {
        warn$1(
          `setup() return property ${JSON.stringify(
            key
          )} should not start with "$" or "_" which are reserved prefixes for Vue internals.`
        );
        return;
      }
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => setupState[key],
        set: NOOP
      });
    }
  });
}

const warnRuntimeUsage = (method) => warn$1(
  `${method}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`
);
function defineProps() {
  if (false) {}
  return null;
}
function defineEmits() {
  if (false) {}
  return null;
}
function defineExpose(exposed) {
  if (false) {}
}
function defineOptions(options) {
  if (false) {}
}
function defineSlots() {
  if (false) {}
  return null;
}
function defineModel() {
  if (false) {}
}
function withDefaults(props, defaults) {
  if (false) {}
  return null;
}
function useSlots() {
  return getContext().slots;
}
function useAttrs() {
  return getContext().attrs;
}
function getContext() {
  const i = getCurrentInstance();
  if (false) {}
  return i.setupContext || (i.setupContext = createSetupContext(i));
}
function normalizePropsOrEmits(props) {
  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(props) ? props.reduce(
    (normalized, p) => (normalized[p] = null, normalized),
    {}
  ) : props;
}
function mergeDefaults(raw, defaults) {
  const props = normalizePropsOrEmits(raw);
  for (const key in defaults) {
    if (key.startsWith("__skip")) continue;
    let opt = props[key];
    if (opt) {
      if (isArray(opt) || isFunction(opt)) {
        opt = props[key] = { type: opt, default: defaults[key] };
      } else {
        opt.default = defaults[key];
      }
    } else if (opt === null) {
      opt = props[key] = { default: defaults[key] };
    } else if (false) {}
    if (opt && defaults[`__skip_${key}`]) {
      opt.skipFactory = true;
    }
  }
  return props;
}
function mergeModels(a, b) {
  if (!a || !b) return a || b;
  if (isArray(a) && isArray(b)) return a.concat(b);
  return extend({}, normalizePropsOrEmits(a), normalizePropsOrEmits(b));
}
function createPropsRestProxy(props, excludedKeys) {
  const ret = {};
  for (const key in props) {
    if (!excludedKeys.includes(key)) {
      Object.defineProperty(ret, key, {
        enumerable: true,
        get: () => props[key]
      });
    }
  }
  return ret;
}
function withAsyncContext(getAwaitable) {
  const ctx = getCurrentInstance();
  if (false) {}
  let awaitable = getAwaitable();
  unsetCurrentInstance();
  if (isPromise(awaitable)) {
    awaitable = awaitable.catch((e) => {
      setCurrentInstance(ctx);
      throw e;
    });
  }
  return [awaitable, () => setCurrentInstance(ctx)];
}

function createDuplicateChecker() {
  const cache = /* @__PURE__ */ Object.create(null);
  return (type, key) => {
    if (cache[key]) {
      warn$1(`${type} property "${key}" is already defined in ${cache[key]}.`);
    } else {
      cache[key] = type;
    }
  };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook(options.beforeCreate, instance, "bc");
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives,
    filters
  } = options;
  const checkDuplicateProperties =  false ? 0 : null;
  if (false) {}
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(methodHandler)) {
        if (false) {} else {
          ctx[key] = methodHandler.bind(publicThis);
        }
        if (false) {}
      } else if (false) {}
    }
  }
  if (dataOptions) {
    if (false) {}
    const data = dataOptions.call(publicThis, publicThis);
    if (false) {}
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(data)) {
       false && 0;
    } else {
      instance.data = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .reactive */ .Kh)(data);
      if (false) {}
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(opt) ? opt.bind(publicThis, publicThis) : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(opt.get) ? opt.get.bind(publicThis, publicThis) : _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE;
      if (false) {}
      const set = !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(opt) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(opt.set) ? opt.set.bind(publicThis) :  false ? 0 : _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE;
      const c = computed({
        get,
        set
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c.value,
        set: (v) => c.value = v
      });
      if (false) {}
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook(created, instance, "c");
  }
  function registerLifecycleHook(register, hook) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render && instance.render === _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE) {
    instance.render = render;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components) instance.components = components;
  if (directives) instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(opt)) {
      if ("default" in opt) {
        injected = inject(
          opt.from || key,
          opt.default,
          true
        );
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .i9)(injected)) {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => injected.value,
        set: (v) => injected.value = v
      });
    } else {
      ctx[key] = injected;
    }
    if (false) {}
  }
}
function callHook(hook, instance, type) {
  callWithAsyncErrorHandling(
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(hook) ? hook.map((h) => h.bind(instance.proxy)) : hook.bind(instance.proxy),
    instance,
    type
  );
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(raw)) {
    const handler = ctx[raw];
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(handler)) {
      watch(getter, handler);
    } else if (false) {}
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(raw)) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(raw)) {
      raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
    } else {
      const handler = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(handler)) {
        watch(getter, handler, raw);
      } else if (false) {}
    }
  } else if (false) {}
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const {
    mixins: globalMixins,
    optionsCache: cache,
    config: { optionMergeStrategies }
  } = instance.appContext;
  const cached = cache.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach(
        (m) => mergeOptions(resolved, m, optionMergeStrategies, true)
      );
    }
    mergeOptions(resolved, base, optionMergeStrategies);
  }
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(base)) {
    cache.set(base, resolved);
  }
  return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions(to, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach(
      (m) => mergeOptions(to, m, strats, true)
    );
  }
  for (const key in from) {
    if (asMixin && key === "expose") {
       false && 0;
    } else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
  }
  return to;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeEmitsOrPropsOptions,
  emits: mergeEmitsOrPropsOptions,
  // objects
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  // lifecycle
  beforeCreate: mergeAsArray,
  created: mergeAsArray,
  beforeMount: mergeAsArray,
  mounted: mergeAsArray,
  beforeUpdate: mergeAsArray,
  updated: mergeAsArray,
  beforeDestroy: mergeAsArray,
  beforeUnmount: mergeAsArray,
  destroyed: mergeAsArray,
  unmounted: mergeAsArray,
  activated: mergeAsArray,
  deactivated: mergeAsArray,
  errorCaptured: mergeAsArray,
  serverPrefetch: mergeAsArray,
  // assets
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  // watch
  watch: mergeWatchOptions,
  // provide / inject
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to, from) {
  if (!from) {
    return to;
  }
  if (!to) {
    return from;
  }
  return function mergedDataFn() {
    return ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$))(
      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(to) ? to.call(this, this) : to,
      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(from) ? from.call(this, this) : from
    );
  };
}
function mergeInject(to, from) {
  return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(raw)) {
    const res = {};
    for (let i = 0; i < raw.length; i++) {
      res[raw[i]] = raw[i];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to, from) {
  return to ? [...new Set([].concat(to, from))] : from;
}
function mergeObjectOptions(to, from) {
  return to ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(/* @__PURE__ */ Object.create(null), to, from) : from;
}
function mergeEmitsOrPropsOptions(to, from) {
  if (to) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(to) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(from)) {
      return [.../* @__PURE__ */ new Set([...to, ...from])];
    }
    return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(
      /* @__PURE__ */ Object.create(null),
      normalizePropsOrEmits(to),
      normalizePropsOrEmits(from != null ? from : {})
    );
  } else {
    return from;
  }
}
function mergeWatchOptions(to, from) {
  if (!to) return from;
  if (!from) return to;
  const merged = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(/* @__PURE__ */ Object.create(null), to);
  for (const key in from) {
    merged[key] = mergeAsArray(to[key], from[key]);
  }
  return merged;
}

function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: _vue_shared__WEBPACK_IMPORTED_MODULE_1__.NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1 = 0;
function createAppAPI(render, hydrate) {
  return function createApp(rootComponent, rootProps = null) {
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(rootComponent)) {
      rootComponent = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)({}, rootComponent);
    }
    if (rootProps != null && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(rootProps)) {
       false && 0;
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new WeakSet();
    let isMounted = false;
    const app = context.app = {
      _uid: uid$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version,
      get config() {
        return context.config;
      },
      set config(v) {
        if (false) {}
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin)) {
           false && 0;
        } else if (plugin && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app, ...options);
        } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(plugin)) {
          installedPlugins.add(plugin);
          plugin(app, ...options);
        } else if (false) {}
        return app;
      },
      mixin(mixin) {
        if (true) {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          } else if (false) {}
        } else {}
        return app;
      },
      component(name, component) {
        if (false) {}
        if (!component) {
          return context.components[name];
        }
        if (false) {}
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        if (false) {}
        if (!directive) {
          return context.directives[name];
        }
        if (false) {}
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, namespace) {
        if (!isMounted) {
          if (false) {}
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (namespace === true) {
            namespace = "svg";
          } else if (namespace === false) {
            namespace = void 0;
          }
          if (false) {}
          if (isHydrate && hydrate) {
            hydrate(vnode, rootContainer);
          } else {
            render(vnode, rootContainer, namespace);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          if (true) {
            app._instance = vnode.component;
            devtoolsInitApp(app, version);
          }
          return getComponentPublicInstance(vnode.component);
        } else if (false) {}
      },
      unmount() {
        if (isMounted) {
          render(null, app._container);
          if (true) {
            app._instance = null;
            devtoolsUnmountApp(app);
          }
          delete app._container.__vue_app__;
        } else if (false) {}
      },
      provide(key, value) {
        if (false) {}
        context.provides[key] = value;
        return app;
      },
      runWithContext(fn) {
        const lastApp = currentApp;
        currentApp = app;
        try {
          return fn();
        } finally {
          currentApp = lastApp;
        }
      }
    };
    return app;
  };
}
let currentApp = null;

function provide(key, value) {
  if (!currentInstance) {
    if (false) {}
  } else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance || currentApp) {
    const provides = instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : currentApp._context.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
    } else if (false) {}
  } else if (false) {}
}
function hasInjectionContext() {
  return !!(currentInstance || currentRenderingInstance || currentApp);
}

const internalObjectProto = {};
const createInternalObject = () => Object.create(internalObjectProto);
const isInternalObject = (obj) => Object.getPrototypeOf(obj) === internalObjectProto;

function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = createInternalObject();
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  if (false) {}
  if (isStateful) {
    instance.props = isSSR ? props : (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .shallowReactive */ .Gc)(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function isInHmrContext(instance) {
  while (instance) {
    if (instance.type.__hmrId) return true;
    instance = instance.parent;
  }
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const {
    props,
    attrs,
    vnode: { patchFlag }
  } = instance;
  const rawCurrentProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .toRaw */ .ux)(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
     true && (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i = 0; i < propsToUpdate.length; i++) {
        let key = propsToUpdate[i];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(key);
            props[camelizedKey] = resolvePropValue(
              options,
              rawCurrentProps,
              camelizedKey,
              value,
              instance,
              false
            );
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(key)) === key || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .trigger */ .hZ)(instance.attrs, "set", "");
  }
  if (false) {}
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isReservedProp */ .SU)(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(options, camelKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .toRaw */ .ux)(props);
    const castValues = rawCastValues || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ;
    for (let i = 0; i < needCastKeys.length; i++) {
      const key = needCastKeys[i];
      props[key] = resolvePropValue(
        options,
        rawCurrentProps,
        key,
        castValues[key],
        instance,
        !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(castValues, key)
      );
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && !opt.skipFactory && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          const reset = setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(
            null,
            props
          );
          reset();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[0 /* shouldCast */]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[1 /* shouldCastTrue */] && (value === "" || value === (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(key))) {
        value = true;
      }
    }
  }
  return value;
}
const mixinPropsCache = /* @__PURE__ */ new WeakMap();
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache =  true && asMixin ? mixinPropsCache : appContext.propsCache;
  const cached = cache.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if ( true && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(normalized, props);
      if (keys) needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(comp)) {
      cache.set(comp, _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Oj);
    }
    return _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Oj;
  }
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(raw)) {
    for (let i = 0; i < raw.length; i++) {
      if (false) {}
      const normalizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(raw[i]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ;
      }
    }
  } else if (raw) {
    if (false) {}
    for (const key in raw) {
      const normalizedKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(opt) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(opt) ? { type: opt } : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)({}, opt);
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[0 /* shouldCast */] = booleanIndex > -1;
          prop[1 /* shouldCastTrue */] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(comp)) {
    cache.set(comp, res);
  }
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$" && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isReservedProp */ .SU)(key)) {
    return true;
  } else if (false) {}
  return false;
}
function getType(ctor) {
  if (ctor === null) {
    return "null";
  }
  if (typeof ctor === "function") {
    return ctor.name || "";
  } else if (typeof ctor === "object") {
    const name = ctor.constructor && ctor.constructor.name;
    return name || "";
  }
  return "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(expectedTypes)) {
    return expectedTypes.findIndex((t) => isSameType(t, type));
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function validateProps(rawProps, props, instance) {
  const resolvedValues = toRaw(props);
  const options = instance.propsOptions[0];
  for (const key in options) {
    let opt = options[key];
    if (opt == null) continue;
    validateProp(
      key,
      resolvedValues[key],
      opt,
       false ? 0 : resolvedValues,
      !hasOwn(rawProps, key) && !hasOwn(rawProps, hyphenate(key))
    );
  }
}
function validateProp(name, value, prop, props, isAbsent) {
  const { type, required, validator, skipCheck } = prop;
  if (required && isAbsent) {
    warn$1('Missing required prop: "' + name + '"');
    return;
  }
  if (value == null && !required) {
    return;
  }
  if (type != null && type !== true && !skipCheck) {
    let isValid = false;
    const types = isArray(type) ? type : [type];
    const expectedTypes = [];
    for (let i = 0; i < types.length && !isValid; i++) {
      const { valid, expectedType } = assertType(value, types[i]);
      expectedTypes.push(expectedType || "");
      isValid = valid;
    }
    if (!isValid) {
      warn$1(getInvalidTypeMessage(name, value, expectedTypes));
      return;
    }
  }
  if (validator && !validator(value, props)) {
    warn$1('Invalid prop: custom validator check failed for prop "' + name + '".');
  }
}
const isSimpleType = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(
  "String,Number,Boolean,Function,Symbol,BigInt"
)));
function assertType(value, type) {
  let valid;
  const expectedType = getType(type);
  if (isSimpleType(expectedType)) {
    const t = typeof value;
    valid = t === expectedType.toLowerCase();
    if (!valid && t === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isObject(value);
  } else if (expectedType === "Array") {
    valid = isArray(value);
  } else if (expectedType === "null") {
    valid = value === null;
  } else {
    valid = value instanceof type;
  }
  return {
    valid,
    expectedType
  };
}
function getInvalidTypeMessage(name, value, expectedTypes) {
  if (expectedTypes.length === 0) {
    return `Prop type [] for prop "${name}" won't match anything. Did you mean to use type Array instead?`;
  }
  let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize).join(" | ")}`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType(value);
  const expectedValue = styleValue(value, expectedType);
  const receivedValue = styleValue(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`;
  }
  message += `, got ${receivedType} `;
  if (isExplicable(receivedType)) {
    message += `with value ${receivedValue}.`;
  }
  return message;
}
function styleValue(value, type) {
  if (type === "String") {
    return `"${value}"`;
  } else if (type === "Number") {
    return `${Number(value)}`;
  } else {
    return `${value}`;
  }
}
function isExplicable(type) {
  const explicitTypes = ["string", "number", "boolean"];
  return explicitTypes.some((elem) => type.toLowerCase() === elem);
}
function isBoolean(...args) {
  return args.some((elem) => elem.toLowerCase() === "boolean");
}

const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
const normalizeSlot = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx((...args) => {
    if (false) {}
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key)) continue;
    const value = rawSlots[key];
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(value)) {
      slots[key] = normalizeSlot(key, value, ctx);
    } else if (value != null) {
      if (false) {}
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  if (false) {}
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const assignSlots = (slots, children, optimized) => {
  for (const key in children) {
    if (optimized || key !== "_") {
      slots[key] = children[key];
    }
  }
};
const initSlots = (instance, children, optimized) => {
  const slots = instance.slots = createInternalObject();
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      assignSlots(slots, children, optimized);
      if (optimized) {
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .def */ .yQ)(slots, "_", type, true);
      }
    } else {
      normalizeObjectSlots(children, slots);
    }
  } else if (children) {
    normalizeVNodeSlots(instance, children);
  }
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (false) {} else if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        assignSlots(slots, children, optimized);
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && deletionComparisonTarget[key] == null) {
        delete slots[key];
      }
    }
  }
};

function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(rawRef)) {
    rawRef.forEach(
      (r, i) => setRef(
        r,
        oldRawRef && ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(oldRawRef) ? oldRawRef[i] : oldRawRef),
        parentSuspense,
        vnode,
        isUnmount
      )
    );
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getComponentPublicInstance(vnode.component) : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref } = rawRef;
  if (false) {}
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(oldRef)) {
      refs[oldRef] = null;
      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .i9)(oldRef)) {
      oldRef.value = null;
    }
  }
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(ref)) {
    callWithErrorHandling(ref, owner, 12, [value, refs]);
  } else {
    const _isString = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(ref);
    const _isRef = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .i9)(ref);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(setupState, ref) ? setupState[ref] : refs[ref] : ref.value;
          if (isUnmount) {
            (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(existing) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .remove */ .TF)(existing, refValue);
          } else {
            if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(existing)) {
              if (_isString) {
                refs[ref] = [refValue];
                if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(setupState, ref)) {
                  setupState[ref] = refs[ref];
                }
              } else {
                ref.value = [refValue];
                if (rawRef.k) refs[rawRef.k] = ref.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref] = value;
          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(setupState, ref)) {
            setupState[ref] = value;
          }
        } else if (_isRef) {
          ref.value = value;
          if (rawRef.k) refs[rawRef.k] = value;
        } else if (false) {}
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    } else if (false) {}
  }
}

const TeleportEndKey = Symbol("_vte");
const isTeleport = (type) => type.__isTeleport;
const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
const isTargetMathML = (target) => typeof MathMLElement === "function" && target instanceof MathMLElement;
const resolveTarget = (props, select) => {
  const targetSelector = props && props.to;
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(targetSelector)) {
    if (!select) {
       false && 0;
      return null;
    } else {
      const target = select(targetSelector);
      if (false) {}
      return target;
    }
  } else {
    if (false) {}
    return targetSelector;
  }
};
const TeleportImpl = {
  name: "Teleport",
  __isTeleport: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals) {
    const {
      mc: mountChildren,
      pc: patchChildren,
      pbc: patchBlockChildren,
      o: { insert, querySelector, createText, createComment }
    } = internals;
    const disabled = isTeleportDisabled(n2.props);
    let { shapeFlag, children, dynamicChildren } = n2;
    if (false) {}
    if (n1 == null) {
      const placeholder = n2.el =  false ? 0 : createText("");
      const mainAnchor = n2.anchor =  false ? 0 : createText("");
      const target = n2.target = resolveTarget(n2.props, querySelector);
      const targetStart = n2.targetStart = createText("");
      const targetAnchor = n2.targetAnchor = createText("");
      insert(placeholder, container, anchor);
      insert(mainAnchor, container, anchor);
      targetStart[TeleportEndKey] = targetAnchor;
      if (target) {
        insert(targetStart, target);
        insert(targetAnchor, target);
        if (namespace === "svg" || isTargetSVG(target)) {
          namespace = "svg";
        } else if (namespace === "mathml" || isTargetMathML(target)) {
          namespace = "mathml";
        }
      } else if (false) {}
      const mount = (container2, anchor2) => {
        if (shapeFlag & 16) {
          mountChildren(
            children,
            container2,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
      } else if (target) {
        mount(target, targetAnchor);
      }
    } else {
      n2.el = n1.el;
      n2.targetStart = n1.targetStart;
      const mainAnchor = n2.anchor = n1.anchor;
      const target = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      if (namespace === "svg" || isTargetSVG(target)) {
        namespace = "svg";
      } else if (namespace === "mathml" || isTargetMathML(target)) {
        namespace = "mathml";
      }
      if (dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          currentContainer,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds
        );
        traverseStaticChildren(n1, n2, true);
      } else if (!optimized) {
        patchChildren(
          n1,
          n2,
          currentContainer,
          currentAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          false
        );
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(
            n2,
            container,
            mainAnchor,
            internals,
            1
          );
        } else {
          if (n2.props && n1.props && n2.props.to !== n1.props.to) {
            n2.props.to = n1.props.to;
          }
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(
            n2.props,
            querySelector
          );
          if (nextTarget) {
            moveTeleport(
              n2,
              nextTarget,
              null,
              internals,
              0
            );
          } else if (false) {}
        } else if (wasDisabled) {
          moveTeleport(
            n2,
            target,
            targetAnchor,
            internals,
            1
          );
        }
      }
    }
    updateCssVars(n2);
  },
  remove(vnode, parentComponent, parentSuspense, { um: unmount, o: { remove: hostRemove } }, doRemove) {
    const {
      shapeFlag,
      children,
      anchor,
      targetStart,
      targetAnchor,
      target,
      props
    } = vnode;
    if (target) {
      hostRemove(targetStart);
      hostRemove(targetAnchor);
    }
    doRemove && hostRemove(anchor);
    if (shapeFlag & 16) {
      const shouldRemove = doRemove || !isTeleportDisabled(props);
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        unmount(
          child,
          parentComponent,
          parentSuspense,
          shouldRemove,
          !!child.dynamicChildren
        );
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const { el, anchor, shapeFlag, children, props } = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i = 0; i < children.length; i++) {
        move(
          children[i],
          container,
          parentAnchor,
          2
        );
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, {
  o: { nextSibling, parentNode, querySelector }
}, hydrateChildren) {
  const target = vnode.target = resolveTarget(
    vnode.props,
    querySelector
  );
  if (target) {
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (isTeleportDisabled(vnode.props)) {
        vnode.anchor = hydrateChildren(
          nextSibling(node),
          vnode,
          parentNode(node),
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
        vnode.targetAnchor = targetNode;
      } else {
        vnode.anchor = nextSibling(node);
        let targetAnchor = targetNode;
        while (targetAnchor) {
          targetAnchor = nextSibling(targetAnchor);
          if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
            vnode.targetAnchor = targetAnchor;
            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
            break;
          }
        }
        hydrateChildren(
          targetNode,
          vnode,
          target,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
      }
    }
    updateCssVars(vnode);
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
const Teleport = TeleportImpl;
function updateCssVars(vnode) {
  const ctx = vnode.ctx;
  if (ctx && ctx.ut) {
    let node = vnode.children[0].el;
    while (node && node !== vnode.targetAnchor) {
      if (node.nodeType === 1) node.setAttribute("data-v-owner", ctx.uid);
      node = node.nextSibling;
    }
    ctx.ut();
  }
}

let hasLoggedMismatchError = false;
const logMismatchError = () => {
  if (hasLoggedMismatchError) {
    return;
  }
  console.error("Hydration completed but contains mismatches.");
  hasLoggedMismatchError = true;
};
const isSVGContainer = (container) => container.namespaceURI.includes("svg") && container.tagName !== "foreignObject";
const isMathMLContainer = (container) => container.namespaceURI.includes("MathML");
const getContainerType = (container) => {
  if (isSVGContainer(container)) return "svg";
  if (isMathMLContainer(container)) return "mathml";
  return void 0;
};
const isComment = (node) => node.nodeType === 8 /* COMMENT */;
function createHydrationFunctions(rendererInternals) {
  const {
    mt: mountComponent,
    p: patch,
    o: {
      patchProp,
      createText,
      nextSibling,
      parentNode,
      remove,
      insert,
      createComment
    }
  } = rendererInternals;
  const hydrate = (vnode, container) => {
    if (!container.hasChildNodes()) {
      ( true) && warn$1(
        `Attempting to hydrate existing markup but container is empty. Performing full mount instead.`
      );
      patch(null, vnode, container);
      flushPostFlushCbs();
      container._vnode = vnode;
      return;
    }
    hydrateNode(container.firstChild, vnode, null, null, null);
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
    optimized = optimized || !!vnode.dynamicChildren;
    const isFragmentStart = isComment(node) && node.data === "[";
    const onMismatch = () => handleMismatch(
      node,
      vnode,
      parentComponent,
      parentSuspense,
      slotScopeIds,
      isFragmentStart
    );
    const { type, ref, shapeFlag, patchFlag } = vnode;
    let domType = node.nodeType;
    vnode.el = node;
    if (true) {
      def(node, "__vnode", vnode, true);
      def(node, "__vueParentComponent", parentComponent, true);
    }
    if (patchFlag === -2) {
      optimized = false;
      vnode.dynamicChildren = null;
    }
    let nextNode = null;
    switch (type) {
      case Text:
        if (domType !== 3 /* TEXT */) {
          if (vnode.children === "") {
            insert(vnode.el = createText(""), parentNode(node), node);
            nextNode = node;
          } else {
            nextNode = onMismatch();
          }
        } else {
          if (node.data !== vnode.children) {
            ( true) && warn$1(
              `Hydration text mismatch in`,
              node.parentNode,
              `
  - rendered on server: ${JSON.stringify(
                node.data
              )}
  - expected on client: ${JSON.stringify(vnode.children)}`
            );
            logMismatchError();
            node.data = vnode.children;
          }
          nextNode = nextSibling(node);
        }
        break;
      case Comment:
        if (isTemplateNode(node)) {
          nextNode = nextSibling(node);
          replaceNode(
            vnode.el = node.content.firstChild,
            node,
            parentComponent
          );
        } else if (domType !== 8 /* COMMENT */ || isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = nextSibling(node);
        }
        break;
      case Static:
        if (isFragmentStart) {
          node = nextSibling(node);
          domType = node.nodeType;
        }
        if (domType === 1 /* ELEMENT */ || domType === 3 /* TEXT */) {
          nextNode = node;
          const needToAdoptContent = !vnode.children.length;
          for (let i = 0; i < vnode.staticCount; i++) {
            if (needToAdoptContent)
              vnode.children += nextNode.nodeType === 1 /* ELEMENT */ ? nextNode.outerHTML : nextNode.data;
            if (i === vnode.staticCount - 1) {
              vnode.anchor = nextNode;
            }
            nextNode = nextSibling(nextNode);
          }
          return isFragmentStart ? nextSibling(nextNode) : nextNode;
        } else {
          onMismatch();
        }
        break;
      case Fragment:
        if (!isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = hydrateFragment(
            node,
            vnode,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            optimized
          );
        }
        break;
      default:
        if (shapeFlag & 1) {
          if ((domType !== 1 /* ELEMENT */ || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) && !isTemplateNode(node)) {
            nextNode = onMismatch();
          } else {
            nextNode = hydrateElement(
              node,
              vnode,
              parentComponent,
              parentSuspense,
              slotScopeIds,
              optimized
            );
          }
        } else if (shapeFlag & 6) {
          vnode.slotScopeIds = slotScopeIds;
          const container = parentNode(node);
          if (isFragmentStart) {
            nextNode = locateClosingAnchor(node);
          } else if (isComment(node) && node.data === "teleport start") {
            nextNode = locateClosingAnchor(node, node.data, "teleport end");
          } else {
            nextNode = nextSibling(node);
          }
          mountComponent(
            vnode,
            container,
            null,
            parentComponent,
            parentSuspense,
            getContainerType(container),
            optimized
          );
          if (isAsyncWrapper(vnode)) {
            let subTree;
            if (isFragmentStart) {
              subTree = createVNode(Fragment);
              subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
            } else {
              subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
            }
            subTree.el = node;
            vnode.component.subTree = subTree;
          }
        } else if (shapeFlag & 64) {
          if (domType !== 8 /* COMMENT */) {
            nextNode = onMismatch();
          } else {
            nextNode = vnode.type.hydrate(
              node,
              vnode,
              parentComponent,
              parentSuspense,
              slotScopeIds,
              optimized,
              rendererInternals,
              hydrateChildren
            );
          }
        } else if (shapeFlag & 128) {
          nextNode = vnode.type.hydrate(
            node,
            vnode,
            parentComponent,
            parentSuspense,
            getContainerType(parentNode(node)),
            slotScopeIds,
            optimized,
            rendererInternals,
            hydrateNode
          );
        } else if (true) {
          warn$1("Invalid HostVNode type:", type, `(${typeof type})`);
        }
    }
    if (ref != null) {
      setRef(ref, null, parentSuspense, vnode);
    }
    return nextNode;
  };
  const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!vnode.dynamicChildren;
    const { type, props, patchFlag, shapeFlag, dirs, transition } = vnode;
    const forcePatch = type === "input" || type === "option";
    if ( false || forcePatch || patchFlag !== -1) {
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      let needCallTransitionHooks = false;
      if (isTemplateNode(el)) {
        needCallTransitionHooks = needTransition(parentSuspense, transition) && parentComponent && parentComponent.vnode.props && parentComponent.vnode.props.appear;
        const content = el.content.firstChild;
        if (needCallTransitionHooks) {
          transition.beforeEnter(content);
        }
        replaceNode(content, el, parentComponent);
        vnode.el = el = content;
      }
      if (shapeFlag & 16 && // skip if element has innerHTML / textContent
      !(props && (props.innerHTML || props.textContent))) {
        let next = hydrateChildren(
          el.firstChild,
          vnode,
          el,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
        let hasWarned = false;
        while (next) {
          if (( true) && !hasWarned) {
            warn$1(
              `Hydration children mismatch on`,
              el,
              `
Server rendered element contains more child nodes than client vdom.`
            );
            hasWarned = true;
          }
          logMismatchError();
          const cur = next;
          next = next.nextSibling;
          remove(cur);
        }
      } else if (shapeFlag & 8) {
        if (el.textContent !== vnode.children) {
          ( true) && warn$1(
            `Hydration text content mismatch on`,
            el,
            `
  - rendered on server: ${el.textContent}
  - expected on client: ${vnode.children}`
          );
          logMismatchError();
          el.textContent = vnode.children;
        }
      }
      if (props) {
        if (true) {
          for (const key in props) {
            if (( true) && // #11189 skip if this node has directives that have created hooks
            // as it could have mutated the DOM in any possible way
            !(dirs && dirs.some((d) => d.dir.created)) && propHasMismatch(el, key, props[key], vnode, parentComponent)) {
              logMismatchError();
            }
            if (forcePatch && (key.endsWith("value") || key === "indeterminate") || isOn(key) && !isReservedProp(key) || // force hydrate v-bind with .prop modifiers
            key[0] === ".") {
              patchProp(el, key, null, props[key], void 0, parentComponent);
            }
          }
        } else {}
      }
      let vnodeHooks;
      if (vnodeHooks = props && props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHooks, parentComponent, vnode);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
      }
      if ((vnodeHooks = props && props.onVnodeMounted) || dirs || needCallTransitionHooks) {
        queueEffectWithSuspense(() => {
          vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
          needCallTransitionHooks && transition.enter(el);
          dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
        }, parentSuspense);
      }
    }
    return el.nextSibling;
  };
  const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!parentVNode.dynamicChildren;
    const children = parentVNode.children;
    const l = children.length;
    let hasWarned = false;
    for (let i = 0; i < l; i++) {
      const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
      const isText = vnode.type === Text;
      if (node) {
        if (isText && !optimized) {
          let next = children[i + 1];
          if (next && (next = normalizeVNode(next)).type === Text) {
            insert(
              createText(
                node.data.slice(vnode.children.length)
              ),
              container,
              nextSibling(node)
            );
            node.data = vnode.children;
          }
        }
        node = hydrateNode(
          node,
          vnode,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
      } else if (isText && !vnode.children) {
        insert(vnode.el = createText(""), container);
      } else {
        if (( true) && !hasWarned) {
          warn$1(
            `Hydration children mismatch on`,
            container,
            `
Server rendered element contains fewer child nodes than client vdom.`
          );
          hasWarned = true;
        }
        logMismatchError();
        patch(
          null,
          vnode,
          container,
          null,
          parentComponent,
          parentSuspense,
          getContainerType(container),
          slotScopeIds
        );
      }
    }
    return node;
  };
  const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    const { slotScopeIds: fragmentSlotScopeIds } = vnode;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    const container = parentNode(node);
    const next = hydrateChildren(
      nextSibling(node),
      vnode,
      container,
      parentComponent,
      parentSuspense,
      slotScopeIds,
      optimized
    );
    if (next && isComment(next) && next.data === "]") {
      return nextSibling(vnode.anchor = next);
    } else {
      logMismatchError();
      insert(vnode.anchor = createComment(`]`), container, next);
      return next;
    }
  };
  const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {
    ( true) && warn$1(
      `Hydration node mismatch:
- rendered on server:`,
      node,
      node.nodeType === 3 /* TEXT */ ? `(text)` : isComment(node) && node.data === "[" ? `(start of fragment)` : ``,
      `
- expected on client:`,
      vnode.type
    );
    logMismatchError();
    vnode.el = null;
    if (isFragment) {
      const end = locateClosingAnchor(node);
      while (true) {
        const next2 = nextSibling(node);
        if (next2 && next2 !== end) {
          remove(next2);
        } else {
          break;
        }
      }
    }
    const next = nextSibling(node);
    const container = parentNode(node);
    remove(node);
    patch(
      null,
      vnode,
      container,
      next,
      parentComponent,
      parentSuspense,
      getContainerType(container),
      slotScopeIds
    );
    return next;
  };
  const locateClosingAnchor = (node, open = "[", close = "]") => {
    let match = 0;
    while (node) {
      node = nextSibling(node);
      if (node && isComment(node)) {
        if (node.data === open) match++;
        if (node.data === close) {
          if (match === 0) {
            return nextSibling(node);
          } else {
            match--;
          }
        }
      }
    }
    return node;
  };
  const replaceNode = (newNode, oldNode, parentComponent) => {
    const parentNode2 = oldNode.parentNode;
    if (parentNode2) {
      parentNode2.replaceChild(newNode, oldNode);
    }
    let parent = parentComponent;
    while (parent) {
      if (parent.vnode.el === oldNode) {
        parent.vnode.el = parent.subTree.el = newNode;
      }
      parent = parent.parent;
    }
  };
  const isTemplateNode = (node) => {
    return node.nodeType === 1 /* ELEMENT */ && node.tagName.toLowerCase() === "template";
  };
  return [hydrate, hydrateNode];
}
function propHasMismatch(el, key, clientValue, vnode, instance) {
  let mismatchType;
  let mismatchKey;
  let actual;
  let expected;
  if (key === "class") {
    actual = el.getAttribute("class");
    expected = normalizeClass(clientValue);
    if (!isSetEqual(toClassSet(actual || ""), toClassSet(expected))) {
      mismatchType = mismatchKey = `class`;
    }
  } else if (key === "style") {
    actual = el.getAttribute("style") || "";
    expected = isString(clientValue) ? clientValue : stringifyStyle(normalizeStyle(clientValue));
    const actualMap = toStyleMap(actual);
    const expectedMap = toStyleMap(expected);
    if (vnode.dirs) {
      for (const { dir, value } of vnode.dirs) {
        if (dir.name === "show" && !value) {
          expectedMap.set("display", "none");
        }
      }
    }
    if (instance) {
      resolveCssVars(instance, vnode, expectedMap);
    }
    if (!isMapEqual(actualMap, expectedMap)) {
      mismatchType = mismatchKey = "style";
    }
  } else if (el instanceof SVGElement && isKnownSvgAttr(key) || el instanceof HTMLElement && (isBooleanAttr(key) || isKnownHtmlAttr(key))) {
    if (isBooleanAttr(key)) {
      actual = el.hasAttribute(key);
      expected = includeBooleanAttr(clientValue);
    } else if (clientValue == null) {
      actual = el.hasAttribute(key);
      expected = false;
    } else {
      if (el.hasAttribute(key)) {
        actual = el.getAttribute(key);
      } else if (key === "value" && el.tagName === "TEXTAREA") {
        actual = el.value;
      } else {
        actual = false;
      }
      expected = isRenderableAttrValue(clientValue) ? String(clientValue) : false;
    }
    if (actual !== expected) {
      mismatchType = `attribute`;
      mismatchKey = key;
    }
  }
  if (mismatchType) {
    const format = (v) => v === false ? `(not rendered)` : `${mismatchKey}="${v}"`;
    const preSegment = `Hydration ${mismatchType} mismatch on`;
    const postSegment = `
  - rendered on server: ${format(actual)}
  - expected on client: ${format(expected)}
  Note: this mismatch is check-only. The DOM will not be rectified in production due to performance overhead.
  You should fix the source of the mismatch.`;
    {
      warn$1(preSegment, el, postSegment);
    }
    return true;
  }
  return false;
}
function toClassSet(str) {
  return new Set(str.trim().split(/\s+/));
}
function isSetEqual(a, b) {
  if (a.size !== b.size) {
    return false;
  }
  for (const s of a) {
    if (!b.has(s)) {
      return false;
    }
  }
  return true;
}
function toStyleMap(str) {
  const styleMap = /* @__PURE__ */ new Map();
  for (const item of str.split(";")) {
    let [key, value] = item.split(":");
    key = key.trim();
    value = value && value.trim();
    if (key && value) {
      styleMap.set(key, value);
    }
  }
  return styleMap;
}
function isMapEqual(a, b) {
  if (a.size !== b.size) {
    return false;
  }
  for (const [key, value] of a) {
    if (value !== b.get(key)) {
      return false;
    }
  }
  return true;
}
function resolveCssVars(instance, vnode, expectedMap) {
  const root = instance.subTree;
  if (instance.getCssVars && (vnode === root || root && root.type === Fragment && root.children.includes(vnode))) {
    const cssVars = instance.getCssVars();
    for (const key in cssVars) {
      expectedMap.set(`--${key}`, String(cssVars[key]));
    }
  }
  if (vnode === root && instance.parent) {
    resolveCssVars(instance.parent, instance.vnode, expectedMap);
  }
}

let supported;
let perf;
function startMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    perf.mark(`vue-${type}-${instance.uid}`);
  }
  if (true) {
    devtoolsPerfStart(instance, type, isSupported() ? perf.now() : Date.now());
  }
}
function endMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    const startTag = `vue-${type}-${instance.uid}`;
    const endTag = startTag + `:end`;
    perf.mark(endTag);
    perf.measure(
      `<${formatComponentName(instance, instance.type)}> ${type}`,
      startTag,
      endTag
    );
    perf.clearMarks(startTag);
    perf.clearMarks(endTag);
  }
  if (true) {
    devtoolsPerfEnd(instance, type, isSupported() ? perf.now() : Date.now());
  }
}
function isSupported() {
  if (supported !== void 0) {
    return supported;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported = true;
    perf = window.performance;
  } else {
    supported = false;
  }
  return supported;
}

function initFeatureFlags() {
  const needWarn = [];
  if (false) {}
  if (false) {}
  if (false) {}
  if (false) {}
}

const queuePostRenderEffect = queueEffectWithSuspense ;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function createHydrationRenderer(options) {
  return baseCreateRenderer(options, createHydrationFunctions);
}
function baseCreateRenderer(options, createHydrationFns) {
  {
    initFeatureFlags();
  }
  const target = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .getGlobalThis */ .We)();
  target.__VUE__ = true;
  if (true) {
    setDevtoolsHook$1(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
  }
  const {
    insert: hostInsert,
    remove: hostRemove,
    patchProp: hostPatchProp,
    createElement: hostCreateElement,
    createText: hostCreateText,
    createComment: hostCreateComment,
    setText: hostSetText,
    setElementText: hostSetElementText,
    parentNode: hostParentNode,
    nextSibling: hostNextSibling,
    setScopeId: hostSetScopeId = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE,
    insertStaticContent: hostInsertStaticContent
  } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, namespace = void 0, slotScopeIds = null, optimized =  false ? 0 : !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref, shapeFlag } = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, namespace);
        } else if (false) {}
        break;
      case Fragment:
        processFragment(
          n1,
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        break;
      default:
        if (shapeFlag & 1) {
          processElement(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 6) {
          processComponent(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 64) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else if (shapeFlag & 128) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else if (false) {}
    }
    if (ref != null && parentComponent) {
      setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateText(n2.children),
        container,
        anchor
      );
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateComment(n2.children || ""),
        container,
        anchor
      );
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, namespace) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(
      n2.children,
      container,
      anchor,
      namespace,
      n2.el,
      n2.anchor
    );
  };
  const patchStaticNode = (n1, n2, container, namespace) => {
    if (n2.children !== n1.children) {
      const anchor = hostNextSibling(n1.anchor);
      removeStaticNode(n1);
      [n2.el, n2.anchor] = hostInsertStaticContent(
        n2.children,
        container,
        anchor,
        namespace
      );
    } else {
      n2.el = n1.el;
      n2.anchor = n1.anchor;
    }
  };
  const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostInsert(el, container, nextSibling);
      el = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el, anchor }) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostRemove(el);
      el = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    if (n2.type === "svg") {
      namespace = "svg";
    } else if (n2.type === "math") {
      namespace = "mathml";
    }
    if (n1 == null) {
      mountElement(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      patchElement(
        n1,
        n2,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let el;
    let vnodeHook;
    const { props, shapeFlag, transition, dirs } = vnode;
    el = vnode.el = hostCreateElement(
      vnode.type,
      namespace,
      props && props.is,
      props
    );
    if (shapeFlag & 8) {
      hostSetElementText(el, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(
        vnode.children,
        el,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(vnode, namespace),
        slotScopeIds,
        optimized
      );
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "created");
    }
    setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isReservedProp */ .SU)(key)) {
          hostPatchProp(el, key, null, props[key], namespace, parentComponent);
        }
      }
      if ("value" in props) {
        hostPatchProp(el, "value", null, props.value, namespace);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHook, parentComponent, vnode);
      }
    }
    if (true) {
      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .def */ .yQ)(el, "__vnode", vnode, true);
      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .def */ .yQ)(el, "__vueParentComponent", parentComponent, true);
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = needTransition(parentSuspense, transition);
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (slotScopeIds) {
      for (let i = 0; i < slotScopeIds.length; i++) {
        hostSetScopeId(el, slotScopeIds[i]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (false) {}
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(
          el,
          parentVNode,
          parentVNode.scopeId,
          parentVNode.slotScopeIds,
          parentComponent.parent
        );
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, start = 0) => {
    for (let i = start; i < children.length; i++) {
      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
      patch(
        null,
        child,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const el = n2.el = n1.el;
    if (true) {
      el.__vnode = n2;
    }
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ;
    const newProps = n2.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    if (false) {}
    if (oldProps.innerHTML && newProps.innerHTML == null || oldProps.textContent && newProps.textContent == null) {
      hostSetElementText(el, "");
    }
    if (dynamicChildren) {
      patchBlockChildren(
        n1.dynamicChildren,
        dynamicChildren,
        el,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds
      );
      if (false) {}
    } else if (!optimized) {
      patchChildren(
        n1,
        n2,
        el,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds,
        false
      );
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el, oldProps, newProps, parentComponent, namespace);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, "class", null, newProps.class, namespace);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, "style", oldProps.style, newProps.style, namespace);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i = 0; i < propsToUpdate.length; i++) {
            const key = propsToUpdate[i];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(el, key, prev, next, namespace, parentComponent);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el, oldProps, newProps, parentComponent, namespace);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, namespace, slotScopeIds) => {
    for (let i = 0; i < newChildren.length; i++) {
      const oldVNode = oldChildren[i];
      const newVNode = newChildren[i];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(
        oldVNode,
        newVNode,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        true
      );
    }
  };
  const patchProps = (el, oldProps, newProps, parentComponent, namespace) => {
    if (oldProps !== newProps) {
      if (oldProps !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ) {
        for (const key in oldProps) {
          if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isReservedProp */ .SU)(key) && !(key in newProps)) {
            hostPatchProp(
              el,
              key,
              oldProps[key],
              null,
              namespace,
              parentComponent
            );
          }
        }
      }
      for (const key in newProps) {
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isReservedProp */ .SU)(key)) continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(el, key, prev, next, namespace, parentComponent);
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el, "value", oldProps.value, newProps.value, namespace);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (false) {}
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(
        // #10007
        // such fragment like `<></>` will be compiled into
        // a fragment which doesn't have a children.
        // In this case fallback to an empty array
        n2.children || [],
        container,
        fragmentEndAnchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          container,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds
        );
        if (false) {} else if (
          // #2080 if the stable fragment has a key, it's a <template v-for> that may
          //  get moved around. Make sure all root level vnodes inherit el.
          // #2134 or if it's a component root, it may also get moved around
          // as the component is being moved.
          n2.key != null || parentComponent && n2 === parentComponent.subTree
        ) {
          traverseStaticChildren(
            n1,
            n2,
            true
            /* shallow */
          );
        }
      } else {
        patchChildren(
          n1,
          n2,
          container,
          fragmentEndAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(
          n2,
          container,
          anchor,
          namespace,
          optimized
        );
      } else {
        mountComponent(
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          optimized
        );
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, namespace, optimized) => {
    const instance = (initialVNode.component = createComponentInstance(
      initialVNode,
      parentComponent,
      parentSuspense
    ));
    if (false) {}
    if (false) {}
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      if (false) {}
      setupComponent(instance, false, optimized);
      if (false) {}
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect, optimized);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor);
      }
    } else {
      setupRenderEffect(
        instance,
        initialVNode,
        container,
        anchor,
        parentSuspense,
        namespace,
        optimized
      );
    }
    if (false) {}
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        if (false) {}
        updateComponentPreRender(instance, n2, optimized);
        if (false) {}
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.effect.dirty = true;
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, namespace, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el, props } = initialVNode;
        const { bm, m, parent } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm) {
          (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .invokeArrayFns */ .DY)(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el && hydrateNode) {
          const hydrateSubTree = () => {
            if (false) {}
            instance.subTree = renderComponentRoot(instance);
            if (false) {}
            if (false) {}
            hydrateNode(
              el,
              instance.subTree,
              instance,
              parentSuspense,
              null
            );
            if (false) {}
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(
              // note: we are moving the render call into an async callback,
              // which means it won't track dependencies - but it's ok because
              // a server-rendered async wrapper is already in resolved state
              // and it will never need to change.
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          if (false) {}
          const subTree = instance.subTree = renderComponentRoot(instance);
          if (false) {}
          if (false) {}
          patch(
            null,
            subTree,
            container,
            anchor,
            instance,
            parentSuspense,
            namespace
          );
          if (false) {}
          initialVNode.el = subTree.el;
        }
        if (m) {
          queuePostRenderEffect(m, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode),
            parentSuspense
          );
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        if (true) {
          devtoolsComponentAdded(instance);
        }
        initialVNode = container = anchor = null;
      } else {
        let { next, bu, u, parent, vnode } = instance;
        {
          const nonHydratedAsyncRoot = locateNonHydratedAsyncRoot(instance);
          if (nonHydratedAsyncRoot) {
            if (next) {
              next.el = vnode.el;
              updateComponentPreRender(instance, next, optimized);
            }
            nonHydratedAsyncRoot.asyncDep.then(() => {
              if (!instance.isUnmounted) {
                componentUpdateFn();
              }
            });
            return;
          }
        }
        let originNext = next;
        let vnodeHook;
        if (false) {}
        toggleRecurse(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu) {
          (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .invokeArrayFns */ .DY)(bu);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        toggleRecurse(instance, true);
        if (false) {}
        const nextTree = renderComponentRoot(instance);
        if (false) {}
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        if (false) {}
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          namespace
        );
        if (false) {}
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u) {
          queuePostRenderEffect(u, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, next, vnode),
            parentSuspense
          );
        }
        if (true) {
          devtoolsComponentUpdated(instance);
        }
        if (false) {}
      }
    };
    const effect = instance.effect = new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .ReactiveEffect */ .X2(
      componentUpdateFn,
      _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE,
      () => queueJob(update),
      instance.scope
      // track it in component's effect scope
    );
    const update = instance.update = () => {
      if (effect.dirty) {
        effect.run();
      }
    };
    update.i = instance;
    update.id = instance.uid;
    toggleRecurse(instance, true);
    if (false) {}
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .C4)();
    flushPreFlushCbs(instance);
    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .bl)();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(
            c1,
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    c1 = c1 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Oj;
    c2 = c2 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Oj;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i;
    for (i = 0; i < commonLength; i++) {
      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      patch(
        c1[i],
        nextChild,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
    if (oldLength > newLength) {
      unmountChildren(
        c1,
        parentComponent,
        parentSuspense,
        true,
        false,
        commonLength
      );
    } else {
      mountChildren(
        c2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized,
        commonLength
      );
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let i = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i <= e1 && i <= e2) {
      const n1 = c1[i];
      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      i++;
    }
    while (i <= e1 && i <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i > e1) {
      if (i <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i <= e2) {
          patch(
            null,
            c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]),
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          i++;
        }
      }
    } else if (i > e2) {
      while (i <= e1) {
        unmount(c1[i], parentComponent, parentSuspense, true);
        i++;
      }
    } else {
      const s1 = i;
      const s2 = i;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i = s2; i <= e2; i++) {
        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
        if (nextChild.key != null) {
          if (false) {}
          keyToNewIndexMap.set(nextChild.key, i);
        }
      }
      let j;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0;
      for (i = s1; i <= e1; i++) {
        const prevChild = c1[i];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j = s2; j <= e2; j++) {
            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
              newIndex = j;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(
            prevChild,
            c2[newIndex],
            container,
            null,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Oj;
      j = increasingNewIndexSequence.length - 1;
      for (i = toBePatched - 1; i >= 0; i--) {
        const nextIndex = s2 + i;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i] === 0) {
          patch(
            null,
            nextChild,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (moved) {
          if (j < 0 || i !== increasingNewIndexSequence[j]) {
            move(nextChild, container, anchor, 2);
          } else {
            j--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el, container, anchor);
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition2 = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition2) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove2 = () => hostInsert(el, container, anchor);
        const performLeave = () => {
          leave(el, () => {
            remove2();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove2, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const {
      type,
      props,
      ref,
      children,
      dynamicChildren,
      shapeFlag,
      patchFlag,
      dirs,
      cacheIndex
    } = vnode;
    if (patchFlag === -2) {
      optimized = false;
    }
    if (ref != null) {
      setRef(ref, null, parentSuspense, vnode, true);
    }
    if (cacheIndex != null) {
      parentComponent.renderCache[cacheIndex] = void 0;
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(
          vnode,
          parentComponent,
          parentSuspense,
          internals,
          doRemove
        );
      } else if (dynamicChildren && // #5154
      // when v-once is used inside a block, setBlockTracking(-1) marks the
      // parent block with hasOnce: true
      // so that it doesn't take the fast path during unmount - otherwise
      // components nested in v-once are never unmounted.
      !dynamicChildren.hasOnce && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(
          dynamicChildren,
          parentComponent,
          parentSuspense,
          false,
          true
        );
      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove = (vnode) => {
    const { type, el, anchor, transition } = vnode;
    if (type === Fragment) {
      if (false) {} else {
        removeFragment(el, anchor);
      }
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    if (false) {}
    const { bum, scope, update, subTree, um, m, a } = instance;
    invalidateMount(m);
    invalidateMount(a);
    if (bum) {
      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .invokeArrayFns */ .DY)(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
    if (true) {
      devtoolsComponentRemoved(instance);
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i = start; i < children.length; i++) {
      unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    const el = hostNextSibling(vnode.anchor || vnode.el);
    const teleportEnd = el && el[TeleportEndKey];
    return teleportEnd ? hostNextSibling(teleportEnd) : el;
  };
  let isFlushing = false;
  const render = (vnode, container, namespace) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(
        container._vnode || null,
        vnode,
        container,
        null,
        null,
        null,
        namespace
      );
    }
    if (!isFlushing) {
      isFlushing = true;
      flushPreFlushCbs();
      flushPostFlushCbs();
      isFlushing = false;
    }
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate, hydrateNode] = createHydrationFns(
      internals
    );
  }
  return {
    render,
    hydrate,
    createApp: createAppAPI(render, hydrate)
  };
}
function resolveChildrenNamespace({ type, props }, currentNamespace) {
  return currentNamespace === "svg" && type === "foreignObject" || currentNamespace === "mathml" && type === "annotation-xml" && props && props.encoding && props.encoding.includes("html") ? void 0 : currentNamespace;
}
function toggleRecurse({ effect, update }, allowed) {
  effect.allowRecurse = update.allowRecurse = allowed;
}
function needTransition(parentSuspense, transition) {
  return (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(ch1) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(ch2)) {
    for (let i = 0; i < ch1.length; i++) {
      const c1 = ch1[i];
      let c2 = ch2[i];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i] = cloneIfMounted(ch2[i]);
          c2.el = c1.el;
        }
        if (!shallow && c2.patchFlag !== -2)
          traverseStaticChildren(c1, c2);
      }
      if (c2.type === Text) {
        c2.el = c1.el;
      }
      if (false) {}
    }
  }
}
function getSequence(arr) {
  const p = arr.slice();
  const result = [0];
  let i, j, u, v, c;
  const len = arr.length;
  for (i = 0; i < len; i++) {
    const arrI = arr[i];
    if (arrI !== 0) {
      j = result[result.length - 1];
      if (arr[j] < arrI) {
        p[i] = j;
        result.push(i);
        continue;
      }
      u = 0;
      v = result.length - 1;
      while (u < v) {
        c = u + v >> 1;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p[i] = result[u - 1];
        }
        result[u] = i;
      }
    }
  }
  u = result.length;
  v = result[u - 1];
  while (u-- > 0) {
    result[u] = v;
    v = p[v];
  }
  return result;
}
function locateNonHydratedAsyncRoot(instance) {
  const subComponent = instance.subTree.component;
  if (subComponent) {
    if (subComponent.asyncDep && !subComponent.asyncResolved) {
      return subComponent;
    } else {
      return locateNonHydratedAsyncRoot(subComponent);
    }
  }
}
function invalidateMount(hooks) {
  if (hooks) {
    for (let i = 0; i < hooks.length; i++) hooks[i].active = false;
  }
}

const ssrContextKey = Symbol.for("v-scx");
const useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    if (!ctx) {
       false && 0;
    }
    return ctx;
  }
};

function watchEffect(effect, options) {
  return doWatch(effect, null, options);
}
function watchPostEffect(effect, options) {
  return doWatch(
    effect,
    null,
     false ? 0 : { flush: "post" }
  );
}
function watchSyncEffect(effect, options) {
  return doWatch(
    effect,
    null,
     false ? 0 : { flush: "sync" }
  );
}
const INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  if (false) {}
  return doWatch(source, cb, options);
}
function doWatch(source, cb, {
  immediate,
  deep,
  flush,
  once,
  onTrack,
  onTrigger
} = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ) {
  if (cb && once) {
    const _cb = cb;
    cb = (...args) => {
      _cb(...args);
      unwatch();
    };
  }
  if (false) {}
  if (false) {}
  const warnInvalidSource = (s) => {
    warn$1(
      `Invalid watch source: `,
      s,
      `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`
    );
  };
  const instance = currentInstance;
  const reactiveGetter = (source2) => deep === true ? source2 : (
    // for deep: false, only traverse root-level properties
    traverse(source2, deep === false ? 1 : void 0)
  );
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .i9)(source)) {
    getter = () => source.value;
    forceTrigger = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isShallow */ .fE)(source);
  } else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isReactive */ .g8)(source)) {
    getter = () => reactiveGetter(source);
    forceTrigger = true;
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s) => (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isReactive */ .g8)(s) || (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isShallow */ .fE)(s));
    getter = () => source.map((s) => {
      if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .i9)(s)) {
        return s.value;
      } else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isReactive */ .g8)(s)) {
        return reactiveGetter(s);
      } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(s)) {
        return callWithErrorHandling(s, instance, 2);
      } else {
         false && 0;
      }
    });
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(
          source,
          instance,
          3,
          [onCleanup]
        );
      };
    }
  } else {
    getter = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE;
     false && 0;
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn) => {
    cleanup = effect.onStop = () => {
      callWithErrorHandling(fn, instance, 4);
      cleanup = effect.onStop = void 0;
    };
  };
  let ssrCleanup;
  if (isInSSRComponentSetup) {
    onCleanup = _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    if (flush === "sync") {
      const ctx = useSSRContext();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else {
      return _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE;
    }
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect.active || !effect.dirty) {
      return;
    }
    if (cb) {
      const newValue = effect.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasChanged */ .$H)(v, oldValue[i])) : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasChanged */ .$H)(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          // pass undefined as the old value when it's changed for the first time
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    job.pre = true;
    if (instance) job.id = instance.uid;
    scheduler = () => queueJob(job);
  }
  const effect = new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .ReactiveEffect */ .X2(getter, _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE, scheduler);
  const scope = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .getCurrentScope */ .o5)();
  const unwatch = () => {
    effect.stop();
    if (scope) {
      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .remove */ .TF)(scope.effects, effect);
    }
  };
  if (false) {}
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(
      effect.run.bind(effect),
      instance && instance.suspense
    );
  } else {
    effect.run();
  }
  if (ssrCleanup) ssrCleanup.push(unwatch);
  return unwatch;
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const reset = setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  reset();
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i = 0; i < segments.length && cur; i++) {
      cur = cur[segments[i]];
    }
    return cur;
  };
}
function traverse(value, depth = Infinity, seen) {
  if (depth <= 0 || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(value) || value["__v_skip"]) {
    return value;
  }
  seen = seen || /* @__PURE__ */ new Set();
  if (seen.has(value)) {
    return value;
  }
  seen.add(value);
  depth--;
  if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .i9)(value)) {
    traverse(value.value, depth, seen);
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(value)) {
    for (let i = 0; i < value.length; i++) {
      traverse(value[i], depth, seen);
    }
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isSet */ .vM)(value) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isMap */ .CE)(value)) {
    value.forEach((v) => {
      traverse(v, depth, seen);
    });
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isPlainObject */ .Qd)(value)) {
    for (const key in value) {
      traverse(value[key], depth, seen);
    }
    for (const key of Object.getOwnPropertySymbols(value)) {
      if (Object.prototype.propertyIsEnumerable.call(value, key)) {
        traverse(value[key], depth, seen);
      }
    }
  }
  return value;
}

function useModel(props, name, options = EMPTY_OBJ) {
  const i = getCurrentInstance();
  if (false) {}
  if (false) {}
  const camelizedName = camelize(name);
  const hyphenatedName = hyphenate(name);
  const modifiers = getModelModifiers(props, name);
  const res = customRef((track, trigger) => {
    let localValue;
    let prevSetValue;
    let prevEmittedValue;
    watchSyncEffect(() => {
      const propValue = props[name];
      if (hasChanged(localValue, propValue)) {
        localValue = propValue;
        trigger();
      }
    });
    return {
      get() {
        track();
        return options.get ? options.get(localValue) : localValue;
      },
      set(value) {
        if (!hasChanged(value, localValue)) {
          return;
        }
        const rawProps = i.vnode.props;
        if (!(rawProps && // check if parent has passed v-model
        (name in rawProps || camelizedName in rawProps || hyphenatedName in rawProps) && (`onUpdate:${name}` in rawProps || `onUpdate:${camelizedName}` in rawProps || `onUpdate:${hyphenatedName}` in rawProps))) {
          localValue = value;
          trigger();
        }
        const emittedValue = options.set ? options.set(value) : value;
        i.emit(`update:${name}`, emittedValue);
        if (value !== emittedValue && value !== prevSetValue && emittedValue === prevEmittedValue) {
          trigger();
        }
        prevSetValue = value;
        prevEmittedValue = emittedValue;
      }
    };
  });
  res[Symbol.iterator] = () => {
    let i2 = 0;
    return {
      next() {
        if (i2 < 2) {
          return { value: i2++ ? modifiers || EMPTY_OBJ : res, done: false };
        } else {
          return { done: true };
        }
      }
    };
  };
  return res;
}
const getModelModifiers = (props, modelName) => {
  return modelName === "modelValue" || modelName === "model-value" ? props.modelModifiers : props[`${modelName}Modifiers`] || props[`${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(modelName)}Modifiers`] || props[`${(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(modelName)}Modifiers`];
};

function emit(instance, event, ...rawArgs) {
  if (instance.isUnmounted) return;
  const props = instance.vnode.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ;
  if (false) {}
  let args = rawArgs;
  const isModelListener = event.startsWith("update:");
  const modifiers = isModelListener && getModelModifiers(props, event.slice(7));
  if (modifiers) {
    if (modifiers.trim) {
      args = rawArgs.map((a) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(a) ? a.trim() : a);
    }
    if (modifiers.number) {
      args = rawArgs.map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .looseToNumber */ .bB);
    }
  }
  if (true) {
    devtoolsComponentEmit(instance, event, args);
  }
  if (false) {}
  let handlerName;
  let handler = props[handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toHandlerKey */ .rU)(event)] || // also try camelCase event handler (#2249)
  props[handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toHandlerKey */ .rU)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(event))];
  if (!handler && isModelListener) {
    handler = props[handlerName = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toHandlerKey */ .rU)((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(
      handler,
      instance,
      6,
      args
    );
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(
      onceHandler,
      instance,
      6,
      args
    );
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.emitsCache;
  const cached = cache.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if ( true && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(comp)) {
      cache.set(comp, null);
    }
    return null;
  }
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(normalized, raw);
  }
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(comp)) {
    cache.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isOn */ .Mp)(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(options, key[0].toLowerCase() + key.slice(1)) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(options, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(key)) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hasOwn */ .$3)(options, key);
}

let accessedAttrs = false;
function markAttrsAccessed() {
  accessedAttrs = true;
}
function renderComponentRoot(instance) {
  const {
    type: Component,
    vnode,
    proxy,
    withProxy,
    propsOptions: [propsOptions],
    slots,
    attrs,
    emit,
    render,
    renderCache,
    props,
    data,
    setupState,
    ctx,
    inheritAttrs
  } = instance;
  const prev = setCurrentRenderingInstance(instance);
  let result;
  let fallthroughAttrs;
  if (false) {}
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      const thisProxy =  false ? 0 : proxyToUse;
      result = normalizeVNode(
        render.call(
          thisProxy,
          proxyToUse,
          renderCache,
           false ? 0 : props,
          setupState,
          data,
          ctx
        )
      );
      fallthroughAttrs = attrs;
    } else {
      const render2 = Component;
      if (false) {}
      result = normalizeVNode(
        render2.length > 1 ? render2(
           false ? 0 : props,
           false ? 0 : { attrs, slots, emit }
        ) : render2(
           false ? 0 : props,
          null
        )
      );
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(err, instance, 1);
    result = createVNode(Comment);
  }
  let root = result;
  let setRoot = void 0;
  if (false) {}
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys.some(_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isModelListener */ .CP)) {
          fallthroughAttrs = filterModelListeners(
            fallthroughAttrs,
            propsOptions
          );
        }
        root = cloneVNode(root, fallthroughAttrs, false, true);
      } else if (false) {}
    }
  }
  if (vnode.dirs) {
    if (false) {}
    root = cloneVNode(root, null, false, true);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    if (false) {}
    root.transition = vnode.transition;
  }
  if (false) {} else {
    result = root;
  }
  setCurrentRenderingInstance(prev);
  return result;
}
const getChildRoot = (vnode) => {
  const rawChildren = vnode.children;
  const dynamicChildren = vnode.dynamicChildren;
  const childRoot = filterSingleRoot(rawChildren, false);
  if (!childRoot) {
    return [vnode, void 0];
  } else if (false) {}
  const index = rawChildren.indexOf(childRoot);
  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
  const setRoot = (updatedRoot) => {
    rawChildren[index] = updatedRoot;
    if (dynamicChildren) {
      if (dynamicIndex > -1) {
        dynamicChildren[dynamicIndex] = updatedRoot;
      } else if (updatedRoot.patchFlag > 0) {
        vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
      }
    }
  };
  return [normalizeVNode(childRoot), setRoot];
};
function filterSingleRoot(children, recurse = true) {
  let singleRoot;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (isVNode(child)) {
      if (child.type !== Comment || child.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
          if (false) {}
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isOn */ .Mp)(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isModelListener */ .CP)(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
const isElementRoot = (vnode) => {
  return vnode.shapeFlag & (6 | 1) || vnode.type === Comment;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if (false) {}
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i = 0; i < dynamicProps.length; i++) {
        const key = dynamicProps[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i = 0; i < nextKeys.length; i++) {
    const key = nextKeys[i];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent }, el) {
  while (parent) {
    const root = parent.subTree;
    if (root.suspense && root.suspense.activeBranch === vnode) {
      root.el = vnode.el;
    }
    if (root === vnode) {
      (vnode = parent.vnode).el = el;
      parent = parent.parent;
    } else {
      break;
    }
  }
}

const isSuspense = (type) => type.__isSuspense;
let suspenseId = 0;
const SuspenseImpl = {
  name: "Suspense",
  // In order to make Suspense tree-shakable, we need to avoid importing it
  // directly in the renderer. The renderer checks for the __isSuspense flag
  // on a vnode's type and calls the `process` method, passing in renderer
  // internals.
  __isSuspense: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
    if (n1 == null) {
      mountSuspense(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    } else {
      if (parentSuspense && parentSuspense.deps > 0 && !n1.suspense.isInFallback) {
        n2.suspense = n1.suspense;
        n2.suspense.vnode = n2;
        n2.el = n1.el;
        return;
      }
      patchSuspense(
        n1,
        n2,
        container,
        anchor,
        parentComponent,
        namespace,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    }
  },
  hydrate: hydrateSuspense,
  normalize: normalizeSuspenseChildren
};
const Suspense = (/* unused pure expression or super */ null && (SuspenseImpl)) ;
function triggerEvent(vnode, name) {
  const eventListener = vnode.props && vnode.props[name];
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(eventListener)) {
    eventListener();
  }
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
  const {
    p: patch,
    o: { createElement }
  } = rendererInternals;
  const hiddenContainer = createElement("div");
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    container,
    hiddenContainer,
    anchor,
    namespace,
    slotScopeIds,
    optimized,
    rendererInternals
  );
  patch(
    null,
    suspense.pendingBranch = vnode.ssContent,
    hiddenContainer,
    null,
    parentComponent,
    suspense,
    namespace,
    slotScopeIds
  );
  if (suspense.deps > 0) {
    triggerEvent(vnode, "onPending");
    triggerEvent(vnode, "onFallback");
    patch(
      null,
      vnode.ssFallback,
      container,
      anchor,
      parentComponent,
      null,
      // fallback tree will not have suspense context
      namespace,
      slotScopeIds
    );
    setActiveBranch(suspense, vnode.ssFallback);
  } else {
    suspense.resolve(false, true);
  }
}
function patchSuspense(n1, n2, container, anchor, parentComponent, namespace, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
  const suspense = n2.suspense = n1.suspense;
  suspense.vnode = n2;
  n2.el = n1.el;
  const newBranch = n2.ssContent;
  const newFallback = n2.ssFallback;
  const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
  if (pendingBranch) {
    suspense.pendingBranch = newBranch;
    if (isSameVNodeType(newBranch, pendingBranch)) {
      patch(
        pendingBranch,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else if (isInFallback) {
        if (!isHydrating) {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            namespace,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      }
    } else {
      suspense.pendingId = suspenseId++;
      if (isHydrating) {
        suspense.isHydrating = false;
        suspense.activeBranch = pendingBranch;
      } else {
        unmount(pendingBranch, parentComponent, suspense);
      }
      suspense.deps = 0;
      suspense.effects.length = 0;
      suspense.hiddenContainer = createElement("div");
      if (isInFallback) {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        } else {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            namespace,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        patch(
          activeBranch,
          newBranch,
          container,
          anchor,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        suspense.resolve(true);
      } else {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        }
      }
    }
  } else {
    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
      patch(
        activeBranch,
        newBranch,
        container,
        anchor,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      setActiveBranch(suspense, newBranch);
    } else {
      triggerEvent(n2, "onPending");
      suspense.pendingBranch = newBranch;
      if (newBranch.shapeFlag & 512) {
        suspense.pendingId = newBranch.component.suspenseId;
      } else {
        suspense.pendingId = suspenseId++;
      }
      patch(
        null,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else {
        const { timeout, pendingId } = suspense;
        if (timeout > 0) {
          setTimeout(() => {
            if (suspense.pendingId === pendingId) {
              suspense.fallback(newFallback);
            }
          }, timeout);
        } else if (timeout === 0) {
          suspense.fallback(newFallback);
        }
      }
    }
  }
}
let hasWarned = false;
function createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, namespace, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
  if (false) {}
  const {
    p: patch,
    m: move,
    um: unmount,
    n: next,
    o: { parentNode, remove }
  } = rendererInternals;
  let parentSuspenseId;
  const isSuspensible = isVNodeSuspensible(vnode);
  if (isSuspensible) {
    if (parentSuspense && parentSuspense.pendingBranch) {
      parentSuspenseId = parentSuspense.pendingId;
      parentSuspense.deps++;
    }
  }
  const timeout = vnode.props ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toNumber */ .Ro)(vnode.props.timeout) : void 0;
  if (false) {}
  const initialAnchor = anchor;
  const suspense = {
    vnode,
    parent: parentSuspense,
    parentComponent,
    namespace,
    container,
    hiddenContainer,
    deps: 0,
    pendingId: suspenseId++,
    timeout: typeof timeout === "number" ? timeout : -1,
    activeBranch: null,
    pendingBranch: null,
    isInFallback: !isHydrating,
    isHydrating,
    isUnmounted: false,
    effects: [],
    resolve(resume = false, sync = false) {
      if (false) {}
      const {
        vnode: vnode2,
        activeBranch,
        pendingBranch,
        pendingId,
        effects,
        parentComponent: parentComponent2,
        container: container2
      } = suspense;
      let delayEnter = false;
      if (suspense.isHydrating) {
        suspense.isHydrating = false;
      } else if (!resume) {
        delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
        if (delayEnter) {
          activeBranch.transition.afterLeave = () => {
            if (pendingId === suspense.pendingId) {
              move(
                pendingBranch,
                container2,
                anchor === initialAnchor ? next(activeBranch) : anchor,
                0
              );
              queuePostFlushCb(effects);
            }
          };
        }
        if (activeBranch) {
          if (parentNode(activeBranch.el) !== suspense.hiddenContainer) {
            anchor = next(activeBranch);
          }
          unmount(activeBranch, parentComponent2, suspense, true);
        }
        if (!delayEnter) {
          move(pendingBranch, container2, anchor, 0);
        }
      }
      setActiveBranch(suspense, pendingBranch);
      suspense.pendingBranch = null;
      suspense.isInFallback = false;
      let parent = suspense.parent;
      let hasUnresolvedAncestor = false;
      while (parent) {
        if (parent.pendingBranch) {
          parent.effects.push(...effects);
          hasUnresolvedAncestor = true;
          break;
        }
        parent = parent.parent;
      }
      if (!hasUnresolvedAncestor && !delayEnter) {
        queuePostFlushCb(effects);
      }
      suspense.effects = [];
      if (isSuspensible) {
        if (parentSuspense && parentSuspense.pendingBranch && parentSuspenseId === parentSuspense.pendingId) {
          parentSuspense.deps--;
          if (parentSuspense.deps === 0 && !sync) {
            parentSuspense.resolve();
          }
        }
      }
      triggerEvent(vnode2, "onResolve");
    },
    fallback(fallbackVNode) {
      if (!suspense.pendingBranch) {
        return;
      }
      const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, namespace: namespace2 } = suspense;
      triggerEvent(vnode2, "onFallback");
      const anchor2 = next(activeBranch);
      const mountFallback = () => {
        if (!suspense.isInFallback) {
          return;
        }
        patch(
          null,
          fallbackVNode,
          container2,
          anchor2,
          parentComponent2,
          null,
          // fallback tree will not have suspense context
          namespace2,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, fallbackVNode);
      };
      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
      if (delayEnter) {
        activeBranch.transition.afterLeave = mountFallback;
      }
      suspense.isInFallback = true;
      unmount(
        activeBranch,
        parentComponent2,
        null,
        // no suspense so unmount hooks fire now
        true
        // shouldRemove
      );
      if (!delayEnter) {
        mountFallback();
      }
    },
    move(container2, anchor2, type) {
      suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
      suspense.container = container2;
    },
    next() {
      return suspense.activeBranch && next(suspense.activeBranch);
    },
    registerDep(instance, setupRenderEffect, optimized2) {
      const isInPendingSuspense = !!suspense.pendingBranch;
      if (isInPendingSuspense) {
        suspense.deps++;
      }
      const hydratedEl = instance.vnode.el;
      instance.asyncDep.catch((err) => {
        handleError(err, instance, 0);
      }).then((asyncSetupResult) => {
        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
          return;
        }
        instance.asyncResolved = true;
        const { vnode: vnode2 } = instance;
        if (false) {}
        handleSetupResult(instance, asyncSetupResult, false);
        if (hydratedEl) {
          vnode2.el = hydratedEl;
        }
        const placeholder = !hydratedEl && instance.subTree.el;
        setupRenderEffect(
          instance,
          vnode2,
          // component may have been moved before resolve.
          // if this is not a hydration, instance.subTree will be the comment
          // placeholder.
          parentNode(hydratedEl || instance.subTree.el),
          // anchor will not be used if this is hydration, so only need to
          // consider the comment placeholder case.
          hydratedEl ? null : next(instance.subTree),
          suspense,
          namespace,
          optimized2
        );
        if (placeholder) {
          remove(placeholder);
        }
        updateHOCHostEl(instance, vnode2.el);
        if (false) {}
        if (isInPendingSuspense && --suspense.deps === 0) {
          suspense.resolve();
        }
      });
    },
    unmount(parentSuspense2, doRemove) {
      suspense.isUnmounted = true;
      if (suspense.activeBranch) {
        unmount(
          suspense.activeBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
      if (suspense.pendingBranch) {
        unmount(
          suspense.pendingBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
    }
  };
  return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals, hydrateNode) {
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    node.parentNode,
    // eslint-disable-next-line no-restricted-globals
    document.createElement("div"),
    null,
    namespace,
    slotScopeIds,
    optimized,
    rendererInternals,
    true
  );
  const result = hydrateNode(
    node,
    suspense.pendingBranch = vnode.ssContent,
    parentComponent,
    suspense,
    slotScopeIds,
    optimized
  );
  if (suspense.deps === 0) {
    suspense.resolve(false, true);
  }
  return result;
}
function normalizeSuspenseChildren(vnode) {
  const { shapeFlag, children } = vnode;
  const isSlotChildren = shapeFlag & 32;
  vnode.ssContent = normalizeSuspenseSlot(
    isSlotChildren ? children.default : children
  );
  vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
  let block;
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(s)) {
    const trackBlock = isBlockTreeEnabled && s._c;
    if (trackBlock) {
      s._d = false;
      openBlock();
    }
    s = s();
    if (trackBlock) {
      s._d = true;
      block = currentBlock;
      closeBlock();
    }
  }
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(s)) {
    const singleChild = filterSingleRoot(s);
    if (false) {}
    s = singleChild;
  }
  s = normalizeVNode(s);
  if (block && !s.dynamicChildren) {
    s.dynamicChildren = block.filter((c) => c !== s);
  }
  return s;
}
function queueEffectWithSuspense(fn, suspense) {
  if (suspense && suspense.pendingBranch) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(fn)) {
      suspense.effects.push(...fn);
    } else {
      suspense.effects.push(fn);
    }
  } else {
    queuePostFlushCb(fn);
  }
}
function setActiveBranch(suspense, branch) {
  suspense.activeBranch = branch;
  const { vnode, parentComponent } = suspense;
  let el = branch.el;
  while (!el && branch.component) {
    branch = branch.component.subTree;
    el = branch.el;
  }
  vnode.el = el;
  if (parentComponent && parentComponent.subTree === vnode) {
    parentComponent.vnode.el = el;
    updateHOCHostEl(parentComponent, el);
  }
}
function isVNodeSuspensible(vnode) {
  const suspensible = vnode.props && vnode.props.suspensible;
  return suspensible != null && suspensible !== false;
}

const Fragment = Symbol.for("v-fgt");
const Text = Symbol.for("v-txt");
const Comment = Symbol.for("v-cmt");
const Static = Symbol.for("v-stc");
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value) {
  isBlockTreeEnabled += value;
  if (value < 0 && currentBlock) {
    currentBlock.hasOnce = true;
  }
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_ARR */ .Oj : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(
    createBaseVNode(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      shapeFlag,
      true
    )
  );
}
function createBlock(type, props, children, patchFlag, dynamicProps) {
  return setupBlock(
    createVNode(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      true
    )
  );
}
function isVNode(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  if (false) {}
  return n1.type === n2.type && n1.key === n2.key;
}
let vnodeArgsTransformer;
function transformVNodeArgs(transformer) {
  vnodeArgsTransformer = transformer;
}
const createVNodeWithArgsTransform = (...args) => {
  return _createVNode(
    ...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args
  );
};
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({
  ref,
  ref_key,
  ref_for
}) => {
  if (typeof ref === "number") {
    ref = "" + ref;
  }
  return ref != null ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(ref) || (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isRef */ .i9)(ref) || (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(ref) ? { i: currentRenderingInstance, r: ref, k: ref_key, f: !!ref_for } : ref : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetStart: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(children) ? 8 : 16;
  }
  if (false) {}
  if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode =  false ? 0 : _createVNode;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    if (false) {}
    type = Comment;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(
      type,
      props,
      true
      /* mergeRef: true */
    );
    if (children) {
      normalizeChildren(cloned, children);
    }
    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
      if (cloned.shapeFlag & 6) {
        currentBlock[currentBlock.indexOf(type)] = cloned;
      } else {
        currentBlock.push(cloned);
      }
    }
    cloned.patchFlag = -2;
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style } = props;
    if (klass && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(klass)) {
      props.class = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .normalizeClass */ .C4)(klass);
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(style)) {
      if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isProxy */ .ju)(style) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(style)) {
        style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)({}, style);
      }
      props.style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .normalizeStyle */ .Tr)(style);
    }
  }
  const shapeFlag = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(type) ? 4 : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(type) ? 2 : 0;
  if (false) {}
  return createBaseVNode(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    isBlockNode,
    true
  );
}
function guardReactiveProps(props) {
  if (!props) return null;
  return (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .isProxy */ .ju)(props) || isInternalObject(props) ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false, cloneTransition = false) {
  const { props, ref, patchFlag, children, transition } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(ref) ? ref.concat(normalizeRef(extraProps)) : [ref, normalizeRef(extraProps)] : normalizeRef(extraProps)
    ) : ref,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children:  false ? 0 : children,
    target: vnode.target,
    targetStart: vnode.targetStart,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  if (transition && cloneTransition) {
    setTransitionHooks(
      cloned,
      transition.clone(cloned)
    );
  }
  return cloned;
}
function deepCloneVNode(vnode) {
  const cloned = cloneVNode(vnode);
  if (isArray(vnode.children)) {
    cloned.children = vnode.children.map(deepCloneVNode);
  }
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode(Static, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode(text = "", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment);
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(child)) {
    return createVNode(
      Fragment,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !isInternalObject(children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i = 0; i < args.length; i++) {
    const toMerge = args[i];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .normalizeClass */ .C4)([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .normalizeStyle */ .Tr)([ret.style, toMerge.style]);
      } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isOn */ .Mp)(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}

const emptyAppContext = createAppContext();
let uid = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    // to be immediately set
    next: null,
    subTree: null,
    // will be set synchronously right after creation
    effect: null,
    update: null,
    // will be set synchronously right after creation
    scope: new _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .EffectScope */ .yC(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    // emit
    emit: null,
    // to be set immediately
    emitted: null,
    // props default value
    propsDefaults: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ,
    // inheritAttrs
    inheritAttrs: type.inheritAttrs,
    // state
    ctx: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ,
    data: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ,
    props: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ,
    attrs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ,
    slots: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ,
    refs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ,
    setupState: _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY_OBJ */ .MZ,
    setupContext: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  if (false) {} else {
    instance.ctx = { _: instance };
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
let internalSetCurrentInstance;
let setInSSRSetupState;
{
  const g = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .getGlobalThis */ .We)();
  const registerGlobalSetter = (key, setter) => {
    let setters;
    if (!(setters = g[key])) setters = g[key] = [];
    setters.push(setter);
    return (v) => {
      if (setters.length > 1) setters.forEach((set) => set(v));
      else setters[0](v);
    };
  };
  internalSetCurrentInstance = registerGlobalSetter(
    `__VUE_INSTANCE_SETTERS__`,
    (v) => currentInstance = v
  );
  setInSSRSetupState = registerGlobalSetter(
    `__VUE_SSR_SETTERS__`,
    (v) => isInSSRComponentSetup = v
  );
}
const setCurrentInstance = (instance) => {
  const prev = currentInstance;
  internalSetCurrentInstance(instance);
  instance.scope.on();
  return () => {
    instance.scope.off();
    internalSetCurrentInstance(prev);
  };
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  internalSetCurrentInstance(null);
};
const isBuiltInTag = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap("slot,component")));
function validateComponentName(name, { isNativeTag }) {
  if (isBuiltInTag(name) || isNativeTag(name)) {
    warn$1(
      "Do not use built-in or reserved HTML elements as component id: " + name
    );
  }
}
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false, optimized = false) {
  isSSR && setInSSRSetupState(isSSR);
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children, optimized);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isSSR && setInSSRSetupState(false);
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  var _a;
  const Component = instance.type;
  if (false) {}
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
  if (false) {}
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    const reset = setCurrentInstance(instance);
    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .C4)();
    const setupResult = callWithErrorHandling(
      setup,
      instance,
      0,
      [
         false ? 0 : instance.props,
        setupContext
      ]
    );
    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .bl)();
    reset();
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isPromise */ .yL)(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e) => {
          handleError(e, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
        if (false) {}
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(setupResult)) {
    if (false) {}
    if (true) {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .proxyRefs */ .Pr)(setupResult);
    if (false) {}
  } else if (false) {}
  finishComponentSetup(instance, isSSR);
}
let compile;
let installWithProxy;
function registerRuntimeCompiler(_compile) {
  compile = _compile;
  installWithProxy = (i) => {
    if (i.render._rc) {
      i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    }
  };
}
const isRuntimeOnly = () => !compile;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile && !Component.render) {
      const template = Component.template || resolveMergedOptions(instance).template;
      if (template) {
        if (false) {}
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(
          (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(
            {
              isCustomElement,
              delimiters
            },
            compilerOptions
          ),
          componentCompilerOptions
        );
        Component.render = compile(template, finalCompilerOptions);
        if (false) {}
      }
    }
    instance.render = Component.render || _vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .NOOP */ .tE;
    if (installWithProxy) {
      installWithProxy(instance);
    }
  }
  if (true) {
    const reset = setCurrentInstance(instance);
    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .pauseTracking */ .C4)();
    try {
      applyOptions(instance);
    } finally {
      (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .resetTracking */ .bl)();
      reset();
    }
  }
  if (false) {}
}
const attrsProxyHandlers =  false ? 0 : {
  get(target, key) {
    (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .track */ .u4)(target, "get", "");
    return target[key];
  }
};
function getSlotsProxy(instance) {
  return new Proxy(instance.slots, {
    get(target, key) {
      track(instance, "get", "$slots");
      return target[key];
    }
  });
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    if (false) {}
    instance.exposed = exposed || {};
  };
  if (false) {} else {
    return {
      attrs: new Proxy(instance.attrs, attrsProxyHandlers),
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function getComponentPublicInstance(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .proxyRefs */ .Pr)((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .markRaw */ .IG)(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap;
      }
    }));
  } else {
    return instance.proxy;
  }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component, includeInferred = true) {
  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName(instance, Component, isRoot = false) {
  let name = getComponentName(Component);
  if (!name && Component.__file) {
    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(
      instance.components || instance.parent.type.components
    ) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(value) && "__vccOpts" in value;
}

const computed = (getterOrOptions, debugOptions) => {
  const c = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(getterOrOptions, debugOptions, isInSSRComponentSetup);
  if (false) {}
  return c;
};

function h(type, propsOrChildren, children) {
  const l = arguments.length;
  if (l === 2) {
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(propsOrChildren) && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}

function initCustomFormatter() {
  if (true) {
    return;
  }
  const vueStyle = { style: "color:#3ba776" };
  const numberStyle = { style: "color:#1677ff" };
  const stringStyle = { style: "color:#f5222d" };
  const keywordStyle = { style: "color:#eb2f96" };
  const formatter = {
    __vue_custom_formatter: true,
    header(obj) {
      if (!isObject(obj)) {
        return null;
      }
      if (obj.__isVue) {
        return ["div", vueStyle, `VueInstance`];
      } else if (isRef(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, genRefFlag(obj)],
          "<",
          formatValue(obj.value),
          `>`
        ];
      } else if (isReactive(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow(obj) ? "ShallowReactive" : "Reactive"],
          "<",
          formatValue(obj),
          `>${isReadonly(obj) ? ` (readonly)` : ``}`
        ];
      } else if (isReadonly(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow(obj) ? "ShallowReadonly" : "Readonly"],
          "<",
          formatValue(obj),
          ">"
        ];
      }
      return null;
    },
    hasBody(obj) {
      return obj && obj.__isVue;
    },
    body(obj) {
      if (obj && obj.__isVue) {
        return [
          "div",
          {},
          ...formatInstance(obj.$)
        ];
      }
    }
  };
  function formatInstance(instance) {
    const blocks = [];
    if (instance.type.props && instance.props) {
      blocks.push(createInstanceBlock("props", toRaw(instance.props)));
    }
    if (instance.setupState !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("setup", instance.setupState));
    }
    if (instance.data !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("data", toRaw(instance.data)));
    }
    const computed = extractKeys(instance, "computed");
    if (computed) {
      blocks.push(createInstanceBlock("computed", computed));
    }
    const injected = extractKeys(instance, "inject");
    if (injected) {
      blocks.push(createInstanceBlock("injected", injected));
    }
    blocks.push([
      "div",
      {},
      [
        "span",
        {
          style: keywordStyle.style + ";opacity:0.66"
        },
        "$ (internal): "
      ],
      ["object", { object: instance }]
    ]);
    return blocks;
  }
  function createInstanceBlock(type, target) {
    target = extend({}, target);
    if (!Object.keys(target).length) {
      return ["span", {}];
    }
    return [
      "div",
      { style: "line-height:1.25em;margin-bottom:0.6em" },
      [
        "div",
        {
          style: "color:#476582"
        },
        type
      ],
      [
        "div",
        {
          style: "padding-left:1.25em"
        },
        ...Object.keys(target).map((key) => {
          return [
            "div",
            {},
            ["span", keywordStyle, key + ": "],
            formatValue(target[key], false)
          ];
        })
      ]
    ];
  }
  function formatValue(v, asRaw = true) {
    if (typeof v === "number") {
      return ["span", numberStyle, v];
    } else if (typeof v === "string") {
      return ["span", stringStyle, JSON.stringify(v)];
    } else if (typeof v === "boolean") {
      return ["span", keywordStyle, v];
    } else if (isObject(v)) {
      return ["object", { object: asRaw ? toRaw(v) : v }];
    } else {
      return ["span", stringStyle, String(v)];
    }
  }
  function extractKeys(instance, type) {
    const Comp = instance.type;
    if (isFunction(Comp)) {
      return;
    }
    const extracted = {};
    for (const key in instance.ctx) {
      if (isKeyOfType(Comp, key, type)) {
        extracted[key] = instance.ctx[key];
      }
    }
    return extracted;
  }
  function isKeyOfType(Comp, key, type) {
    const opts = Comp[type];
    if (isArray(opts) && opts.includes(key) || isObject(opts) && key in opts) {
      return true;
    }
    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
      return true;
    }
    if (Comp.mixins && Comp.mixins.some((m) => isKeyOfType(m, key, type))) {
      return true;
    }
  }
  function genRefFlag(v) {
    if (isShallow(v)) {
      return `ShallowRef`;
    }
    if (v.effect) {
      return `ComputedRef`;
    }
    return `Ref`;
  }
  if (window.devtoolsFormatters) {
    window.devtoolsFormatters.push(formatter);
  } else {
    window.devtoolsFormatters = [formatter];
  }
}

function withMemo(memo, render, cache, index) {
  const cached = cache[index];
  if (cached && isMemoSame(cached, memo)) {
    return cached;
  }
  const ret = render();
  ret.memo = memo.slice();
  ret.cacheIndex = index;
  return cache[index] = ret;
}
function isMemoSame(cached, memo) {
  const prev = cached.memo;
  if (prev.length != memo.length) {
    return false;
  }
  for (let i = 0; i < prev.length; i++) {
    if (hasChanged(prev[i], memo[i])) {
      return false;
    }
  }
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(cached);
  }
  return true;
}

const version = "3.4.33";
const warn = (/* unused pure expression or super */ null && ( false ? 0 : NOOP));
const ErrorTypeStrings = (/* unused pure expression or super */ null && (ErrorTypeStrings$1)) ;
const devtools =  true ? devtools$1 : 0;
const setDevtoolsHook = (/* unused pure expression or super */ null && ( true ? setDevtoolsHook$1 : 0));
const _ssrUtils = {
  createComponentInstance,
  setupComponent,
  renderComponentRoot,
  setCurrentRenderingInstance,
  isVNode: isVNode,
  normalizeVNode,
  getComponentPublicInstance
};
const ssrUtils = (/* unused pure expression or super */ null && (_ssrUtils)) ;
const resolveFilter = null;
const compatUtils = null;
const DeprecationTypes = null;




/***/ }),

/***/ 9104:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ef: () => (/* binding */ createApp),
/* harmony export */   F: () => (/* binding */ TransitionGroup),
/* harmony export */   aG: () => (/* binding */ vShow),
/* harmony export */   eB: () => (/* binding */ Transition)
/* harmony export */ });
/* unused harmony exports VueElement, createSSRApp, defineCustomElement, defineSSRCustomElement, hydrate, initDirectivesForSSR, render, useCssModule, useCssVars, vModelCheckbox, vModelDynamic, vModelRadio, vModelSelect, vModelText, withKeys, withModifiers */
/* harmony import */ var _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1758);
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8790);
/* harmony import */ var _vue_runtime_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8734);
/**
* @vue/runtime-dom v3.4.33
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/




const svgNS = "http://www.w3.org/2000/svg";
const mathmlNS = "http://www.w3.org/1998/Math/MathML";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, namespace, is, props) => {
    const el = namespace === "svg" ? doc.createElementNS(svgNS, tag) : namespace === "mathml" ? doc.createElementNS(mathmlNS, tag) : is ? doc.createElement(tag, { is }) : doc.createElement(tag);
    if (tag === "select" && props && props.multiple != null) {
      el.setAttribute("multiple", props.multiple);
    }
    return el;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id) {
    el.setAttribute(id, "");
  },
  // __UNSAFE__
  // Reason: innerHTML.
  // Static content here can only come from compiled templates.
  // As long as the user only uses trusted templates, this is safe.
  insertStaticContent(content, parent, anchor, namespace, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling)) break;
      }
    } else {
      templateContainer.innerHTML = namespace === "svg" ? `<svg>${content}</svg>` : namespace === "mathml" ? `<math>${content}</math>` : content;
      const template = templateContainer.content;
      if (namespace === "svg" || namespace === "mathml") {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      // first
      before ? before.nextSibling : parent.firstChild,
      // last
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};

const TRANSITION = "transition";
const ANIMATION = "animation";
const vtcKey = Symbol("_vtc");
const Transition = (props, { slots }) => (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__.h)(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .BaseTransition */ .pR, resolveTransitionProps(props), slots);
Transition.displayName = "Transition";
const DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators = Transition.props = /* @__PURE__ */ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(
  {},
  _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .BaseTransitionPropsValidators */ .QP,
  DOMTransitionPropsValidators
);
const callHook = (hook, args = []) => {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback = (hook) => {
  return hook ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const {
    name = "v",
    type,
    duration,
    enterFromClass = `${name}-enter-from`,
    enterActiveClass = `${name}-enter-active`,
    enterToClass = `${name}-enter-to`,
    appearFromClass = enterFromClass,
    appearActiveClass = enterActiveClass,
    appearToClass = enterToClass,
    leaveFromClass = `${name}-leave-from`,
    leaveActiveClass = `${name}-leave-active`,
    leaveToClass = `${name}-leave-to`
  } = rawProps;
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const {
    onBeforeEnter,
    onEnter,
    onEnterCancelled,
    onLeave,
    onLeaveCancelled,
    onBeforeAppear = onBeforeEnter,
    onAppear = onEnter,
    onAppearCancelled = onEnterCancelled
  } = baseProps;
  const finishEnter = (el, isAppear, done) => {
    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el, done) => {
    el._isLeaving = false;
    removeTransitionClass(el, leaveFromClass);
    removeTransitionClass(el, leaveToClass);
    removeTransitionClass(el, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve = () => finishEnter(el, isAppear, done);
      callHook(hook, [el, resolve]);
      nextFrame(() => {
        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el, type, enterDuration, resolve);
        }
      });
    };
  };
  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)(baseProps, {
    onBeforeEnter(el) {
      callHook(onBeforeEnter, [el]);
      addTransitionClass(el, enterFromClass);
      addTransitionClass(el, enterActiveClass);
    },
    onBeforeAppear(el) {
      callHook(onBeforeAppear, [el]);
      addTransitionClass(el, appearFromClass);
      addTransitionClass(el, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el, done) {
      el._isLeaving = true;
      const resolve = () => finishLeave(el, done);
      addTransitionClass(el, leaveFromClass);
      addTransitionClass(el, leaveActiveClass);
      forceReflow();
      nextFrame(() => {
        if (!el._isLeaving) {
          return;
        }
        removeTransitionClass(el, leaveFromClass);
        addTransitionClass(el, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el, type, leaveDuration, resolve);
        }
      });
      callHook(onLeave, [el, resolve]);
    },
    onEnterCancelled(el) {
      finishEnter(el, false);
      callHook(onEnterCancelled, [el]);
    },
    onAppearCancelled(el) {
      finishEnter(el, true);
      callHook(onAppearCancelled, [el]);
    },
    onLeaveCancelled(el) {
      finishLeave(el);
      callHook(onLeaveCancelled, [el]);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isObject */ .Gv)(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n = NumberOf(duration);
    return [n, n];
  }
}
function NumberOf(val) {
  const res = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toNumber */ .Ro)(val);
  if (false) {}
  return res;
}
function addTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
  (el[vtcKey] || (el[vtcKey] = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
  const _vtc = el[vtcKey];
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el[vtcKey] = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {
  const id = el._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id === el._endId) {
      resolve();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
  if (!type) {
    return resolve();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end = () => {
    el.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e) => {
    if (e.target === el && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(`${TRANSITION}Delay`);
  const transitionDurations = getStyleProperties(`${TRANSITION}Duration`);
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
  const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(
    getStyleProperties(`${TRANSITION}Property`).toString()
  );
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
}
function toMs(s) {
  if (s === "auto") return 0;
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}

function patchClass(el, value, isSVG) {
  const transitionClasses = el[vtcKey];
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el.removeAttribute("class");
  } else if (isSVG) {
    el.setAttribute("class", value);
  } else {
    el.className = value;
  }
}

const vShowOriginalDisplay = Symbol("_vod");
const vShowHidden = Symbol("_vsh");
const vShow = {
  beforeMount(el, { value }, { transition }) {
    el[vShowOriginalDisplay] = el.style.display === "none" ? "" : el.style.display;
    if (transition && value) {
      transition.beforeEnter(el);
    } else {
      setDisplay(el, value);
    }
  },
  mounted(el, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el);
    }
  },
  updated(el, { value, oldValue }, { transition }) {
    if (!value === !oldValue) return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el);
        setDisplay(el, true);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
          setDisplay(el, false);
        });
      }
    } else {
      setDisplay(el, value);
    }
  },
  beforeUnmount(el, { value }) {
    setDisplay(el, value);
  }
};
if (false) {}
function setDisplay(el, value) {
  el.style.display = value ? el[vShowOriginalDisplay] : "none";
  el[vShowHidden] = !value;
}
function initVShowForSSR() {
  vShow.getSSRProps = ({ value }) => {
    if (!value) {
      return { style: { display: "none" } };
    }
  };
}

const CSS_VAR_TEXT = Symbol( false ? 0 : "");
function useCssVars(getter) {
  const instance = getCurrentInstance();
  if (!instance) {
     false && 0;
    return;
  }
  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
    Array.from(
      document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)
    ).forEach((node) => setVarsOnNode(node, vars));
  };
  if (false) {}
  const setVars = () => {
    const vars = getter(instance.proxy);
    setVarsOnVNode(instance.subTree, vars);
    updateTeleports(vars);
  };
  onMounted(() => {
    watchPostEffect(setVars);
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted(() => ob.disconnect());
  });
}
function setVarsOnVNode(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode(vnode.el, vars);
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c) => setVarsOnVNode(c, vars));
  } else if (vnode.type === Static) {
    let { el, anchor } = vnode;
    while (el) {
      setVarsOnNode(el, vars);
      if (el === anchor) break;
      el = el.nextSibling;
    }
  }
}
function setVarsOnNode(el, vars) {
  if (el.nodeType === 1) {
    const style = el.style;
    let cssText = "";
    for (const key in vars) {
      style.setProperty(`--${key}`, vars[key]);
      cssText += `--${key}: ${vars[key]};`;
    }
    style[CSS_VAR_TEXT] = cssText;
  }
}

const displayRE = /(^|;)\s*display\s*:/;
function patchStyle(el, prev, next) {
  const style = el.style;
  const isCssString = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(next);
  let hasControlledDisplay = false;
  if (next && !isCssString) {
    if (prev) {
      if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(prev)) {
        for (const key in prev) {
          if (next[key] == null) {
            setStyle(style, key, "");
          }
        }
      } else {
        for (const prevStyle of prev.split(";")) {
          const key = prevStyle.slice(0, prevStyle.indexOf(":")).trim();
          if (next[key] == null) {
            setStyle(style, key, "");
          }
        }
      }
    }
    for (const key in next) {
      if (key === "display") {
        hasControlledDisplay = true;
      }
      setStyle(style, key, next[key]);
    }
  } else {
    if (isCssString) {
      if (prev !== next) {
        const cssVarText = style[CSS_VAR_TEXT];
        if (cssVarText) {
          next += ";" + cssVarText;
        }
        style.cssText = next;
        hasControlledDisplay = displayRE.test(next);
      }
    } else if (prev) {
      el.removeAttribute("style");
    }
  }
  if (vShowOriginalDisplay in el) {
    el[vShowOriginalDisplay] = hasControlledDisplay ? style.display : "";
    if (el[vShowHidden]) {
      style.display = "none";
    }
  }
}
const semicolonRE = /[^\\];\s*$/;
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(val)) {
    val.forEach((v) => setStyle(style, name, v));
  } else {
    if (val == null) val = "";
    if (false) {}
    if (name.startsWith("--")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(
          (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(prefixed),
          val.replace(importantRE, ""),
          "important"
        );
      } else {
        style[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(rawName);
  if (name !== "filter" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .capitalize */ .ZH)(name);
  for (let i = 0; i < prefixes.length; i++) {
    const prefixed = prefixes[i] + name;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}

const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key, value, isSVG, instance, isBoolean = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isSpecialBooleanAttr */ .J$)(key)) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (value == null || isBoolean && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .includeBooleanAttr */ .Y2)(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(
        key,
        isBoolean ? "" : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isSymbol */ .Bm)(value) ? String(value) : value
      );
    }
  }
}

function patchDOMProp(el, key, value, parentComponent) {
  if (key === "innerHTML" || key === "textContent") {
    if (value == null) return;
    el[key] = value;
    return;
  }
  const tag = el.tagName;
  if (key === "value" && tag !== "PROGRESS" && // custom elements may use _value internally
  !tag.includes("-")) {
    const oldValue = tag === "OPTION" ? el.getAttribute("value") || "" : el.value;
    const newValue = value == null ? "" : String(value);
    if (oldValue !== newValue || !("_value" in el)) {
      el.value = newValue;
    }
    if (value == null) {
      el.removeAttribute(key);
    }
    el._value = value;
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el[key];
    if (type === "boolean") {
      value = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .includeBooleanAttr */ .Y2)(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el[key] = value;
  } catch (e) {
    if (false) {}
  }
  needRemove && el.removeAttribute(key);
}

function addEventListener(el, event, handler, options) {
  el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
  el.removeEventListener(event, handler, options);
}
const veiKey = Symbol("_vei");
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el[veiKey] || (el[veiKey] = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value =  false ? 0 : nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(
         false ? 0 : nextValue,
        instance
      );
      addEventListener(el, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m;
    while (m = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m[0].length);
      options[m[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(name.slice(2));
  return [event, options];
}
let cachedNow = 0;
const p = /* @__PURE__ */ Promise.resolve();
const getNow = () => cachedNow || (p.then(() => cachedNow = 0), cachedNow = Date.now());
function createInvoker(initialValue, instance) {
  const invoker = (e) => {
    if (!e._vts) {
      e._vts = Date.now();
    } else if (e._vts <= invoker.attached) {
      return;
    }
    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .callWithAsyncErrorHandling */ .qL)(
      patchStopImmediatePropagation(e, invoker.value),
      instance,
      5,
      [e]
    );
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function sanitizeEventValue(value, propName) {
  if (isFunction(value) || isArray(value)) {
    return value;
  }
  warn(
    `Wrong type passed as event handler to ${propName} - did you forget @ or : in front of your prop?
Expected function or array of functions, received type ${typeof value}.`
  );
  return NOOP;
}
function patchStopImmediatePropagation(e, value) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(value)) {
    const originalStop = e.stopImmediatePropagation;
    e.stopImmediatePropagation = () => {
      originalStop.call(e);
      e._stopped = true;
    };
    return value.map(
      (fn) => (e2) => !e2._stopped && fn && fn(e2)
    );
  } else {
    return value;
  }
}

const isNativeOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // lowercase letter
key.charCodeAt(2) > 96 && key.charCodeAt(2) < 123;
const patchProp = (el, key, prevValue, nextValue, namespace, parentComponent) => {
  const isSVG = namespace === "svg";
  if (key === "class") {
    patchClass(el, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el, prevValue, nextValue);
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isOn */ .Mp)(key)) {
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isModelListener */ .CP)(key)) {
      patchEvent(el, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
    patchDOMProp(el, key, nextValue);
    if (!el.tagName.includes("-") && (key === "value" || key === "checked" || key === "selected")) {
      patchAttr(el, key, nextValue, isSVG, parentComponent, key !== "value");
    }
  } else {
    if (key === "true-value") {
      el._trueValue = nextValue;
    } else if (key === "false-value") {
      el._falseValue = nextValue;
    }
    patchAttr(el, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el && isNativeOn(key) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el.tagName === "TEXTAREA") {
    return false;
  }
  if (key === "width" || key === "height") {
    const tag = el.tagName;
    if (tag === "IMG" || tag === "VIDEO" || tag === "CANVAS" || tag === "SOURCE") {
      return false;
    }
  }
  if (isNativeOn(key) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(value)) {
    return false;
  }
  return key in el;
}

/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineCustomElement(options, extraOptions, hydrate2) {
  const Comp = defineComponent(options, extraOptions);
  class VueCustomElement extends VueElement {
    constructor(initialProps) {
      super(Comp, initialProps, hydrate2);
    }
  }
  VueCustomElement.def = Comp;
  return VueCustomElement;
}
/*! #__NO_SIDE_EFFECTS__ */
const defineSSRCustomElement = /* @__NO_SIDE_EFFECTS__ */ (options, extraOptions) => {
  return /* @__PURE__ */ defineCustomElement(options, extraOptions, hydrate);
};
const BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
};
class VueElement extends BaseClass {
  constructor(_def, _props = {}, hydrate2) {
    super();
    this._def = _def;
    this._props = _props;
    /**
     * @internal
     */
    this._instance = null;
    this._connected = false;
    this._resolved = false;
    this._numberProps = null;
    this._ob = null;
    if (this.shadowRoot && hydrate2) {
      hydrate2(this._createVNode(), this.shadowRoot);
    } else {
      if (false) {}
      this.attachShadow({ mode: "open" });
      if (!this._def.__asyncLoader) {
        this._resolveProps(this._def);
      }
    }
  }
  connectedCallback() {
    this._connected = true;
    if (!this._instance) {
      if (this._resolved) {
        this._update();
      } else {
        this._resolveDef();
      }
    }
  }
  disconnectedCallback() {
    this._connected = false;
    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .nextTick */ .dY)(() => {
      if (!this._connected) {
        if (this._ob) {
          this._ob.disconnect();
          this._ob = null;
        }
        render(null, this.shadowRoot);
        this._instance = null;
      }
    });
  }
  /**
   * resolve inner component definition (handle possible async component)
   */
  _resolveDef() {
    this._resolved = true;
    for (let i = 0; i < this.attributes.length; i++) {
      this._setAttr(this.attributes[i].name);
    }
    this._ob = new MutationObserver((mutations) => {
      for (const m of mutations) {
        this._setAttr(m.attributeName);
      }
    });
    this._ob.observe(this, { attributes: true });
    const resolve = (def, isAsync = false) => {
      const { props, styles } = def;
      let numberProps;
      if (props && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(props)) {
        for (const key in props) {
          const opt = props[key];
          if (opt === Number || opt && opt.type === Number) {
            if (key in this._props) {
              this._props[key] = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toNumber */ .Ro)(this._props[key]);
            }
            (numberProps || (numberProps = /* @__PURE__ */ Object.create(null)))[(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(key)] = true;
          }
        }
      }
      this._numberProps = numberProps;
      if (isAsync) {
        this._resolveProps(def);
      }
      this._applyStyles(styles);
      this._update();
    };
    const asyncDef = this._def.__asyncLoader;
    if (asyncDef) {
      asyncDef().then((def) => resolve(def, true));
    } else {
      resolve(this._def);
    }
  }
  _resolveProps(def) {
    const { props } = def;
    const declaredPropKeys = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(props) ? props : Object.keys(props || {});
    for (const key of Object.keys(this)) {
      if (key[0] !== "_" && declaredPropKeys.includes(key)) {
        this._setProp(key, this[key], true, false);
      }
    }
    for (const key of declaredPropKeys.map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)) {
      Object.defineProperty(this, key, {
        get() {
          return this._getProp(key);
        },
        set(val) {
          this._setProp(key, val);
        }
      });
    }
  }
  _setAttr(key) {
    let value = this.hasAttribute(key) ? this.getAttribute(key) : void 0;
    const camelKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .camelize */ .PT)(key);
    if (this._numberProps && this._numberProps[camelKey]) {
      value = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .toNumber */ .Ro)(value);
    }
    this._setProp(camelKey, value, false);
  }
  /**
   * @internal
   */
  _getProp(key) {
    return this._props[key];
  }
  /**
   * @internal
   */
  _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
    if (val !== this._props[key]) {
      this._props[key] = val;
      if (shouldUpdate && this._instance) {
        this._update();
      }
      if (shouldReflect) {
        if (val === true) {
          this.setAttribute((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(key), "");
        } else if (typeof val === "string" || typeof val === "number") {
          this.setAttribute((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(key), val + "");
        } else if (!val) {
          this.removeAttribute((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(key));
        }
      }
    }
  }
  _update() {
    render(this._createVNode(), this.shadowRoot);
  }
  _createVNode() {
    const vnode = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .createVNode */ .bF)(this._def, (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)({}, this._props));
    if (!this._instance) {
      vnode.ce = (instance) => {
        this._instance = instance;
        instance.isCE = true;
        if (false) {}
        const dispatch = (event, args) => {
          this.dispatchEvent(
            new CustomEvent(event, {
              detail: args
            })
          );
        };
        instance.emit = (event, ...args) => {
          dispatch(event, args);
          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(event) !== event) {
            dispatch((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .hyphenate */ .Tg)(event), args);
          }
        };
        let parent = this;
        while (parent = parent && (parent.parentNode || parent.host)) {
          if (parent instanceof VueElement) {
            instance.parent = parent._instance;
            instance.provides = parent._instance.provides;
            break;
          }
        }
      };
    }
    return vnode;
  }
  _applyStyles(styles) {
    if (styles) {
      styles.forEach((css) => {
        const s = document.createElement("style");
        s.textContent = css;
        this.shadowRoot.appendChild(s);
        if (false) {}
      });
    }
  }
}

function useCssModule(name = "$style") {
  {
    const instance = getCurrentInstance();
    if (!instance) {
       false && 0;
      return EMPTY_OBJ;
    }
    const modules = instance.type.__cssModules;
    if (!modules) {
       false && 0;
      return EMPTY_OBJ;
    }
    const mod = modules[name];
    if (!mod) {
       false && 0;
      return EMPTY_OBJ;
    }
    return mod;
  }
}

const positionMap = /* @__PURE__ */ new WeakMap();
const newPositionMap = /* @__PURE__ */ new WeakMap();
const moveCbKey = Symbol("_moveCb");
const enterCbKey = Symbol("_enterCb");
const TransitionGroupImpl = {
  name: "TransitionGroup",
  props: /* @__PURE__ */ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props, { slots }) {
    const instance = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .getCurrentInstance */ .nI)();
    const state = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .useTransitionState */ .Gy)();
    let prevChildren;
    let children;
    (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .onUpdated */ .$u)(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || `${props.name || "v"}-move`;
      if (!hasCSSTransform(
        prevChildren[0].el,
        instance.vnode.el,
        moveClass
      )) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c) => {
        const el = c.el;
        const style = el.style;
        addTransitionClass(el, moveClass);
        style.transform = style.webkitTransform = style.transitionDuration = "";
        const cb = el[moveCbKey] = (e) => {
          if (e && e.target !== el) {
            return;
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener("transitionend", cb);
            el[moveCbKey] = null;
            removeTransitionClass(el, moveClass);
          }
        };
        el.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_2__/* .toRaw */ .ux)(props);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      let tag = rawProps.tag || _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .Fragment */ .FK;
      prevChildren = [];
      if (children) {
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          if (child.el && child.el instanceof Element) {
            prevChildren.push(child);
            (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .setTransitionHooks */ .MZ)(
              child,
              (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .resolveTransitionHooks */ .OW)(
                child,
                cssTransitionProps,
                state,
                instance
              )
            );
            positionMap.set(
              child,
              child.el.getBoundingClientRect()
            );
          }
        }
      }
      children = slots.default ? (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .getTransitionRawChildren */ .Df)(slots.default()) : [];
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (child.key != null) {
          (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .setTransitionHooks */ .MZ)(
            child,
            (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .resolveTransitionHooks */ .OW)(child, cssTransitionProps, state, instance)
          );
        } else if (false) {}
      }
      return (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .createVNode */ .bF)(tag, null, children);
    };
  }
};
const removeMode = (props) => delete props.mode;
/* @__PURE__ */ removeMode(TransitionGroupImpl.props);
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
  const el = c.el;
  if (el[moveCbKey]) {
    el[moveCbKey]();
  }
  if (el[enterCbKey]) {
    el[enterCbKey]();
  }
}
function recordPosition(c) {
  newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
  const oldPos = positionMap.get(c);
  const newPos = newPositionMap.get(c);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s = c.el.style;
    s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
    s.transitionDuration = "0s";
    return c;
  }
}
function hasCSSTransform(el, root, moveClass) {
  const clone = el.cloneNode();
  const _vtc = el[vtcKey];
  if (_vtc) {
    _vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c) => c && clone.classList.remove(c));
    });
  }
  moveClass.split(/\s+/).forEach((c) => c && clone.classList.add(c));
  clone.style.display = "none";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone);
  const { hasTransform } = getTransitionInfo(clone);
  container.removeChild(clone);
  return hasTransform;
}

const getModelAssigner = (vnode) => {
  const fn = vnode.props["onUpdate:modelValue"] || false;
  return (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(fn) ? (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .invokeArrayFns */ .DY)(fn, value) : fn;
};
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  const target = e.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
const assignKey = Symbol("_assign");
const vModelText = {
  created(el, { modifiers: { lazy, trim, number } }, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    const castToNumber = number || vnode.props && vnode.props.type === "number";
    addEventListener(el, lazy ? "change" : "input", (e) => {
      if (e.target.composing) return;
      let domValue = el.value;
      if (trim) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .looseToNumber */ .bB)(domValue);
      }
      el[assignKey](domValue);
    });
    if (trim) {
      addEventListener(el, "change", () => {
        el.value = el.value.trim();
      });
    }
    if (!lazy) {
      addEventListener(el, "compositionstart", onCompositionStart);
      addEventListener(el, "compositionend", onCompositionEnd);
      addEventListener(el, "change", onCompositionEnd);
    }
  },
  // set value on mounted so it's after min/max for type="range"
  mounted(el, { value }) {
    el.value = value == null ? "" : value;
  },
  beforeUpdate(el, { value, oldValue, modifiers: { lazy, trim, number } }, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    if (el.composing) return;
    const elValue = (number || el.type === "number") && !/^0\d/.test(el.value) ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .looseToNumber */ .bB)(el.value) : el.value;
    const newValue = value == null ? "" : value;
    if (elValue === newValue) {
      return;
    }
    if (document.activeElement === el && el.type !== "range") {
      if (lazy && value === oldValue) {
        return;
      }
      if (trim && el.value.trim() === newValue) {
        return;
      }
    }
    el.value = newValue;
  }
};
const vModelCheckbox = {
  // #4096 array checkboxes need to be deep traversed
  deep: true,
  created(el, _, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    addEventListener(el, "change", () => {
      const modelValue = el._modelValue;
      const elementValue = getValue(el);
      const checked = el.checked;
      const assign = el[assignKey];
      if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(modelValue)) {
        const index = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .looseIndexOf */ .u3)(modelValue, elementValue);
        const found = index !== -1;
        if (checked && !found) {
          assign(modelValue.concat(elementValue));
        } else if (!checked && found) {
          const filtered = [...modelValue];
          filtered.splice(index, 1);
          assign(filtered);
        }
      } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isSet */ .vM)(modelValue)) {
        const cloned = new Set(modelValue);
        if (checked) {
          cloned.add(elementValue);
        } else {
          cloned.delete(elementValue);
        }
        assign(cloned);
      } else {
        assign(getCheckboxValue(el, checked));
      }
    });
  },
  // set initial checked on mount to wait for true-value/false-value
  mounted: setChecked,
  beforeUpdate(el, binding, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    setChecked(el, binding, vnode);
  }
};
function setChecked(el, { value, oldValue }, vnode) {
  el._modelValue = value;
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(value)) {
    el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .looseIndexOf */ .u3)(value, vnode.props.value) > -1;
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isSet */ .vM)(value)) {
    el.checked = value.has(vnode.props.value);
  } else if (value !== oldValue) {
    el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .looseEqual */ .BX)(value, getCheckboxValue(el, true));
  }
}
const vModelRadio = {
  created(el, { value }, vnode) {
    el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .looseEqual */ .BX)(value, vnode.props.value);
    el[assignKey] = getModelAssigner(vnode);
    addEventListener(el, "change", () => {
      el[assignKey](getValue(el));
    });
  },
  beforeUpdate(el, { value, oldValue }, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    if (value !== oldValue) {
      el.checked = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .looseEqual */ .BX)(value, vnode.props.value);
    }
  }
};
const vModelSelect = {
  // <select multiple> value need to be deep traversed
  deep: true,
  created(el, { value, modifiers: { number } }, vnode) {
    const isSetModel = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isSet */ .vM)(value);
    addEventListener(el, "change", () => {
      const selectedVal = Array.prototype.filter.call(el.options, (o) => o.selected).map(
        (o) => number ? (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .looseToNumber */ .bB)(getValue(o)) : getValue(o)
      );
      el[assignKey](
        el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]
      );
      el._assigning = true;
      (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .nextTick */ .dY)(() => {
        el._assigning = false;
      });
    });
    el[assignKey] = getModelAssigner(vnode);
  },
  // set value in mounted & updated because <select> relies on its children
  // <option>s.
  mounted(el, { value, modifiers: { number } }) {
    setSelected(el, value);
  },
  beforeUpdate(el, _binding, vnode) {
    el[assignKey] = getModelAssigner(vnode);
  },
  updated(el, { value, modifiers: { number } }) {
    if (!el._assigning) {
      setSelected(el, value);
    }
  }
};
function setSelected(el, value, number) {
  const isMultiple = el.multiple;
  const isArrayValue = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .cy)(value);
  if (isMultiple && !isArrayValue && !(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isSet */ .vM)(value)) {
     false && 0;
    return;
  }
  for (let i = 0, l = el.options.length; i < l; i++) {
    const option = el.options[i];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArrayValue) {
        const optionType = typeof optionValue;
        if (optionType === "string" || optionType === "number") {
          option.selected = value.some((v) => String(v) === String(optionValue));
        } else {
          option.selected = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .looseIndexOf */ .u3)(value, optionValue) > -1;
        }
      } else {
        option.selected = value.has(optionValue);
      }
    } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .looseEqual */ .BX)(getValue(option), value)) {
      if (el.selectedIndex !== i) el.selectedIndex = i;
      return;
    }
  }
  if (!isMultiple && el.selectedIndex !== -1) {
    el.selectedIndex = -1;
  }
}
function getValue(el) {
  return "_value" in el ? el._value : el.value;
}
function getCheckboxValue(el, checked) {
  const key = checked ? "_trueValue" : "_falseValue";
  return key in el ? el[key] : checked;
}
const vModelDynamic = {
  created(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, "created");
  },
  mounted(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, "mounted");
  },
  beforeUpdate(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
  },
  updated(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, "updated");
  }
};
function resolveDynamicModel(tagName, type) {
  switch (tagName) {
    case "SELECT":
      return vModelSelect;
    case "TEXTAREA":
      return vModelText;
    default:
      switch (type) {
        case "checkbox":
          return vModelCheckbox;
        case "radio":
          return vModelRadio;
        default:
          return vModelText;
      }
  }
}
function callModelHook(el, binding, vnode, prevVNode, hook) {
  const modelToUse = resolveDynamicModel(
    el.tagName,
    vnode.props && vnode.props.type
  );
  const fn = modelToUse[hook];
  fn && fn(el, binding, vnode, prevVNode);
}
function initVModelForSSR() {
  vModelText.getSSRProps = ({ value }) => ({ value });
  vModelRadio.getSSRProps = ({ value }, vnode) => {
    if (vnode.props && looseEqual(vnode.props.value, value)) {
      return { checked: true };
    }
  };
  vModelCheckbox.getSSRProps = ({ value }, vnode) => {
    if (isArray(value)) {
      if (vnode.props && looseIndexOf(value, vnode.props.value) > -1) {
        return { checked: true };
      }
    } else if (isSet(value)) {
      if (vnode.props && value.has(vnode.props.value)) {
        return { checked: true };
      }
    } else if (value) {
      return { checked: true };
    }
  };
  vModelDynamic.getSSRProps = (binding, vnode) => {
    if (typeof vnode.type !== "string") {
      return;
    }
    const modelToUse = resolveDynamicModel(
      // resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase
      vnode.type.toUpperCase(),
      vnode.props && vnode.props.type
    );
    if (modelToUse.getSSRProps) {
      return modelToUse.getSSRProps(binding, vnode);
    }
  };
}

const systemModifiers = ["ctrl", "shift", "alt", "meta"];
const modifierGuards = {
  stop: (e) => e.stopPropagation(),
  prevent: (e) => e.preventDefault(),
  self: (e) => e.target !== e.currentTarget,
  ctrl: (e) => !e.ctrlKey,
  shift: (e) => !e.shiftKey,
  alt: (e) => !e.altKey,
  meta: (e) => !e.metaKey,
  left: (e) => "button" in e && e.button !== 0,
  middle: (e) => "button" in e && e.button !== 1,
  right: (e) => "button" in e && e.button !== 2,
  exact: (e, modifiers) => systemModifiers.some((m) => e[`${m}Key`] && !modifiers.includes(m))
};
const withModifiers = (fn, modifiers) => {
  const cache = fn._withMods || (fn._withMods = {});
  const cacheKey = modifiers.join(".");
  return cache[cacheKey] || (cache[cacheKey] = (event, ...args) => {
    for (let i = 0; i < modifiers.length; i++) {
      const guard = modifierGuards[modifiers[i]];
      if (guard && guard(event, modifiers)) return;
    }
    return fn(event, ...args);
  });
};
const keyNames = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
const withKeys = (fn, modifiers) => {
  const cache = fn._withKeys || (fn._withKeys = {});
  const cacheKey = modifiers.join(".");
  return cache[cacheKey] || (cache[cacheKey] = (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate(event.key);
    if (modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
      return fn(event);
    }
  });
};

const rendererOptions = /* @__PURE__ */ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .extend */ .X$)({ patchProp }, nodeOps);
let renderer;
let enabledHydration = false;
function ensureRenderer() {
  return renderer || (renderer = (0,_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__/* .createRenderer */ .K9)(rendererOptions));
}
function ensureHydrationRenderer() {
  renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);
  enabledHydration = true;
  return renderer;
}
const render = (...args) => {
  ensureRenderer().render(...args);
};
const hydrate = (...args) => {
  ensureHydrationRenderer().hydrate(...args);
};
const createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  if (false) {}
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container) return;
    const component = app._component;
    if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .Tn)(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, resolveRootNamespace(container));
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
const createSSRApp = (...args) => {
  const app = ensureHydrationRenderer().createApp(...args);
  if (false) {}
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (container) {
      return mount(container, true, resolveRootNamespace(container));
    }
  };
  return app;
};
function resolveRootNamespace(container) {
  if (container instanceof SVGElement) {
    return "svg";
  }
  if (typeof MathMLElement === "function" && container instanceof MathMLElement) {
    return "mathml";
  }
}
function injectNativeTagCheck(app) {
  Object.defineProperty(app.config, "isNativeTag", {
    value: (tag) => isHTMLTag(tag) || isSVGTag(tag) || isMathMLTag(tag),
    writable: false
  });
}
function injectCompilerOptionsCheck(app) {
  if (isRuntimeOnly()) {
    const isCustomElement = app.config.isCustomElement;
    Object.defineProperty(app.config, "isCustomElement", {
      get() {
        return isCustomElement;
      },
      set() {
        warn(
          `The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`
        );
      }
    });
    const compilerOptions = app.config.compilerOptions;
    const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc`;
    Object.defineProperty(app.config, "compilerOptions", {
      get() {
        warn(msg);
        return compilerOptions;
      },
      set() {
        warn(msg);
      }
    });
  }
}
function normalizeContainer(container) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .Kg)(container)) {
    const res = document.querySelector(container);
    if (false) {}
    return res;
  }
  if (false) {}
  return container;
}
let ssrDirectiveInitialized = false;
const initDirectivesForSSR = () => {
  if (!ssrDirectiveInitialized) {
    ssrDirectiveInitialized = true;
    initVModelForSSR();
    initVShowForSSR();
  }
} ;




/***/ }),

/***/ 8790:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $3: () => (/* binding */ hasOwn),
/* harmony export */   $H: () => (/* binding */ hasChanged),
/* harmony export */   BH: () => (/* binding */ isGloballyAllowed),
/* harmony export */   BX: () => (/* binding */ looseEqual),
/* harmony export */   Bm: () => (/* binding */ isSymbol),
/* harmony export */   C4: () => (/* binding */ normalizeClass),
/* harmony export */   CE: () => (/* binding */ isMap),
/* harmony export */   CP: () => (/* binding */ isModelListener),
/* harmony export */   DY: () => (/* binding */ invokeArrayFns),
/* harmony export */   Gv: () => (/* binding */ isObject),
/* harmony export */   J$: () => (/* binding */ isSpecialBooleanAttr),
/* harmony export */   Kg: () => (/* binding */ isString),
/* harmony export */   MZ: () => (/* binding */ EMPTY_OBJ),
/* harmony export */   Mp: () => (/* binding */ isOn),
/* harmony export */   NO: () => (/* binding */ NO),
/* harmony export */   Oj: () => (/* binding */ EMPTY_ARR),
/* harmony export */   PT: () => (/* binding */ camelize),
/* harmony export */   Qd: () => (/* binding */ isPlainObject),
/* harmony export */   Ro: () => (/* binding */ toNumber),
/* harmony export */   SU: () => (/* binding */ isReservedProp),
/* harmony export */   TF: () => (/* binding */ remove),
/* harmony export */   Tg: () => (/* binding */ hyphenate),
/* harmony export */   Tn: () => (/* binding */ isFunction),
/* harmony export */   Tr: () => (/* binding */ normalizeStyle),
/* harmony export */   We: () => (/* binding */ getGlobalThis),
/* harmony export */   X$: () => (/* binding */ extend),
/* harmony export */   Y2: () => (/* binding */ includeBooleanAttr),
/* harmony export */   ZH: () => (/* binding */ capitalize),
/* harmony export */   Zf: () => (/* binding */ toRawType),
/* harmony export */   _B: () => (/* binding */ normalizeProps),
/* harmony export */   bB: () => (/* binding */ looseToNumber),
/* harmony export */   cy: () => (/* binding */ isArray),
/* harmony export */   gd: () => (/* binding */ isRegExp),
/* harmony export */   pD: () => (/* binding */ makeMap),
/* harmony export */   rU: () => (/* binding */ toHandlerKey),
/* harmony export */   tE: () => (/* binding */ NOOP),
/* harmony export */   u3: () => (/* binding */ looseIndexOf),
/* harmony export */   vM: () => (/* binding */ isSet),
/* harmony export */   v_: () => (/* binding */ toDisplayString),
/* harmony export */   yI: () => (/* binding */ isIntegerKey),
/* harmony export */   yL: () => (/* binding */ isPromise),
/* harmony export */   yQ: () => (/* binding */ def)
/* harmony export */ });
/* unused harmony exports PatchFlagNames, PatchFlags, ShapeFlags, SlotFlags, escapeHtml, escapeHtmlComment, genPropsAccessExp, generateCodeFrame, isBooleanAttr, isBuiltInDirective, isDate, isGloballyWhitelisted, isHTMLTag, isKnownHtmlAttr, isKnownSvgAttr, isMathMLTag, isRenderableAttrValue, isSSRSafeAttrName, isSVGTag, isVoidTag, objectToString, parseStringStyle, propsToAttrMap, slotFlagsText, stringifyStyle, toTypeString */
/**
* @vue/shared v3.4.33
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function makeMap(str, expectsLowerCase) {
  const set = new Set(str.split(","));
  return expectsLowerCase ? (val) => set.has(val.toLowerCase()) : (val) => set.has(val);
}

const EMPTY_OBJ =  false ? 0 : {};
const EMPTY_ARR =  false ? 0 : [];
const NOOP = () => {
};
const NO = () => false;
const isOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // uppercase letter
(key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el) => {
  const i = arr.indexOf(el);
  if (i > -1) {
    arr.splice(i, 1);
  }
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty.call(val, key);
const isArray = Array.isArray;
const isMap = (val) => toTypeString(val) === "[object Map]";
const isSet = (val) => toTypeString(val) === "[object Set]";
const isDate = (val) => toTypeString(val) === "[object Date]";
const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
const isFunction = (val) => typeof val === "function";
const isString = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return (isObject(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const isBuiltInDirective = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(
  "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
)));
const cacheStringFunction = (fn) => {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction(
  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
);
const capitalize = cacheStringFunction((str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
const toHandlerKey = cacheStringFunction((str) => {
  const s = str ? `on${capitalize(str)}` : ``;
  return s;
});
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, ...arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](...arg);
  }
};
const def = (obj, key, value, writable = false) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    writable,
    value
  });
};
const looseToNumber = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
const toNumber = (val) => {
  const n = isString(val) ? Number(val) : NaN;
  return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : {});
};
const identRE = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
function genPropsAccessExp(name) {
  return identRE.test(name) ? `__props.${name}` : `__props[${JSON.stringify(name)}]`;
}

const PatchFlags = {
  "TEXT": 1,
  "1": "TEXT",
  "CLASS": 2,
  "2": "CLASS",
  "STYLE": 4,
  "4": "STYLE",
  "PROPS": 8,
  "8": "PROPS",
  "FULL_PROPS": 16,
  "16": "FULL_PROPS",
  "NEED_HYDRATION": 32,
  "32": "NEED_HYDRATION",
  "STABLE_FRAGMENT": 64,
  "64": "STABLE_FRAGMENT",
  "KEYED_FRAGMENT": 128,
  "128": "KEYED_FRAGMENT",
  "UNKEYED_FRAGMENT": 256,
  "256": "UNKEYED_FRAGMENT",
  "NEED_PATCH": 512,
  "512": "NEED_PATCH",
  "DYNAMIC_SLOTS": 1024,
  "1024": "DYNAMIC_SLOTS",
  "DEV_ROOT_FRAGMENT": 2048,
  "2048": "DEV_ROOT_FRAGMENT",
  "HOISTED": -1,
  "-1": "HOISTED",
  "BAIL": -2,
  "-2": "BAIL"
};
const PatchFlagNames = {
  [1]: `TEXT`,
  [2]: `CLASS`,
  [4]: `STYLE`,
  [8]: `PROPS`,
  [16]: `FULL_PROPS`,
  [32]: `NEED_HYDRATION`,
  [64]: `STABLE_FRAGMENT`,
  [128]: `KEYED_FRAGMENT`,
  [256]: `UNKEYED_FRAGMENT`,
  [512]: `NEED_PATCH`,
  [1024]: `DYNAMIC_SLOTS`,
  [2048]: `DEV_ROOT_FRAGMENT`,
  [-1]: `HOISTED`,
  [-2]: `BAIL`
};

const ShapeFlags = {
  "ELEMENT": 1,
  "1": "ELEMENT",
  "FUNCTIONAL_COMPONENT": 2,
  "2": "FUNCTIONAL_COMPONENT",
  "STATEFUL_COMPONENT": 4,
  "4": "STATEFUL_COMPONENT",
  "TEXT_CHILDREN": 8,
  "8": "TEXT_CHILDREN",
  "ARRAY_CHILDREN": 16,
  "16": "ARRAY_CHILDREN",
  "SLOTS_CHILDREN": 32,
  "32": "SLOTS_CHILDREN",
  "TELEPORT": 64,
  "64": "TELEPORT",
  "SUSPENSE": 128,
  "128": "SUSPENSE",
  "COMPONENT_SHOULD_KEEP_ALIVE": 256,
  "256": "COMPONENT_SHOULD_KEEP_ALIVE",
  "COMPONENT_KEPT_ALIVE": 512,
  "512": "COMPONENT_KEPT_ALIVE",
  "COMPONENT": 6,
  "6": "COMPONENT"
};

const SlotFlags = {
  "STABLE": 1,
  "1": "STABLE",
  "DYNAMIC": 2,
  "2": "DYNAMIC",
  "FORWARDED": 3,
  "3": "FORWARDED"
};
const slotFlagsText = {
  [1]: "STABLE",
  [2]: "DYNAMIC",
  [3]: "FORWARDED"
};

const GLOBALS_ALLOWED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error";
const isGloballyAllowed = /* @__PURE__ */ makeMap(GLOBALS_ALLOWED);
const isGloballyWhitelisted = (/* unused pure expression or super */ null && (isGloballyAllowed));

const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
  start = Math.max(0, Math.min(start, source.length));
  end = Math.max(0, Math.min(end, source.length));
  if (start > end) return "";
  let lines = source.split(/(\r?\n)/);
  const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
  lines = lines.filter((_, idx) => idx % 2 === 0);
  let count = 0;
  const res = [];
  for (let i = 0; i < lines.length; i++) {
    count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
    if (count >= start) {
      for (let j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) continue;
        const line = j + 1;
        res.push(
          `${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`
        );
        const lineLength = lines[j].length;
        const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
        if (j === i) {
          const pad = start - (count - (lineLength + newLineSeqLength));
          const length = Math.max(
            1,
            end > count ? lineLength - pad : end - start
          );
          res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
        } else if (j > i) {
          if (end > count) {
            const length = Math.max(Math.min(end - count, lineLength), 1);
            res.push(`   |  ` + "^".repeat(length));
          }
          count += lineLength + newLineSeqLength;
        }
      }
      break;
    }
  }
  return res.join("\n");
}

function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString(value) || isObject(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function stringifyStyle(styles) {
  let ret = "";
  if (!styles || isString(styles)) {
    return ret;
  }
  for (const key in styles) {
    const value = styles[key];
    if (isString(value) || typeof value === "number") {
      const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
      ret += `${normalizedKey}:${value};`;
    }
  }
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString(value)) {
    res = value;
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps(props) {
  if (!props) return null;
  let { class: klass, style } = props;
  if (klass && !isString(klass)) {
    props.class = normalizeClass(klass);
  }
  if (style) {
    props.style = normalizeStyle(style);
  }
  return props;
}

const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const MATH_TAGS = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(HTML_TAGS)));
const isSVGTag = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(SVG_TAGS)));
const isMathMLTag = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(MATH_TAGS)));
const isVoidTag = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(VOID_TAGS)));

const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
const isBooleanAttr = /* @__PURE__ */ makeMap(
  specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`
);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};
function isSSRSafeAttrName(name) {
  if (attrValidationCache.hasOwnProperty(name)) {
    return attrValidationCache[name];
  }
  const isUnsafe = unsafeAttrCharRE.test(name);
  if (isUnsafe) {
    console.error(`unsafe attribute name: ${name}`);
  }
  return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
  acceptCharset: "accept-charset",
  className: "class",
  htmlFor: "for",
  httpEquiv: "http-equiv"
};
const isKnownHtmlAttr = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(
  `accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`
)));
const isKnownSvgAttr = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(
  `xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`
)));
function isRenderableAttrValue(value) {
  if (value == null) {
    return false;
  }
  const type = typeof value;
  return type === "string" || type === "number" || type === "boolean";
}

const escapeRE = /["'&<>]/;
function escapeHtml(string) {
  const str = "" + string;
  const match = escapeRE.exec(str);
  if (!match) {
    return str;
  }
  let html = "";
  let escaped;
  let index;
  let lastIndex = 0;
  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        escaped = "&quot;";
        break;
      case 38:
        escaped = "&amp;";
        break;
      case 39:
        escaped = "&#39;";
        break;
      case 60:
        escaped = "&lt;";
        break;
      case 62:
        escaped = "&gt;";
        break;
      default:
        continue;
    }
    if (lastIndex !== index) {
      html += str.slice(lastIndex, index);
    }
    lastIndex = index + 1;
    html += escaped;
  }
  return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
}
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
  return src.replace(commentStripRE, "");
}

function looseCompareArrays(a, b) {
  if (a.length !== b.length) return false;
  let equal = true;
  for (let i = 0; equal && i < a.length; i++) {
    equal = looseEqual(a[i], b[i]);
  }
  return equal;
}
function looseEqual(a, b) {
  if (a === b) return true;
  let aValidType = isDate(a);
  let bValidType = isDate(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a.getTime() === b.getTime() : false;
  }
  aValidType = isSymbol(a);
  bValidType = isSymbol(b);
  if (aValidType || bValidType) {
    return a === b;
  }
  aValidType = isArray(a);
  bValidType = isArray(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a, b) : false;
  }
  aValidType = isObject(a);
  bValidType = isObject(b);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a).length;
    const bKeysCount = Object.keys(b).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a) {
      const aHasKey = a.hasOwnProperty(key);
      const bHasKey = b.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
        return false;
      }
    }
  }
  return String(a) === String(b);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}

const isRef = (val) => {
  return !!(val && val.__v_isRef === true);
};
const toDisplayString = (val) => {
  return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? isRef(val) ? toDisplayString(val.value) : JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (isRef(val)) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce(
        (entries, [key, val2], i) => {
          entries[stringifySymbol(key, i) + " =>"] = val2;
          return entries;
        },
        {}
      )
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()].map((v) => stringifySymbol(v))
    };
  } else if (isSymbol(val)) {
    return stringifySymbol(val);
  } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
    return String(val);
  }
  return val;
};
const stringifySymbol = (v, i = "") => {
  var _a;
  return (
    // Symbol.description in es2019+ so we need to cast here to pass
    // the lib: es2016 check
    isSymbol(v) ? `Symbol(${(_a = v.description) != null ? _a : i})` : v
  );
};




/***/ }),

/***/ 3194:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { webm, mp4 } = __webpack_require__(2574);

// Detect iOS browsers < version 10
const oldIOS = () =>
  typeof navigator !== "undefined" &&
  parseFloat(
    (
      "" +
      (/CPU.*OS ([0-9_]{3,4})[0-9_]{0,1}|(CPU like).*AppleWebKit.*Mobile/i.exec(
        navigator.userAgent
      ) || [0, ""])[1]
    )
      .replace("undefined", "3_2")
      .replace("_", ".")
      .replace("_", "")
  ) < 10 &&
  !window.MSStream;

// Detect native Wake Lock API support
const nativeWakeLock = () => "wakeLock" in navigator;

class NoSleep {
  constructor() {
    this.enabled = false;
    if (nativeWakeLock()) {
      this._wakeLock = null;
      const handleVisibilityChange = () => {
        if (this._wakeLock !== null && document.visibilityState === "visible") {
          this.enable();
        }
      };
      document.addEventListener("visibilitychange", handleVisibilityChange);
      document.addEventListener("fullscreenchange", handleVisibilityChange);
    } else if (oldIOS()) {
      this.noSleepTimer = null;
    } else {
      // Set up no sleep video element
      this.noSleepVideo = document.createElement("video");

      this.noSleepVideo.setAttribute("title", "No Sleep");
      this.noSleepVideo.setAttribute("playsinline", "");

      this._addSourceToVideo(this.noSleepVideo, "webm", webm);
      this._addSourceToVideo(this.noSleepVideo, "mp4", mp4);

      this.noSleepVideo.addEventListener("loadedmetadata", () => {
        if (this.noSleepVideo.duration <= 1) {
          // webm source
          this.noSleepVideo.setAttribute("loop", "");
        } else {
          // mp4 source
          this.noSleepVideo.addEventListener("timeupdate", () => {
            if (this.noSleepVideo.currentTime > 0.5) {
              this.noSleepVideo.currentTime = Math.random();
            }
          });
        }
      });
    }
  }

  _addSourceToVideo(element, type, dataURI) {
    var source = document.createElement("source");
    source.src = dataURI;
    source.type = `video/${type}`;
    element.appendChild(source);
  }

  get isEnabled() {
    return this.enabled;
  }

  enable() {
    if (nativeWakeLock()) {
      return navigator.wakeLock
        .request("screen")
        .then((wakeLock) => {
          this._wakeLock = wakeLock;
          this.enabled = true;
          console.log("Wake Lock active.");
          this._wakeLock.addEventListener("release", () => {
            // ToDo: Potentially emit an event for the page to observe since
            // Wake Lock releases happen when page visibility changes.
            // (https://web.dev/wakelock/#wake-lock-lifecycle)
            console.log("Wake Lock released.");
          });
        })
        .catch((err) => {
          this.enabled = false;
          console.error(`${err.name}, ${err.message}`);
          throw err;
        });
    } else if (oldIOS()) {
      this.disable();
      console.warn(`
        NoSleep enabled for older iOS devices. This can interrupt
        active or long-running network requests from completing successfully.
        See https://github.com/richtr/NoSleep.js/issues/15 for more details.
      `);
      this.noSleepTimer = window.setInterval(() => {
        if (!document.hidden) {
          window.location.href = window.location.href.split("#")[0];
          window.setTimeout(window.stop, 0);
        }
      }, 15000);
      this.enabled = true;
      return Promise.resolve();
    } else {
      let playPromise = this.noSleepVideo.play();
      return playPromise
        .then((res) => {
          this.enabled = true;
          return res;
        })
        .catch((err) => {
          this.enabled = false;
          throw err;
        });
    }
  }

  disable() {
    if (nativeWakeLock()) {
      if (this._wakeLock) {
        this._wakeLock.release();
      }
      this._wakeLock = null;
    } else if (oldIOS()) {
      if (this.noSleepTimer) {
        console.warn(`
          NoSleep now disabled for older iOS devices.
        `);
        window.clearInterval(this.noSleepTimer);
        this.noSleepTimer = null;
      }
    } else {
      this.noSleepVideo.pause();
    }
    this.enabled = false;
  }
}

module.exports = NoSleep;


/***/ }),

/***/ 2574:
/***/ ((module) => {

module.exports = {
  webm:
    "data:video/webm;base64,GkXfowEAAAAAAAAfQoaBAUL3gQFC8oEEQvOBCEKChHdlYm1Ch4EEQoWBAhhTgGcBAAAAAAAVkhFNm3RALE27i1OrhBVJqWZTrIHfTbuMU6uEFlSua1OsggEwTbuMU6uEHFO7a1OsghV17AEAAAAAAACkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmAQAAAAAAAEUq17GDD0JATYCNTGF2ZjU1LjMzLjEwMFdBjUxhdmY1NS4zMy4xMDBzpJBlrrXf3DCDVB8KcgbMpcr+RImIQJBgAAAAAAAWVK5rAQAAAAAAD++uAQAAAAAAADLXgQFzxYEBnIEAIrWcg3VuZIaFVl9WUDiDgQEj44OEAmJaAOABAAAAAAAABrCBsLqBkK4BAAAAAAAPq9eBAnPFgQKcgQAitZyDdW5khohBX1ZPUkJJU4OBAuEBAAAAAAAAEZ+BArWIQOdwAAAAAABiZIEgY6JPbwIeVgF2b3JiaXMAAAAAAoC7AAAAAAAAgLUBAAAAAAC4AQN2b3JiaXMtAAAAWGlwaC5PcmcgbGliVm9yYmlzIEkgMjAxMDExMDEgKFNjaGF1ZmVudWdnZXQpAQAAABUAAABlbmNvZGVyPUxhdmM1NS41Mi4xMDIBBXZvcmJpcyVCQ1YBAEAAACRzGCpGpXMWhBAaQlAZ4xxCzmvsGUJMEYIcMkxbyyVzkCGkoEKIWyiB0JBVAABAAACHQXgUhIpBCCGEJT1YkoMnPQghhIg5eBSEaUEIIYQQQgghhBBCCCGERTlokoMnQQgdhOMwOAyD5Tj4HIRFOVgQgydB6CCED0K4moOsOQghhCQ1SFCDBjnoHITCLCiKgsQwuBaEBDUojILkMMjUgwtCiJqDSTX4GoRnQXgWhGlBCCGEJEFIkIMGQcgYhEZBWJKDBjm4FITLQagahCo5CB+EIDRkFQCQAACgoiiKoigKEBqyCgDIAAAQQFEUx3EcyZEcybEcCwgNWQUAAAEACAAAoEiKpEiO5EiSJFmSJVmSJVmS5omqLMuyLMuyLMsyEBqyCgBIAABQUQxFcRQHCA1ZBQBkAAAIoDiKpViKpWiK54iOCISGrAIAgAAABAAAEDRDUzxHlETPVFXXtm3btm3btm3btm3btm1blmUZCA1ZBQBAAAAQ0mlmqQaIMAMZBkJDVgEACAAAgBGKMMSA0JBVAABAAACAGEoOogmtOd+c46BZDppKsTkdnEi1eZKbirk555xzzsnmnDHOOeecopxZDJoJrTnnnMSgWQqaCa0555wnsXnQmiqtOeeccc7pYJwRxjnnnCateZCajbU555wFrWmOmkuxOeecSLl5UptLtTnnnHPOOeecc84555zqxekcnBPOOeecqL25lpvQxTnnnE/G6d6cEM4555xzzjnnnHPOOeecIDRkFQAABABAEIaNYdwpCNLnaCBGEWIaMulB9+gwCRqDnELq0ehopJQ6CCWVcVJKJwgNWQUAAAIAQAghhRRSSCGFFFJIIYUUYoghhhhyyimnoIJKKqmooowyyyyzzDLLLLPMOuyssw47DDHEEEMrrcRSU2011lhr7jnnmoO0VlprrbVSSimllFIKQkNWAQAgAAAEQgYZZJBRSCGFFGKIKaeccgoqqIDQkFUAACAAgAAAAABP8hzRER3RER3RER3RER3R8RzPESVREiVREi3TMjXTU0VVdWXXlnVZt31b2IVd933d933d+HVhWJZlWZZlWZZlWZZlWZZlWZYgNGQVAAACAAAghBBCSCGFFFJIKcYYc8w56CSUEAgNWQUAAAIACAAAAHAUR3EcyZEcSbIkS9IkzdIsT/M0TxM9URRF0zRV0RVdUTdtUTZl0zVdUzZdVVZtV5ZtW7Z125dl2/d93/d93/d93/d93/d9XQdCQ1YBABIAADqSIymSIimS4ziOJElAaMgqAEAGAEAAAIriKI7jOJIkSZIlaZJneZaomZrpmZ4qqkBoyCoAABAAQAAAAAAAAIqmeIqpeIqoeI7oiJJomZaoqZoryqbsuq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq7ruq4LhIasAgAkAAB0JEdyJEdSJEVSJEdygNCQVQCADACAAAAcwzEkRXIsy9I0T/M0TxM90RM901NFV3SB0JBVAAAgAIAAAAAAAAAMybAUy9EcTRIl1VItVVMt1VJF1VNVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVN0zRNEwgNWQkAkAEAkBBTLS3GmgmLJGLSaqugYwxS7KWxSCpntbfKMYUYtV4ah5RREHupJGOKQcwtpNApJq3WVEKFFKSYYyoVUg5SIDRkhQAQmgHgcBxAsixAsiwAAAAAAAAAkDQN0DwPsDQPAAAAAAAAACRNAyxPAzTPAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA0jRA8zxA8zwAAAAAAAAA0DwP8DwR8EQRAAAAAAAAACzPAzTRAzxRBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA0jRA8zxA8zwAAAAAAAAAsDwP8EQR0DwRAAAAAAAAACzPAzxRBDzRAwgIRQasiIAiBMAcEgSJAmSBM0DSJYFTYOmwTQBkmVB06BpME0AAAAAAAAAAAAAJE2DpkHTIIoASdOgadA0iCIAAAAAAAAAAAAAkqZB06BpEEWApGnQNGgaRBEAAAAAAAAAAAAAzzQhihBFmCbAM02IIkQRpgkAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAGHAAAAgwoQwUGrIiAIgTAHA4imUBAIDjOJYFAACO41gWAABYliWKAABgWZooAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAYcAAACDChDBQashIAiAIAcCiKZQHHsSzgOJYFJMmyAJYF0DyApgFEEQAIAAAocAAACLBBU2JxgEJDVgIAUQAABsWxLE0TRZKkaZoniiRJ0zxPFGma53meacLzPM80IYqiaJoQRVE0TZimaaoqME1VFQAAUOAAABBgg6bE4gCFhqwEAEICAByKYlma5nmeJ4qmqZokSdM8TxRF0TRNU1VJkqZ5niiKommapqqyLE3zPFEURdNUVVWFpnmeKIqiaaqq6sLzPE8URdE0VdV14XmeJ4qiaJqq6roQRVE0TdNUTVV1XSCKpmmaqqqqrgtETxRNU1Vd13WB54miaaqqq7ouEE3TVFVVdV1ZBpimaaqq68oyQFVV1XVdV5YBqqqqruu6sgxQVdd1XVmWZQCu67qyLMsCAAAOHAAAAoygk4wqi7DRhAsPQKEhKwKAKAAAwBimFFPKMCYhpBAaxiSEFEImJaXSUqogpFJSKRWEVEoqJaOUUmopVRBSKamUCkIqJZVSAADYgQMA2IGFUGjISgAgDwCAMEYpxhhzTiKkFGPOOScRUoox55yTSjHmnHPOSSkZc8w556SUzjnnnHNSSuacc845KaVzzjnnnJRSSuecc05KKSWEzkEnpZTSOeecEwAAVOAAABBgo8jmBCNBhYasBABSAQAMjmNZmuZ5omialiRpmud5niiapiZJmuZ5nieKqsnzPE8URdE0VZXneZ4oiqJpqirXFUXTNE1VVV2yLIqmaZqq6rowTdNUVdd1XZimaaqq67oubFtVVdV1ZRm2raqq6rqyDFzXdWXZloEsu67s2rIAAPAEBwCgAhtWRzgpGgssNGQlAJABAEAYg5BCCCFlEEIKIYSUUggJAAAYcAAACDChDBQashIASAUAAIyx1lprrbXWQGettdZaa62AzFprrbXWWmuttdZaa6211lJrrbXWWmuttdZaa6211lprrbXWWmuttdZaa6211lprrbXWWmuttdZaa6211lprrbXWWmstpZRSSimllFJKKaWUUkoppZRSSgUA+lU4APg/2LA6wknRWGChISsBgHAAAMAYpRhzDEIppVQIMeacdFRai7FCiDHnJKTUWmzFc85BKCGV1mIsnnMOQikpxVZjUSmEUlJKLbZYi0qho5JSSq3VWIwxqaTWWoutxmKMSSm01FqLMRYjbE2ptdhqq7EYY2sqLbQYY4zFCF9kbC2m2moNxggjWywt1VprMMYY3VuLpbaaizE++NpSLDHWXAAAd4MDAESCjTOsJJ0VjgYXGrISAAgJACAQUooxxhhzzjnnpFKMOeaccw5CCKFUijHGnHMOQgghlIwx5pxzEEIIIYRSSsaccxBCCCGEkFLqnHMQQgghhBBKKZ1zDkIIIYQQQimlgxBCCCGEEEoopaQUQgghhBBCCKmklEIIIYRSQighlZRSCCGEEEIpJaSUUgohhFJCCKGElFJKKYUQQgillJJSSimlEkoJJYQSUikppRRKCCGUUkpKKaVUSgmhhBJKKSWllFJKIYQQSikFAAAcOAAABBhBJxlVFmGjCRcegEJDVgIAZAAAkKKUUiktRYIipRikGEtGFXNQWoqocgxSzalSziDmJJaIMYSUk1Qy5hRCDELqHHVMKQYtlRhCxhik2HJLoXMOAAAAQQCAgJAAAAMEBTMAwOAA4XMQdAIERxsAgCBEZohEw0JweFAJEBFTAUBigkIuAFRYXKRdXECXAS7o4q4DIQQhCEEsDqCABByccMMTb3jCDU7QKSp1IAAAAAAADADwAACQXAAREdHMYWRobHB0eHyAhIiMkAgAAAAAABcAfAAAJCVAREQ0cxgZGhscHR4fICEiIyQBAIAAAgAAAAAggAAEBAQAAAAAAAIAAAAEBB9DtnUBAAAAAAAEPueBAKOFggAAgACjzoEAA4BwBwCdASqwAJAAAEcIhYWIhYSIAgIABhwJ7kPfbJyHvtk5D32ych77ZOQ99snIe+2TkPfbJyHvtk5D32ych77ZOQ99YAD+/6tQgKOFggADgAqjhYIAD4AOo4WCACSADqOZgQArADECAAEQEAAYABhYL/QACIBDmAYAAKOFggA6gA6jhYIAT4AOo5mBAFMAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAGSADqOFggB6gA6jmYEAewAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIAj4AOo5mBAKMAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAKSADqOFggC6gA6jmYEAywAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIAz4AOo4WCAOSADqOZgQDzADECAAEQEAAYABhYL/QACIBDmAYAAKOFggD6gA6jhYIBD4AOo5iBARsAEQIAARAQFGAAYWC/0AAiAQ5gGACjhYIBJIAOo4WCATqADqOZgQFDADECAAEQEAAYABhYL/QACIBDmAYAAKOFggFPgA6jhYIBZIAOo5mBAWsAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAXqADqOFggGPgA6jmYEBkwAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIBpIAOo4WCAbqADqOZgQG7ADECAAEQEAAYABhYL/QACIBDmAYAAKOFggHPgA6jmYEB4wAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIB5IAOo4WCAfqADqOZgQILADECAAEQEAAYABhYL/QACIBDmAYAAKOFggIPgA6jhYICJIAOo5mBAjMAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAjqADqOFggJPgA6jmYECWwAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYICZIAOo4WCAnqADqOZgQKDADECAAEQEAAYABhYL/QACIBDmAYAAKOFggKPgA6jhYICpIAOo5mBAqsAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCArqADqOFggLPgA6jmIEC0wARAgABEBAUYABhYL/QACIBDmAYAKOFggLkgA6jhYIC+oAOo5mBAvsAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCAw+ADqOZgQMjADECAAEQEAAYABhYL/QACIBDmAYAAKOFggMkgA6jhYIDOoAOo5mBA0sAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCA0+ADqOFggNkgA6jmYEDcwAxAgABEBAAGAAYWC/0AAiAQ5gGAACjhYIDeoAOo4WCA4+ADqOZgQObADECAAEQEAAYABhYL/QACIBDmAYAAKOFggOkgA6jhYIDuoAOo5mBA8MAMQIAARAQABgAGFgv9AAIgEOYBgAAo4WCA8+ADqOFggPkgA6jhYID+oAOo4WCBA+ADhxTu2sBAAAAAAAAEbuPs4EDt4r3gQHxghEr8IEK",
  mp4:
    "data:video/mp4;base64,AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAAAGF21kYXTeBAAAbGliZmFhYyAxLjI4AABCAJMgBDIARwAAArEGBf//rdxF6b3m2Ui3lizYINkj7u94MjY0IC0gY29yZSAxNDIgcjIgOTU2YzhkOCAtIEguMjY0L01QRUctNCBBVkMgY29kZWMgLSBDb3B5bGVmdCAyMDAzLTIwMTQgLSBodHRwOi8vd3d3LnZpZGVvbGFuLm9yZy94MjY0Lmh0bWwgLSBvcHRpb25zOiBjYWJhYz0wIHJlZj0zIGRlYmxvY2s9MTowOjAgYW5hbHlzZT0weDE6MHgxMTEgbWU9aGV4IHN1Ym1lPTcgcHN5PTEgcHN5X3JkPTEuMDA6MC4wMCBtaXhlZF9yZWY9MSBtZV9yYW5nZT0xNiBjaHJvbWFfbWU9MSB0cmVsbGlzPTEgOHg4ZGN0PTAgY3FtPTAgZGVhZHpvbmU9MjEsMTEgZmFzdF9wc2tpcD0xIGNocm9tYV9xcF9vZmZzZXQ9LTIgdGhyZWFkcz02IGxvb2thaGVhZF90aHJlYWRzPTEgc2xpY2VkX3RocmVhZHM9MCBucj0wIGRlY2ltYXRlPTEgaW50ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MCB3ZWlnaHRwPTAga2V5aW50PTI1MCBrZXlpbnRfbWluPTI1IHNjZW5lY3V0PTQwIGludHJhX3JlZnJlc2g9MCByY19sb29rYWhlYWQ9NDAgcmM9Y3JmIG1idHJlZT0xIGNyZj0yMy4wIHFjb21wPTAuNjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCB2YnZfbWF4cmF0ZT03NjggdmJ2X2J1ZnNpemU9MzAwMCBjcmZfbWF4PTAuMCBuYWxfaHJkPW5vbmUgZmlsbGVyPTAgaXBfcmF0aW89MS40MCBhcT0xOjEuMDAAgAAAAFZliIQL8mKAAKvMnJycnJycnJycnXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXiEASZACGQAjgCEASZACGQAjgAAAAAdBmjgX4GSAIQBJkAIZACOAAAAAB0GaVAX4GSAhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGagC/AySEASZACGQAjgAAAAAZBmqAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZrAL8DJIQBJkAIZACOAAAAABkGa4C/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmwAvwMkhAEmQAhkAI4AAAAAGQZsgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGbQC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm2AvwMkhAEmQAhkAI4AAAAAGQZuAL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGboC/AySEASZACGQAjgAAAAAZBm8AvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZvgL8DJIQBJkAIZACOAAAAABkGaAC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmiAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZpAL8DJIQBJkAIZACOAAAAABkGaYC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBmoAvwMkhAEmQAhkAI4AAAAAGQZqgL8DJIQBJkAIZACOAIQBJkAIZACOAAAAABkGawC/AySEASZACGQAjgAAAAAZBmuAvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZsAL8DJIQBJkAIZACOAAAAABkGbIC/AySEASZACGQAjgCEASZACGQAjgAAAAAZBm0AvwMkhAEmQAhkAI4AhAEmQAhkAI4AAAAAGQZtgL8DJIQBJkAIZACOAAAAABkGbgCvAySEASZACGQAjgCEASZACGQAjgAAAAAZBm6AnwMkhAEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AhAEmQAhkAI4AAAAhubW9vdgAAAGxtdmhkAAAAAAAAAAAAAAAAAAAD6AAABDcAAQAAAQAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAzB0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAABAAAAAAAAA+kAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAALAAAACQAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAPpAAAAAAABAAAAAAKobWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAAB1MAAAdU5VxAAAAAAALWhkbHIAAAAAAAAAAHZpZGUAAAAAAAAAAAAAAABWaWRlb0hhbmRsZXIAAAACU21pbmYAAAAUdm1oZAAAAAEAAAAAAAAAAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAAhNzdGJsAAAAr3N0c2QAAAAAAAAAAQAAAJ9hdmMxAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAALAAkABIAAAASAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGP//AAAALWF2Y0MBQsAN/+EAFWdCwA3ZAsTsBEAAAPpAADqYA8UKkgEABWjLg8sgAAAAHHV1aWRraEDyXyRPxbo5pRvPAyPzAAAAAAAAABhzdHRzAAAAAAAAAAEAAAAeAAAD6QAAABRzdHNzAAAAAAAAAAEAAAABAAAAHHN0c2MAAAAAAAAAAQAAAAEAAAABAAAAAQAAAIxzdHN6AAAAAAAAAAAAAAAeAAADDwAAAAsAAAALAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAAiHN0Y28AAAAAAAAAHgAAAEYAAANnAAADewAAA5gAAAO0AAADxwAAA+MAAAP2AAAEEgAABCUAAARBAAAEXQAABHAAAASMAAAEnwAABLsAAATOAAAE6gAABQYAAAUZAAAFNQAABUgAAAVkAAAFdwAABZMAAAWmAAAFwgAABd4AAAXxAAAGDQAABGh0cmFrAAAAXHRraGQAAAADAAAAAAAAAAAAAAACAAAAAAAABDcAAAAAAAAAAAAAAAEBAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAQkAAADcAABAAAAAAPgbWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAAC7gAAAykBVxAAAAAAALWhkbHIAAAAAAAAAAHNvdW4AAAAAAAAAAAAAAABTb3VuZEhhbmRsZXIAAAADi21pbmYAAAAQc21oZAAAAAAAAAAAAAAAJGRpbmYAAAAcZHJlZgAAAAAAAAABAAAADHVybCAAAAABAAADT3N0YmwAAABnc3RzZAAAAAAAAAABAAAAV21wNGEAAAAAAAAAAQAAAAAAAAAAAAIAEAAAAAC7gAAAAAAAM2VzZHMAAAAAA4CAgCIAAgAEgICAFEAVBbjYAAu4AAAADcoFgICAAhGQBoCAgAECAAAAIHN0dHMAAAAAAAAAAgAAADIAAAQAAAAAAQAAAkAAAAFUc3RzYwAAAAAAAAAbAAAAAQAAAAEAAAABAAAAAgAAAAIAAAABAAAAAwAAAAEAAAABAAAABAAAAAIAAAABAAAABgAAAAEAAAABAAAABwAAAAIAAAABAAAACAAAAAEAAAABAAAACQAAAAIAAAABAAAACgAAAAEAAAABAAAACwAAAAIAAAABAAAADQAAAAEAAAABAAAADgAAAAIAAAABAAAADwAAAAEAAAABAAAAEAAAAAIAAAABAAAAEQAAAAEAAAABAAAAEgAAAAIAAAABAAAAFAAAAAEAAAABAAAAFQAAAAIAAAABAAAAFgAAAAEAAAABAAAAFwAAAAIAAAABAAAAGAAAAAEAAAABAAAAGQAAAAIAAAABAAAAGgAAAAEAAAABAAAAGwAAAAIAAAABAAAAHQAAAAEAAAABAAAAHgAAAAIAAAABAAAAHwAAAAQAAAABAAAA4HN0c3oAAAAAAAAAAAAAADMAAAAaAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAACMc3RjbwAAAAAAAAAfAAAALAAAA1UAAANyAAADhgAAA6IAAAO+AAAD0QAAA+0AAAQAAAAEHAAABC8AAARLAAAEZwAABHoAAASWAAAEqQAABMUAAATYAAAE9AAABRAAAAUjAAAFPwAABVIAAAVuAAAFgQAABZ0AAAWwAAAFzAAABegAAAX7AAAGFwAAAGJ1ZHRhAAAAWm1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAALWlsc3QAAAAlqXRvbwAAAB1kYXRhAAAAAQAAAABMYXZmNTUuMzMuMTAw",
};


/***/ }),

/***/ 9012:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   k: () => (/* binding */ register)
/* harmony export */ });
/* unused harmony export unregister */
// Register a service worker to serve assets from local cache.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on the "N+1" visit to a page, since previously
// cached resources are updated in the background.

var isLocalhost = function () { return Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.1/8 is considered localhost for IPv4.
    window.location.hostname.match(
      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
    )
); }

var waitWindowLoad
// https://github.com/yyx990803/register-service-worker/pull/33#discussion_r394181861
if (typeof window !== 'undefined') {
  // Typically, a browser that supports `serviceWorker` should also have supported
  // `Promise`. But as this package can be used in environments without service
  // worker support (in that case it would do nothing), there's a chance that
  // `Promise` does not exist. So we must check for its existence first.
  if (typeof Promise !== 'undefined') {
    waitWindowLoad = new Promise(function (resolve) { return window.addEventListener('load', resolve); })
  } else {
    waitWindowLoad = { then: function (cb) { return window.addEventListener('load', cb); } }
  }
}

function register (swUrl, hooks) {
  if ( hooks === void 0 ) hooks = {};

  var registrationOptions = hooks.registrationOptions; if ( registrationOptions === void 0 ) registrationOptions = {};
  delete hooks.registrationOptions

  var emit = function (hook) {
    var args = [], len = arguments.length - 1;
    while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

    if (hooks && hooks[hook]) {
      hooks[hook].apply(hooks, args)
    }
  }

  if ('serviceWorker' in navigator) {
    waitWindowLoad.then(function () {
      if (isLocalhost()) {
        // This is running on localhost. Lets check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, emit, registrationOptions)
        navigator.serviceWorker.ready.then(function (registration) {
          emit('ready', registration)
        }).catch(function (error) { return handleError(emit, error); })
      } else {
        // Is not local host. Just register service worker
        registerValidSW(swUrl, emit, registrationOptions)
        navigator.serviceWorker.ready.then(function (registration) {
          emit('ready', registration)
        }).catch(function (error) { return handleError(emit, error); })
      }
    })
  }
}

function handleError (emit, error) {
  if (!navigator.onLine) {
    emit('offline')
  }
  emit('error', error)
}

function registerValidSW (swUrl, emit, registrationOptions) {
  navigator.serviceWorker
    .register(swUrl, registrationOptions)
    .then(function (registration) {
      emit('registered', registration)
      if (registration.waiting) {
        emit('updated', registration)
        return
      }
      registration.onupdatefound = function () {
        emit('updatefound', registration)
        var installingWorker = registration.installing
        installingWorker.onstatechange = function () {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the old content will have been purged and
              // the fresh content will have been added to the cache.
              // It's the perfect time to display a "New content is
              // available; please refresh." message in your web app.
              emit('updated', registration)
            } else {
              // At this point, everything has been precached.
              // It's the perfect time to display a
              // "Content is cached for offline use." message.
              emit('cached', registration)
            }
          }
        }
      }
    })
    .catch(function (error) { return handleError(emit, error); })
}

function checkValidServiceWorker (swUrl, emit, registrationOptions) {
  // Check if the service worker can be found.
  fetch(swUrl)
    .then(function (response) {
      // Ensure service worker exists, and that we really are getting a JS file.
      if (response.status === 404) {
        // No service worker found.
        emit('error', new Error(("Service worker not found at " + swUrl)))
        unregister()
      } else if (response.headers.get('content-type').indexOf('javascript') === -1) {
        emit('error', new Error(
          "Expected " + swUrl + " to have javascript content-type, " +
          "but received " + (response.headers.get('content-type'))))
        unregister()
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, emit, registrationOptions)
      }
    })
    .catch(function (error) { return handleError(emit, error); })
}

function unregister () {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready.then(function (registration) {
      registration.unregister()
    }).catch(function (error) { return handleError(emit, error); })
  }
}


/***/ }),

/***/ 2807:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });
// runtime helper for setting properties on components
// in a tree-shakable way
exports.A = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
        target[key] = val;
    }
    return target;
};


/***/ }),

/***/ 1555:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Ey: () => (/* binding */ createPinia),
  nY: () => (/* binding */ defineStore)
});

// UNUSED EXPORTS: MutationType, PiniaVuePlugin, acceptHMRUpdate, getActivePinia, mapActions, mapGetters, mapState, mapStores, mapWritableState, setActivePinia, setMapStoreSuffix, skipHydrate, storeToRefs

// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(8734);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
;// CONCATENATED MODULE: ./node_modules/pinia/node_modules/vue-demi/lib/index.mjs


var lib_isVue2 = false
var isVue3 = true
var Vue2 = (/* unused pure expression or super */ null && (undefined))

function install() {}

function lib_set(target, key, val) {
  if (Array.isArray(target)) {
    target.length = Math.max(target.length, key)
    target.splice(key, 1, val)
    return val
  }
  target[key] = val
  return val
}

function del(target, key) {
  if (Array.isArray(target)) {
    target.splice(key, 1)
    return
  }
  delete target[key]
}




// EXTERNAL MODULE: ./node_modules/@vue/devtools-api/lib/esm/index.js + 4 modules
var esm = __webpack_require__(2461);
;// CONCATENATED MODULE: ./node_modules/pinia/dist/pinia.mjs
/*!
 * pinia v2.1.7
 * (c) 2023 Eduardo San Martin Morote
 * @license MIT
 */



/**
 * setActivePinia must be called to handle SSR at the top of functions like
 * `fetch`, `setup`, `serverPrefetch` and others
 */
let activePinia;
/**
 * Sets or unsets the active pinia. Used in SSR and internally when calling
 * actions and getters
 *
 * @param pinia - Pinia instance
 */
// @ts-expect-error: cannot constrain the type of the return
const setActivePinia = (pinia) => (activePinia = pinia);
/**
 * Get the currently active pinia if there is any.
 */
const getActivePinia = () => (hasInjectionContext() && inject(piniaSymbol)) || activePinia;
const piniaSymbol = (( false) ? 0 : /* istanbul ignore next */ Symbol());

function isPlainObject(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
o) {
    return (o &&
        typeof o === 'object' &&
        Object.prototype.toString.call(o) === '[object Object]' &&
        typeof o.toJSON !== 'function');
}
// type DeepReadonly<T> = { readonly [P in keyof T]: DeepReadonly<T[P]> }
// TODO: can we change these to numbers?
/**
 * Possible types for SubscriptionCallback
 */
var MutationType;
(function (MutationType) {
    /**
     * Direct mutation of the state:
     *
     * - `store.name = 'new name'`
     * - `store.$state.name = 'new name'`
     * - `store.list.push('new item')`
     */
    MutationType["direct"] = "direct";
    /**
     * Mutated the state with `$patch` and an object
     *
     * - `store.$patch({ name: 'newName' })`
     */
    MutationType["patchObject"] = "patch object";
    /**
     * Mutated the state with `$patch` and a function
     *
     * - `store.$patch(state => state.name = 'newName')`
     */
    MutationType["patchFunction"] = "patch function";
    // maybe reset? for $state = {} and $reset
})(MutationType || (MutationType = {}));

const IS_CLIENT = typeof window !== 'undefined';
/**
 * Should we add the devtools plugins.
 * - only if dev mode or forced through the prod devtools flag
 * - not in test
 * - only if window exists (could change in the future)
 */
const USE_DEVTOOLS =  true && IS_CLIENT;

/*
 * FileSaver.js A saveAs() FileSaver implementation.
 *
 * Originally by Eli Grey, adapted as an ESM module by Eduardo San Martin
 * Morote.
 *
 * License : MIT
 */
// The one and only way of getting global scope in all environments
// https://stackoverflow.com/q/3277182/1008999
const _global = /*#__PURE__*/ (() => typeof window === 'object' && window.window === window
    ? window
    : typeof self === 'object' && self.self === self
        ? self
        : typeof __webpack_require__.g === 'object' && __webpack_require__.g.global === __webpack_require__.g
            ? __webpack_require__.g
            : typeof globalThis === 'object'
                ? globalThis
                : { HTMLElement: null })();
function bom(blob, { autoBom = false } = {}) {
    // prepend BOM for UTF-8 XML and text/* types (including HTML)
    // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
    if (autoBom &&
        /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
        return new Blob([String.fromCharCode(0xfeff), blob], { type: blob.type });
    }
    return blob;
}
function download(url, name, opts) {
    const xhr = new XMLHttpRequest();
    xhr.open('GET', url);
    xhr.responseType = 'blob';
    xhr.onload = function () {
        saveAs(xhr.response, name, opts);
    };
    xhr.onerror = function () {
        console.error('could not download file');
    };
    xhr.send();
}
function corsEnabled(url) {
    const xhr = new XMLHttpRequest();
    // use sync to avoid popup blocker
    xhr.open('HEAD', url, false);
    try {
        xhr.send();
    }
    catch (e) { }
    return xhr.status >= 200 && xhr.status <= 299;
}
// `a.click()` doesn't work for all browsers (#465)
function click(node) {
    try {
        node.dispatchEvent(new MouseEvent('click'));
    }
    catch (e) {
        const evt = document.createEvent('MouseEvents');
        evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
        node.dispatchEvent(evt);
    }
}
const _navigator = 
 typeof navigator === 'object' ? navigator : { userAgent: '' };
// Detect WebView inside a native macOS app by ruling out all browsers
// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too
// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos
const isMacOSWebView = /*#__PURE__*/ (() => /Macintosh/.test(_navigator.userAgent) &&
    /AppleWebKit/.test(_navigator.userAgent) &&
    !/Safari/.test(_navigator.userAgent))();
const saveAs = !IS_CLIENT
    ? () => { } // noop
    : // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program
        typeof HTMLAnchorElement !== 'undefined' &&
            'download' in HTMLAnchorElement.prototype &&
            !isMacOSWebView
            ? downloadSaveAs
            : // Use msSaveOrOpenBlob as a second approach
                'msSaveOrOpenBlob' in _navigator
                    ? msSaveAs
                    : // Fallback to using FileReader and a popup
                        fileSaverSaveAs;
function downloadSaveAs(blob, name = 'download', opts) {
    const a = document.createElement('a');
    a.download = name;
    a.rel = 'noopener'; // tabnabbing
    // TODO: detect chrome extensions & packaged apps
    // a.target = '_blank'
    if (typeof blob === 'string') {
        // Support regular links
        a.href = blob;
        if (a.origin !== location.origin) {
            if (corsEnabled(a.href)) {
                download(blob, name, opts);
            }
            else {
                a.target = '_blank';
                click(a);
            }
        }
        else {
            click(a);
        }
    }
    else {
        // Support blobs
        a.href = URL.createObjectURL(blob);
        setTimeout(function () {
            URL.revokeObjectURL(a.href);
        }, 4e4); // 40s
        setTimeout(function () {
            click(a);
        }, 0);
    }
}
function msSaveAs(blob, name = 'download', opts) {
    if (typeof blob === 'string') {
        if (corsEnabled(blob)) {
            download(blob, name, opts);
        }
        else {
            const a = document.createElement('a');
            a.href = blob;
            a.target = '_blank';
            setTimeout(function () {
                click(a);
            });
        }
    }
    else {
        // @ts-ignore: works on windows
        navigator.msSaveOrOpenBlob(bom(blob, opts), name);
    }
}
function fileSaverSaveAs(blob, name, opts, popup) {
    // Open a popup immediately do go around popup blocker
    // Mostly only available on user interaction and the fileReader is async so...
    popup = popup || open('', '_blank');
    if (popup) {
        popup.document.title = popup.document.body.innerText = 'downloading...';
    }
    if (typeof blob === 'string')
        return download(blob, name, opts);
    const force = blob.type === 'application/octet-stream';
    const isSafari = /constructor/i.test(String(_global.HTMLElement)) || 'safari' in _global;
    const isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent);
    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) &&
        typeof FileReader !== 'undefined') {
        // Safari doesn't allow downloading of blob URLs
        const reader = new FileReader();
        reader.onloadend = function () {
            let url = reader.result;
            if (typeof url !== 'string') {
                popup = null;
                throw new Error('Wrong reader.result type');
            }
            url = isChromeIOS
                ? url
                : url.replace(/^data:[^;]*;/, 'data:attachment/file;');
            if (popup) {
                popup.location.href = url;
            }
            else {
                location.assign(url);
            }
            popup = null; // reverse-tabnabbing #460
        };
        reader.readAsDataURL(blob);
    }
    else {
        const url = URL.createObjectURL(blob);
        if (popup)
            popup.location.assign(url);
        else
            location.href = url;
        popup = null; // reverse-tabnabbing #460
        setTimeout(function () {
            URL.revokeObjectURL(url);
        }, 4e4); // 40s
    }
}

/**
 * Shows a toast or console.log
 *
 * @param message - message to log
 * @param type - different color of the tooltip
 */
function toastMessage(message, type) {
    const piniaMessage = '🍍 ' + message;
    if (typeof __VUE_DEVTOOLS_TOAST__ === 'function') {
        // No longer available :(
        __VUE_DEVTOOLS_TOAST__(piniaMessage, type);
    }
    else if (type === 'error') {
        console.error(piniaMessage);
    }
    else if (type === 'warn') {
        console.warn(piniaMessage);
    }
    else {
        console.log(piniaMessage);
    }
}
function isPinia(o) {
    return '_a' in o && 'install' in o;
}

/**
 * This file contain devtools actions, they are not Pinia actions.
 */
// ---
function checkClipboardAccess() {
    if (!('clipboard' in navigator)) {
        toastMessage(`Your browser doesn't support the Clipboard API`, 'error');
        return true;
    }
}
function checkNotFocusedError(error) {
    if (error instanceof Error &&
        error.message.toLowerCase().includes('document is not focused')) {
        toastMessage('You need to activate the "Emulate a focused page" setting in the "Rendering" panel of devtools.', 'warn');
        return true;
    }
    return false;
}
async function actionGlobalCopyState(pinia) {
    if (checkClipboardAccess())
        return;
    try {
        await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));
        toastMessage('Global state copied to clipboard.');
    }
    catch (error) {
        if (checkNotFocusedError(error))
            return;
        toastMessage(`Failed to serialize the state. Check the console for more details.`, 'error');
        console.error(error);
    }
}
async function actionGlobalPasteState(pinia) {
    if (checkClipboardAccess())
        return;
    try {
        loadStoresState(pinia, JSON.parse(await navigator.clipboard.readText()));
        toastMessage('Global state pasted from clipboard.');
    }
    catch (error) {
        if (checkNotFocusedError(error))
            return;
        toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, 'error');
        console.error(error);
    }
}
async function actionGlobalSaveState(pinia) {
    try {
        saveAs(new Blob([JSON.stringify(pinia.state.value)], {
            type: 'text/plain;charset=utf-8',
        }), 'pinia-state.json');
    }
    catch (error) {
        toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');
        console.error(error);
    }
}
let fileInput;
function getFileOpener() {
    if (!fileInput) {
        fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.accept = '.json';
    }
    function openFile() {
        return new Promise((resolve, reject) => {
            fileInput.onchange = async () => {
                const files = fileInput.files;
                if (!files)
                    return resolve(null);
                const file = files.item(0);
                if (!file)
                    return resolve(null);
                return resolve({ text: await file.text(), file });
            };
            // @ts-ignore: TODO: changed from 4.3 to 4.4
            fileInput.oncancel = () => resolve(null);
            fileInput.onerror = reject;
            fileInput.click();
        });
    }
    return openFile;
}
async function actionGlobalOpenStateFile(pinia) {
    try {
        const open = getFileOpener();
        const result = await open();
        if (!result)
            return;
        const { text, file } = result;
        loadStoresState(pinia, JSON.parse(text));
        toastMessage(`Global state imported from "${file.name}".`);
    }
    catch (error) {
        toastMessage(`Failed to import the state from JSON. Check the console for more details.`, 'error');
        console.error(error);
    }
}
function loadStoresState(pinia, state) {
    for (const key in state) {
        const storeState = pinia.state.value[key];
        // store is already instantiated, patch it
        if (storeState) {
            Object.assign(storeState, state[key]);
        }
        else {
            // store is not instantiated, set the initial state
            pinia.state.value[key] = state[key];
        }
    }
}

function formatDisplay(display) {
    return {
        _custom: {
            display,
        },
    };
}
const PINIA_ROOT_LABEL = '🍍 Pinia (root)';
const PINIA_ROOT_ID = '_root';
function formatStoreForInspectorTree(store) {
    return isPinia(store)
        ? {
            id: PINIA_ROOT_ID,
            label: PINIA_ROOT_LABEL,
        }
        : {
            id: store.$id,
            label: store.$id,
        };
}
function formatStoreForInspectorState(store) {
    if (isPinia(store)) {
        const storeNames = Array.from(store._s.keys());
        const storeMap = store._s;
        const state = {
            state: storeNames.map((storeId) => ({
                editable: true,
                key: storeId,
                value: store.state.value[storeId],
            })),
            getters: storeNames
                .filter((id) => storeMap.get(id)._getters)
                .map((id) => {
                const store = storeMap.get(id);
                return {
                    editable: false,
                    key: id,
                    value: store._getters.reduce((getters, key) => {
                        getters[key] = store[key];
                        return getters;
                    }, {}),
                };
            }),
        };
        return state;
    }
    const state = {
        state: Object.keys(store.$state).map((key) => ({
            editable: true,
            key,
            value: store.$state[key],
        })),
    };
    // avoid adding empty getters
    if (store._getters && store._getters.length) {
        state.getters = store._getters.map((getterName) => ({
            editable: false,
            key: getterName,
            value: store[getterName],
        }));
    }
    if (store._customProperties.size) {
        state.customProperties = Array.from(store._customProperties).map((key) => ({
            editable: true,
            key,
            value: store[key],
        }));
    }
    return state;
}
function formatEventData(events) {
    if (!events)
        return {};
    if (Array.isArray(events)) {
        // TODO: handle add and delete for arrays and objects
        return events.reduce((data, event) => {
            data.keys.push(event.key);
            data.operations.push(event.type);
            data.oldValue[event.key] = event.oldValue;
            data.newValue[event.key] = event.newValue;
            return data;
        }, {
            oldValue: {},
            keys: [],
            operations: [],
            newValue: {},
        });
    }
    else {
        return {
            operation: formatDisplay(events.type),
            key: formatDisplay(events.key),
            oldValue: events.oldValue,
            newValue: events.newValue,
        };
    }
}
function formatMutationType(type) {
    switch (type) {
        case MutationType.direct:
            return 'mutation';
        case MutationType.patchFunction:
            return '$patch';
        case MutationType.patchObject:
            return '$patch';
        default:
            return 'unknown';
    }
}

// timeline can be paused when directly changing the state
let isTimelineActive = true;
const componentStateTypes = [];
const MUTATIONS_LAYER_ID = 'pinia:mutations';
const INSPECTOR_ID = 'pinia';
const { assign: assign$1 } = Object;
/**
 * Gets the displayed name of a store in devtools
 *
 * @param id - id of the store
 * @returns a formatted string
 */
const getStoreType = (id) => '🍍 ' + id;
/**
 * Add the pinia plugin without any store. Allows displaying a Pinia plugin tab
 * as soon as it is added to the application.
 *
 * @param app - Vue application
 * @param pinia - pinia instance
 */
function registerPiniaDevtools(app, pinia) {
    (0,esm/* setupDevtoolsPlugin */.$q)({
        id: 'dev.esm.pinia',
        label: 'Pinia 🍍',
        logo: 'https://pinia.vuejs.org/logo.svg',
        packageName: 'pinia',
        homepage: 'https://pinia.vuejs.org',
        componentStateTypes,
        app,
    }, (api) => {
        if (typeof api.now !== 'function') {
            toastMessage('You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.');
        }
        api.addTimelineLayer({
            id: MUTATIONS_LAYER_ID,
            label: `Pinia 🍍`,
            color: 0xe5df88,
        });
        api.addInspector({
            id: INSPECTOR_ID,
            label: 'Pinia 🍍',
            icon: 'storage',
            treeFilterPlaceholder: 'Search stores',
            actions: [
                {
                    icon: 'content_copy',
                    action: () => {
                        actionGlobalCopyState(pinia);
                    },
                    tooltip: 'Serialize and copy the state',
                },
                {
                    icon: 'content_paste',
                    action: async () => {
                        await actionGlobalPasteState(pinia);
                        api.sendInspectorTree(INSPECTOR_ID);
                        api.sendInspectorState(INSPECTOR_ID);
                    },
                    tooltip: 'Replace the state with the content of your clipboard',
                },
                {
                    icon: 'save',
                    action: () => {
                        actionGlobalSaveState(pinia);
                    },
                    tooltip: 'Save the state as a JSON file',
                },
                {
                    icon: 'folder_open',
                    action: async () => {
                        await actionGlobalOpenStateFile(pinia);
                        api.sendInspectorTree(INSPECTOR_ID);
                        api.sendInspectorState(INSPECTOR_ID);
                    },
                    tooltip: 'Import the state from a JSON file',
                },
            ],
            nodeActions: [
                {
                    icon: 'restore',
                    tooltip: 'Reset the state (with "$reset")',
                    action: (nodeId) => {
                        const store = pinia._s.get(nodeId);
                        if (!store) {
                            toastMessage(`Cannot reset "${nodeId}" store because it wasn't found.`, 'warn');
                        }
                        else if (typeof store.$reset !== 'function') {
                            toastMessage(`Cannot reset "${nodeId}" store because it doesn't have a "$reset" method implemented.`, 'warn');
                        }
                        else {
                            store.$reset();
                            toastMessage(`Store "${nodeId}" reset.`);
                        }
                    },
                },
            ],
        });
        api.on.inspectComponent((payload, ctx) => {
            const proxy = (payload.componentInstance &&
                payload.componentInstance.proxy);
            if (proxy && proxy._pStores) {
                const piniaStores = payload.componentInstance.proxy._pStores;
                Object.values(piniaStores).forEach((store) => {
                    payload.instanceData.state.push({
                        type: getStoreType(store.$id),
                        key: 'state',
                        editable: true,
                        value: store._isOptionsAPI
                            ? {
                                _custom: {
                                    value: (0,reactivity_esm_bundler/* toRaw */.ux)(store.$state),
                                    actions: [
                                        {
                                            icon: 'restore',
                                            tooltip: 'Reset the state of this store',
                                            action: () => store.$reset(),
                                        },
                                    ],
                                },
                            }
                            : // NOTE: workaround to unwrap transferred refs
                                Object.keys(store.$state).reduce((state, key) => {
                                    state[key] = store.$state[key];
                                    return state;
                                }, {}),
                    });
                    if (store._getters && store._getters.length) {
                        payload.instanceData.state.push({
                            type: getStoreType(store.$id),
                            key: 'getters',
                            editable: false,
                            value: store._getters.reduce((getters, key) => {
                                try {
                                    getters[key] = store[key];
                                }
                                catch (error) {
                                    // @ts-expect-error: we just want to show it in devtools
                                    getters[key] = error;
                                }
                                return getters;
                            }, {}),
                        });
                    }
                });
            }
        });
        api.on.getInspectorTree((payload) => {
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                let stores = [pinia];
                stores = stores.concat(Array.from(pinia._s.values()));
                payload.rootNodes = (payload.filter
                    ? stores.filter((store) => '$id' in store
                        ? store.$id
                            .toLowerCase()
                            .includes(payload.filter.toLowerCase())
                        : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase()))
                    : stores).map(formatStoreForInspectorTree);
            }
        });
        api.on.getInspectorState((payload) => {
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                const inspectedStore = payload.nodeId === PINIA_ROOT_ID
                    ? pinia
                    : pinia._s.get(payload.nodeId);
                if (!inspectedStore) {
                    // this could be the selected store restored for a different project
                    // so it's better not to say anything here
                    return;
                }
                if (inspectedStore) {
                    payload.state = formatStoreForInspectorState(inspectedStore);
                }
            }
        });
        api.on.editInspectorState((payload, ctx) => {
            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
                const inspectedStore = payload.nodeId === PINIA_ROOT_ID
                    ? pinia
                    : pinia._s.get(payload.nodeId);
                if (!inspectedStore) {
                    return toastMessage(`store "${payload.nodeId}" not found`, 'error');
                }
                const { path } = payload;
                if (!isPinia(inspectedStore)) {
                    // access only the state
                    if (path.length !== 1 ||
                        !inspectedStore._customProperties.has(path[0]) ||
                        path[0] in inspectedStore.$state) {
                        path.unshift('$state');
                    }
                }
                else {
                    // Root access, we can omit the `.value` because the devtools API does it for us
                    path.unshift('state');
                }
                isTimelineActive = false;
                payload.set(inspectedStore, path, payload.state.value);
                isTimelineActive = true;
            }
        });
        api.on.editComponentState((payload) => {
            if (payload.type.startsWith('🍍')) {
                const storeId = payload.type.replace(/^🍍\s*/, '');
                const store = pinia._s.get(storeId);
                if (!store) {
                    return toastMessage(`store "${storeId}" not found`, 'error');
                }
                const { path } = payload;
                if (path[0] !== 'state') {
                    return toastMessage(`Invalid path for store "${storeId}":\n${path}\nOnly state can be modified.`);
                }
                // rewrite the first entry to be able to directly set the state as
                // well as any other path
                path[0] = '$state';
                isTimelineActive = false;
                payload.set(store, path, payload.state.value);
                isTimelineActive = true;
            }
        });
    });
}
function addStoreToDevtools(app, store) {
    if (!componentStateTypes.includes(getStoreType(store.$id))) {
        componentStateTypes.push(getStoreType(store.$id));
    }
    (0,esm/* setupDevtoolsPlugin */.$q)({
        id: 'dev.esm.pinia',
        label: 'Pinia 🍍',
        logo: 'https://pinia.vuejs.org/logo.svg',
        packageName: 'pinia',
        homepage: 'https://pinia.vuejs.org',
        componentStateTypes,
        app,
        settings: {
            logStoreChanges: {
                label: 'Notify about new/deleted stores',
                type: 'boolean',
                defaultValue: true,
            },
            // useEmojis: {
            //   label: 'Use emojis in messages ⚡️',
            //   type: 'boolean',
            //   defaultValue: true,
            // },
        },
    }, (api) => {
        // gracefully handle errors
        const now = typeof api.now === 'function' ? api.now.bind(api) : Date.now;
        store.$onAction(({ after, onError, name, args }) => {
            const groupId = runningActionId++;
            api.addTimelineEvent({
                layerId: MUTATIONS_LAYER_ID,
                event: {
                    time: now(),
                    title: '🛫 ' + name,
                    subtitle: 'start',
                    data: {
                        store: formatDisplay(store.$id),
                        action: formatDisplay(name),
                        args,
                    },
                    groupId,
                },
            });
            after((result) => {
                activeAction = undefined;
                api.addTimelineEvent({
                    layerId: MUTATIONS_LAYER_ID,
                    event: {
                        time: now(),
                        title: '🛬 ' + name,
                        subtitle: 'end',
                        data: {
                            store: formatDisplay(store.$id),
                            action: formatDisplay(name),
                            args,
                            result,
                        },
                        groupId,
                    },
                });
            });
            onError((error) => {
                activeAction = undefined;
                api.addTimelineEvent({
                    layerId: MUTATIONS_LAYER_ID,
                    event: {
                        time: now(),
                        logType: 'error',
                        title: '💥 ' + name,
                        subtitle: 'end',
                        data: {
                            store: formatDisplay(store.$id),
                            action: formatDisplay(name),
                            args,
                            error,
                        },
                        groupId,
                    },
                });
            });
        }, true);
        store._customProperties.forEach((name) => {
            (0,runtime_core_esm_bundler/* watch */.wB)(() => (0,reactivity_esm_bundler/* unref */.R1)(store[name]), (newValue, oldValue) => {
                api.notifyComponentUpdate();
                api.sendInspectorState(INSPECTOR_ID);
                if (isTimelineActive) {
                    api.addTimelineEvent({
                        layerId: MUTATIONS_LAYER_ID,
                        event: {
                            time: now(),
                            title: 'Change',
                            subtitle: name,
                            data: {
                                newValue,
                                oldValue,
                            },
                            groupId: activeAction,
                        },
                    });
                }
            }, { deep: true });
        });
        store.$subscribe(({ events, type }, state) => {
            api.notifyComponentUpdate();
            api.sendInspectorState(INSPECTOR_ID);
            if (!isTimelineActive)
                return;
            // rootStore.state[store.id] = state
            const eventData = {
                time: now(),
                title: formatMutationType(type),
                data: assign$1({ store: formatDisplay(store.$id) }, formatEventData(events)),
                groupId: activeAction,
            };
            if (type === MutationType.patchFunction) {
                eventData.subtitle = '⤵️';
            }
            else if (type === MutationType.patchObject) {
                eventData.subtitle = '🧩';
            }
            else if (events && !Array.isArray(events)) {
                eventData.subtitle = events.type;
            }
            if (events) {
                eventData.data['rawEvent(s)'] = {
                    _custom: {
                        display: 'DebuggerEvent',
                        type: 'object',
                        tooltip: 'raw DebuggerEvent[]',
                        value: events,
                    },
                };
            }
            api.addTimelineEvent({
                layerId: MUTATIONS_LAYER_ID,
                event: eventData,
            });
        }, { detached: true, flush: 'sync' });
        const hotUpdate = store._hotUpdate;
        store._hotUpdate = (0,reactivity_esm_bundler/* markRaw */.IG)((newStore) => {
            hotUpdate(newStore);
            api.addTimelineEvent({
                layerId: MUTATIONS_LAYER_ID,
                event: {
                    time: now(),
                    title: '🔥 ' + store.$id,
                    subtitle: 'HMR update',
                    data: {
                        store: formatDisplay(store.$id),
                        info: formatDisplay(`HMR update`),
                    },
                },
            });
            // update the devtools too
            api.notifyComponentUpdate();
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
        });
        const { $dispose } = store;
        store.$dispose = () => {
            $dispose();
            api.notifyComponentUpdate();
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
            api.getSettings().logStoreChanges &&
                toastMessage(`Disposed "${store.$id}" store 🗑`);
        };
        // trigger an update so it can display new registered stores
        api.notifyComponentUpdate();
        api.sendInspectorTree(INSPECTOR_ID);
        api.sendInspectorState(INSPECTOR_ID);
        api.getSettings().logStoreChanges &&
            toastMessage(`"${store.$id}" store installed 🆕`);
    });
}
let runningActionId = 0;
let activeAction;
/**
 * Patches a store to enable action grouping in devtools by wrapping the store with a Proxy that is passed as the
 * context of all actions, allowing us to set `runningAction` on each access and effectively associating any state
 * mutation to the action.
 *
 * @param store - store to patch
 * @param actionNames - list of actionst to patch
 */
function patchActionForGrouping(store, actionNames, wrapWithProxy) {
    // original actions of the store as they are given by pinia. We are going to override them
    const actions = actionNames.reduce((storeActions, actionName) => {
        // use toRaw to avoid tracking #541
        storeActions[actionName] = (0,reactivity_esm_bundler/* toRaw */.ux)(store)[actionName];
        return storeActions;
    }, {});
    for (const actionName in actions) {
        store[actionName] = function () {
            // the running action id is incremented in a before action hook
            const _actionId = runningActionId;
            const trackedStore = wrapWithProxy
                ? new Proxy(store, {
                    get(...args) {
                        activeAction = _actionId;
                        return Reflect.get(...args);
                    },
                    set(...args) {
                        activeAction = _actionId;
                        return Reflect.set(...args);
                    },
                })
                : store;
            // For Setup Stores we need https://github.com/tc39/proposal-async-context
            activeAction = _actionId;
            const retValue = actions[actionName].apply(trackedStore, arguments);
            // this is safer as async actions in Setup Stores would associate mutations done outside of the action
            activeAction = undefined;
            return retValue;
        };
    }
}
/**
 * pinia.use(devtoolsPlugin)
 */
function devtoolsPlugin({ app, store, options }) {
    // HMR module
    if (store.$id.startsWith('__hot:')) {
        return;
    }
    // detect option api vs setup api
    store._isOptionsAPI = !!options.state;
    patchActionForGrouping(store, Object.keys(options.actions), store._isOptionsAPI);
    // Upgrade the HMR to also update the new actions
    const originalHotUpdate = store._hotUpdate;
    (0,reactivity_esm_bundler/* toRaw */.ux)(store)._hotUpdate = function (newStore) {
        originalHotUpdate.apply(this, arguments);
        patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions), !!store._isOptionsAPI);
    };
    addStoreToDevtools(app, 
    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?
    store);
}

/**
 * Creates a Pinia instance to be used by the application
 */
function createPinia() {
    const scope = (0,reactivity_esm_bundler/* effectScope */.uY)(true);
    // NOTE: here we could check the window object for a state and directly set it
    // if there is anything like it with Vue 3 SSR
    const state = scope.run(() => (0,reactivity_esm_bundler/* ref */.KR)({}));
    let _p = [];
    // plugins added before calling app.use(pinia)
    let toBeInstalled = [];
    const pinia = (0,reactivity_esm_bundler/* markRaw */.IG)({
        install(app) {
            // this allows calling useStore() outside of a component setup after
            // installing pinia's plugin
            setActivePinia(pinia);
            if (!lib_isVue2) {
                pinia._a = app;
                app.provide(piniaSymbol, pinia);
                app.config.globalProperties.$pinia = pinia;
                /* istanbul ignore else */
                if (USE_DEVTOOLS) {
                    registerPiniaDevtools(app, pinia);
                }
                toBeInstalled.forEach((plugin) => _p.push(plugin));
                toBeInstalled = [];
            }
        },
        use(plugin) {
            if (!this._a && !lib_isVue2) {
                toBeInstalled.push(plugin);
            }
            else {
                _p.push(plugin);
            }
            return this;
        },
        _p,
        // it's actually undefined here
        // @ts-expect-error
        _a: null,
        _e: scope,
        _s: new Map(),
        state,
    });
    // pinia devtools rely on dev only features so they cannot be forced unless
    // the dev build of Vue is used. Avoid old browsers like IE11.
    if (USE_DEVTOOLS && typeof Proxy !== 'undefined') {
        pinia.use(devtoolsPlugin);
    }
    return pinia;
}

/**
 * Checks if a function is a `StoreDefinition`.
 *
 * @param fn - object to test
 * @returns true if `fn` is a StoreDefinition
 */
const isUseStore = (fn) => {
    return typeof fn === 'function' && typeof fn.$id === 'string';
};
/**
 * Mutates in place `newState` with `oldState` to _hot update_ it. It will
 * remove any key not existing in `newState` and recursively merge plain
 * objects.
 *
 * @param newState - new state object to be patched
 * @param oldState - old state that should be used to patch newState
 * @returns - newState
 */
function patchObject(newState, oldState) {
    // no need to go through symbols because they cannot be serialized anyway
    for (const key in oldState) {
        const subPatch = oldState[key];
        // skip the whole sub tree
        if (!(key in newState)) {
            continue;
        }
        const targetValue = newState[key];
        if (isPlainObject(targetValue) &&
            isPlainObject(subPatch) &&
            !isRef(subPatch) &&
            !isReactive(subPatch)) {
            newState[key] = patchObject(targetValue, subPatch);
        }
        else {
            // objects are either a bit more complex (e.g. refs) or primitives, so we
            // just set the whole thing
            if (isVue2) {
                set(newState, key, subPatch);
            }
            else {
                newState[key] = subPatch;
            }
        }
    }
    return newState;
}
/**
 * Creates an _accept_ function to pass to `import.meta.hot` in Vite applications.
 *
 * @example
 * ```js
 * const useUser = defineStore(...)
 * if (import.meta.hot) {
 *   import.meta.hot.accept(acceptHMRUpdate(useUser, import.meta.hot))
 * }
 * ```
 *
 * @param initialUseStore - return of the defineStore to hot update
 * @param hot - `import.meta.hot`
 */
function acceptHMRUpdate(initialUseStore, hot) {
    // strip as much as possible from iife.prod
    if (true) {
        return () => { };
    }
    return (newModule) => {
        const pinia = hot.data.pinia || initialUseStore._pinia;
        if (!pinia) {
            // this store is still not used
            return;
        }
        // preserve the pinia instance across loads
        hot.data.pinia = pinia;
        // console.log('got data', newStore)
        for (const exportName in newModule) {
            const useStore = newModule[exportName];
            // console.log('checking for', exportName)
            if (isUseStore(useStore) && pinia._s.has(useStore.$id)) {
                // console.log('Accepting update for', useStore.$id)
                const id = useStore.$id;
                if (id !== initialUseStore.$id) {
                    console.warn(`The id of the store changed from "${initialUseStore.$id}" to "${id}". Reloading.`);
                    // return import.meta.hot.invalidate()
                    return hot.invalidate();
                }
                const existingStore = pinia._s.get(id);
                if (!existingStore) {
                    console.log(`[Pinia]: skipping hmr because store doesn't exist yet`);
                    return;
                }
                useStore(pinia, existingStore);
            }
        }
    };
}

const noop = () => { };
function addSubscription(subscriptions, callback, detached, onCleanup = noop) {
    subscriptions.push(callback);
    const removeSubscription = () => {
        const idx = subscriptions.indexOf(callback);
        if (idx > -1) {
            subscriptions.splice(idx, 1);
            onCleanup();
        }
    };
    if (!detached && (0,reactivity_esm_bundler/* getCurrentScope */.o5)()) {
        (0,reactivity_esm_bundler/* onScopeDispose */.jr)(removeSubscription);
    }
    return removeSubscription;
}
function triggerSubscriptions(subscriptions, ...args) {
    subscriptions.slice().forEach((callback) => {
        callback(...args);
    });
}

const fallbackRunWithContext = (fn) => fn();
function mergeReactiveObjects(target, patchToApply) {
    // Handle Map instances
    if (target instanceof Map && patchToApply instanceof Map) {
        patchToApply.forEach((value, key) => target.set(key, value));
    }
    // Handle Set instances
    if (target instanceof Set && patchToApply instanceof Set) {
        patchToApply.forEach(target.add, target);
    }
    // no need to go through symbols because they cannot be serialized anyway
    for (const key in patchToApply) {
        if (!patchToApply.hasOwnProperty(key))
            continue;
        const subPatch = patchToApply[key];
        const targetValue = target[key];
        if (isPlainObject(targetValue) &&
            isPlainObject(subPatch) &&
            target.hasOwnProperty(key) &&
            !(0,reactivity_esm_bundler/* isRef */.i9)(subPatch) &&
            !(0,reactivity_esm_bundler/* isReactive */.g8)(subPatch)) {
            // NOTE: here I wanted to warn about inconsistent types but it's not possible because in setup stores one might
            // start the value of a property as a certain type e.g. a Map, and then for some reason, during SSR, change that
            // to `undefined`. When trying to hydrate, we want to override the Map with `undefined`.
            target[key] = mergeReactiveObjects(targetValue, subPatch);
        }
        else {
            // @ts-expect-error: subPatch is a valid value
            target[key] = subPatch;
        }
    }
    return target;
}
const skipHydrateSymbol = ( false)
    ? 0
    : /* istanbul ignore next */ Symbol();
const skipHydrateMap = /*#__PURE__*/ new WeakMap();
/**
 * Tells Pinia to skip the hydration process of a given object. This is useful in setup stores (only) when you return a
 * stateful object in the store but it isn't really state. e.g. returning a router instance in a setup store.
 *
 * @param obj - target object
 * @returns obj
 */
function skipHydrate(obj) {
    return isVue2
        ? // in @vue/composition-api, the refs are sealed so defineProperty doesn't work...
            /* istanbul ignore next */ skipHydrateMap.set(obj, 1) && obj
        : Object.defineProperty(obj, skipHydrateSymbol, {});
}
/**
 * Returns whether a value should be hydrated
 *
 * @param obj - target variable
 * @returns true if `obj` should be hydrated
 */
function shouldHydrate(obj) {
    return lib_isVue2
        ? /* istanbul ignore next */ !skipHydrateMap.has(obj)
        : !isPlainObject(obj) || !obj.hasOwnProperty(skipHydrateSymbol);
}
const { assign: pinia_assign } = Object;
function isComputed(o) {
    return !!((0,reactivity_esm_bundler/* isRef */.i9)(o) && o.effect);
}
function createOptionsStore(id, options, pinia, hot) {
    const { state, actions, getters } = options;
    const initialState = pinia.state.value[id];
    let store;
    function setup() {
        if (!initialState && ( true || 0)) {
            /* istanbul ignore if */
            if (lib_isVue2) {
                lib_set(pinia.state.value, id, state ? state() : {});
            }
            else {
                pinia.state.value[id] = state ? state() : {};
            }
        }
        // avoid creating a state in pinia.state.value
        const localState =  false
            ? // use ref() to unwrap refs inside state TODO: check if this is still necessary
                0
            : (0,reactivity_esm_bundler/* toRefs */.QW)(pinia.state.value[id]);
        return pinia_assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {
            if (false) {}
            computedGetters[name] = (0,reactivity_esm_bundler/* markRaw */.IG)((0,runtime_core_esm_bundler/* computed */.EW)(() => {
                setActivePinia(pinia);
                // it was created just before
                const store = pinia._s.get(id);
                // allow cross using stores
                /* istanbul ignore next */
                if (lib_isVue2 && !store._r)
                    return;
                // @ts-expect-error
                // return getters![name].call(context, context)
                // TODO: avoid reading the getter while assigning with a global variable
                return getters[name].call(store, store);
            }));
            return computedGetters;
        }, {}));
    }
    store = createSetupStore(id, setup, options, pinia, hot, true);
    return store;
}
function createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {
    let scope;
    const optionsForPlugin = pinia_assign({ actions: {} }, options);
    /* istanbul ignore if */
    if (false) {}
    // watcher options for $subscribe
    const $subscribeOptions = {
        deep: true,
        // flush: 'post',
    };
    /* istanbul ignore else */
    if (false) {}
    // internal state
    let isListening; // set to true at the end
    let isSyncListening; // set to true at the end
    let subscriptions = [];
    let actionSubscriptions = [];
    let debuggerEvents;
    const initialState = pinia.state.value[$id];
    // avoid setting the state for option stores if it is set
    // by the setup
    if (!isOptionsStore && !initialState && ( true || 0)) {
        /* istanbul ignore if */
        if (lib_isVue2) {
            lib_set(pinia.state.value, $id, {});
        }
        else {
            pinia.state.value[$id] = {};
        }
    }
    const hotState = (0,reactivity_esm_bundler/* ref */.KR)({});
    // avoid triggering too many listeners
    // https://github.com/vuejs/pinia/issues/1129
    let activeListener;
    function $patch(partialStateOrMutator) {
        let subscriptionMutation;
        isListening = isSyncListening = false;
        // reset the debugger events since patches are sync
        /* istanbul ignore else */
        if ((false)) {}
        if (typeof partialStateOrMutator === 'function') {
            partialStateOrMutator(pinia.state.value[$id]);
            subscriptionMutation = {
                type: MutationType.patchFunction,
                storeId: $id,
                events: debuggerEvents,
            };
        }
        else {
            mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);
            subscriptionMutation = {
                type: MutationType.patchObject,
                payload: partialStateOrMutator,
                storeId: $id,
                events: debuggerEvents,
            };
        }
        const myListenerId = (activeListener = Symbol());
        (0,runtime_core_esm_bundler/* nextTick */.dY)().then(() => {
            if (activeListener === myListenerId) {
                isListening = true;
            }
        });
        isSyncListening = true;
        // because we paused the watcher, we need to manually call the subscriptions
        triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);
    }
    const $reset = isOptionsStore
        ? function $reset() {
            const { state } = options;
            const newState = state ? state() : {};
            // we use a patch to group all changes into one single subscription
            this.$patch(($state) => {
                pinia_assign($state, newState);
            });
        }
        : /* istanbul ignore next */
            ( false)
                ? 0
                : noop;
    function $dispose() {
        scope.stop();
        subscriptions = [];
        actionSubscriptions = [];
        pinia._s.delete($id);
    }
    /**
     * Wraps an action to handle subscriptions.
     *
     * @param name - name of the action
     * @param action - action to wrap
     * @returns a wrapped action to handle subscriptions
     */
    function wrapAction(name, action) {
        return function () {
            setActivePinia(pinia);
            const args = Array.from(arguments);
            const afterCallbackList = [];
            const onErrorCallbackList = [];
            function after(callback) {
                afterCallbackList.push(callback);
            }
            function onError(callback) {
                onErrorCallbackList.push(callback);
            }
            // @ts-expect-error
            triggerSubscriptions(actionSubscriptions, {
                args,
                name,
                store,
                after,
                onError,
            });
            let ret;
            try {
                ret = action.apply(this && this.$id === $id ? this : store, args);
                // handle sync errors
            }
            catch (error) {
                triggerSubscriptions(onErrorCallbackList, error);
                throw error;
            }
            if (ret instanceof Promise) {
                return ret
                    .then((value) => {
                    triggerSubscriptions(afterCallbackList, value);
                    return value;
                })
                    .catch((error) => {
                    triggerSubscriptions(onErrorCallbackList, error);
                    return Promise.reject(error);
                });
            }
            // trigger after callbacks
            triggerSubscriptions(afterCallbackList, ret);
            return ret;
        };
    }
    const _hmrPayload = /*#__PURE__*/ (0,reactivity_esm_bundler/* markRaw */.IG)({
        actions: {},
        getters: {},
        state: [],
        hotState,
    });
    const partialStore = {
        _p: pinia,
        // _s: scope,
        $id,
        $onAction: addSubscription.bind(null, actionSubscriptions),
        $patch,
        $reset,
        $subscribe(callback, options = {}) {
            const removeSubscription = addSubscription(subscriptions, callback, options.detached, () => stopWatcher());
            const stopWatcher = scope.run(() => (0,runtime_core_esm_bundler/* watch */.wB)(() => pinia.state.value[$id], (state) => {
                if (options.flush === 'sync' ? isSyncListening : isListening) {
                    callback({
                        storeId: $id,
                        type: MutationType.direct,
                        events: debuggerEvents,
                    }, state);
                }
            }, pinia_assign({}, $subscribeOptions, options)));
            return removeSubscription;
        },
        $dispose,
    };
    /* istanbul ignore if */
    if (lib_isVue2) {
        // start as non ready
        partialStore._r = false;
    }
    const store = (0,reactivity_esm_bundler/* reactive */.Kh)(( false) || USE_DEVTOOLS
        ? pinia_assign({
            _hmrPayload,
            _customProperties: (0,reactivity_esm_bundler/* markRaw */.IG)(new Set()), // devtools custom properties
        }, partialStore
        // must be added later
        // setupStore
        )
        : partialStore);
    // store the partial store now so the setup of stores can instantiate each other before they are finished without
    // creating infinite loops.
    pinia._s.set($id, store);
    const runWithContext = (pinia._a && pinia._a.runWithContext) || fallbackRunWithContext;
    // TODO: idea create skipSerialize that marks properties as non serializable and they are skipped
    const setupStore = runWithContext(() => pinia._e.run(() => (scope = (0,reactivity_esm_bundler/* effectScope */.uY)()).run(setup)));
    // overwrite existing actions to support $onAction
    for (const key in setupStore) {
        const prop = setupStore[key];
        if (((0,reactivity_esm_bundler/* isRef */.i9)(prop) && !isComputed(prop)) || (0,reactivity_esm_bundler/* isReactive */.g8)(prop)) {
            // mark it as a piece of state to be serialized
            if (false) {}
            else if (!isOptionsStore) {
                // in setup stores we must hydrate the state and sync pinia state tree with the refs the user just created
                if (initialState && shouldHydrate(prop)) {
                    if ((0,reactivity_esm_bundler/* isRef */.i9)(prop)) {
                        prop.value = initialState[key];
                    }
                    else {
                        // probably a reactive object, lets recursively assign
                        // @ts-expect-error: prop is unknown
                        mergeReactiveObjects(prop, initialState[key]);
                    }
                }
                // transfer the ref to the pinia state to keep everything in sync
                /* istanbul ignore if */
                if (lib_isVue2) {
                    lib_set(pinia.state.value[$id], key, prop);
                }
                else {
                    pinia.state.value[$id][key] = prop;
                }
            }
            /* istanbul ignore else */
            if ((false)) {}
            // action
        }
        else if (typeof prop === 'function') {
            // @ts-expect-error: we are overriding the function we avoid wrapping if
            const actionValue =  false ? 0 : wrapAction(key, prop);
            // this a hot module replacement store because the hotUpdate method needs
            // to do it with the right context
            /* istanbul ignore if */
            if (lib_isVue2) {
                lib_set(setupStore, key, actionValue);
            }
            else {
                // @ts-expect-error
                setupStore[key] = actionValue;
            }
            /* istanbul ignore else */
            if ((false)) {}
            // list actions so they can be used in plugins
            // @ts-expect-error
            optionsForPlugin.actions[key] = prop;
        }
        else if ((false)) {}
    }
    // add the state, getters, and action properties
    /* istanbul ignore if */
    if (lib_isVue2) {
        Object.keys(setupStore).forEach((key) => {
            lib_set(store, key, setupStore[key]);
        });
    }
    else {
        pinia_assign(store, setupStore);
        // allows retrieving reactive objects with `storeToRefs()`. Must be called after assigning to the reactive object.
        // Make `storeToRefs()` work with `reactive()` #799
        pinia_assign((0,reactivity_esm_bundler/* toRaw */.ux)(store), setupStore);
    }
    // use this instead of a computed with setter to be able to create it anywhere
    // without linking the computed lifespan to wherever the store is first
    // created.
    Object.defineProperty(store, '$state', {
        get: () => ( false ? 0 : pinia.state.value[$id]),
        set: (state) => {
            /* istanbul ignore if */
            if (false) {}
            $patch(($state) => {
                pinia_assign($state, state);
            });
        },
    });
    // add the hotUpdate before plugins to allow them to override it
    /* istanbul ignore else */
    if ((false)) {}
    if (USE_DEVTOOLS) {
        const nonEnumerable = {
            writable: true,
            configurable: true,
            // avoid warning on devtools trying to display this property
            enumerable: false,
        };
        ['_p', '_hmrPayload', '_getters', '_customProperties'].forEach((p) => {
            Object.defineProperty(store, p, pinia_assign({ value: store[p] }, nonEnumerable));
        });
    }
    /* istanbul ignore if */
    if (lib_isVue2) {
        // mark the store as ready before plugins
        store._r = true;
    }
    // apply all plugins
    pinia._p.forEach((extender) => {
        /* istanbul ignore else */
        if (USE_DEVTOOLS) {
            const extensions = scope.run(() => extender({
                store,
                app: pinia._a,
                pinia,
                options: optionsForPlugin,
            }));
            Object.keys(extensions || {}).forEach((key) => store._customProperties.add(key));
            pinia_assign(store, extensions);
        }
        else {
            pinia_assign(store, scope.run(() => extender({
                store,
                app: pinia._a,
                pinia,
                options: optionsForPlugin,
            })));
        }
    });
    if (false) {}
    // only apply hydrate to option stores with an initial state in pinia
    if (initialState &&
        isOptionsStore &&
        options.hydrate) {
        options.hydrate(store.$state, initialState);
    }
    isListening = true;
    isSyncListening = true;
    return store;
}
function defineStore(
// TODO: add proper types from above
idOrOptions, setup, setupOptions) {
    let id;
    let options;
    const isSetupStore = typeof setup === 'function';
    if (typeof idOrOptions === 'string') {
        id = idOrOptions;
        // the option store setup will contain the actual options in this case
        options = isSetupStore ? setupOptions : setup;
    }
    else {
        options = idOrOptions;
        id = idOrOptions.id;
        if (false) {}
    }
    function useStore(pinia, hot) {
        const hasContext = (0,runtime_core_esm_bundler/* hasInjectionContext */.PS)();
        pinia =
            // in test mode, ignore the argument provided as we can always retrieve a
            // pinia instance with getActivePinia()
            ( false ? 0 : pinia) ||
                (hasContext ? (0,runtime_core_esm_bundler/* inject */.WQ)(piniaSymbol, null) : null);
        if (pinia)
            setActivePinia(pinia);
        if (false) {}
        pinia = activePinia;
        if (!pinia._s.has(id)) {
            // creating the store registers it in `pinia._s`
            if (isSetupStore) {
                createSetupStore(id, setup, options, pinia);
            }
            else {
                createOptionsStore(id, options, pinia);
            }
            /* istanbul ignore else */
            if ((false)) {}
        }
        const store = pinia._s.get(id);
        if (false) {}
        if (false) {}
        // StoreGeneric cannot be casted towards Store
        return store;
    }
    useStore.$id = id;
    return useStore;
}

let mapStoreSuffix = 'Store';
/**
 * Changes the suffix added by `mapStores()`. Can be set to an empty string.
 * Defaults to `"Store"`. Make sure to extend the MapStoresCustomization
 * interface if you are using TypeScript.
 *
 * @param suffix - new suffix
 */
function setMapStoreSuffix(suffix // could be 'Store' but that would be annoying for JS
) {
    mapStoreSuffix = suffix;
}
/**
 * Allows using stores without the composition API (`setup()`) by generating an
 * object to be spread in the `computed` field of a component. It accepts a list
 * of store definitions.
 *
 * @example
 * ```js
 * export default {
 *   computed: {
 *     // other computed properties
 *     ...mapStores(useUserStore, useCartStore)
 *   },
 *
 *   created() {
 *     this.userStore // store with id "user"
 *     this.cartStore // store with id "cart"
 *   }
 * }
 * ```
 *
 * @param stores - list of stores to map to an object
 */
function mapStores(...stores) {
    if (false) {}
    return stores.reduce((reduced, useStore) => {
        // @ts-expect-error: $id is added by defineStore
        reduced[useStore.$id + mapStoreSuffix] = function () {
            return useStore(this.$pinia);
        };
        return reduced;
    }, {});
}
/**
 * Allows using state and getters from one store without using the composition
 * API (`setup()`) by generating an object to be spread in the `computed` field
 * of a component.
 *
 * @param useStore - store to map from
 * @param keysOrMapper - array or object
 */
function mapState(useStore, keysOrMapper) {
    return Array.isArray(keysOrMapper)
        ? keysOrMapper.reduce((reduced, key) => {
            reduced[key] = function () {
                return useStore(this.$pinia)[key];
            };
            return reduced;
        }, {})
        : Object.keys(keysOrMapper).reduce((reduced, key) => {
            // @ts-expect-error
            reduced[key] = function () {
                const store = useStore(this.$pinia);
                const storeKey = keysOrMapper[key];
                // for some reason TS is unable to infer the type of storeKey to be a
                // function
                return typeof storeKey === 'function'
                    ? storeKey.call(this, store)
                    : store[storeKey];
            };
            return reduced;
        }, {});
}
/**
 * Alias for `mapState()`. You should use `mapState()` instead.
 * @deprecated use `mapState()` instead.
 */
const mapGetters = (/* unused pure expression or super */ null && (mapState));
/**
 * Allows directly using actions from your store without using the composition
 * API (`setup()`) by generating an object to be spread in the `methods` field
 * of a component.
 *
 * @param useStore - store to map from
 * @param keysOrMapper - array or object
 */
function mapActions(useStore, keysOrMapper) {
    return Array.isArray(keysOrMapper)
        ? keysOrMapper.reduce((reduced, key) => {
            // @ts-expect-error
            reduced[key] = function (...args) {
                return useStore(this.$pinia)[key](...args);
            };
            return reduced;
        }, {})
        : Object.keys(keysOrMapper).reduce((reduced, key) => {
            // @ts-expect-error
            reduced[key] = function (...args) {
                return useStore(this.$pinia)[keysOrMapper[key]](...args);
            };
            return reduced;
        }, {});
}
/**
 * Allows using state and getters from one store without using the composition
 * API (`setup()`) by generating an object to be spread in the `computed` field
 * of a component.
 *
 * @param useStore - store to map from
 * @param keysOrMapper - array or object
 */
function mapWritableState(useStore, keysOrMapper) {
    return Array.isArray(keysOrMapper)
        ? keysOrMapper.reduce((reduced, key) => {
            // @ts-ignore
            reduced[key] = {
                get() {
                    return useStore(this.$pinia)[key];
                },
                set(value) {
                    // it's easier to type it here as any
                    return (useStore(this.$pinia)[key] = value);
                },
            };
            return reduced;
        }, {})
        : Object.keys(keysOrMapper).reduce((reduced, key) => {
            // @ts-ignore
            reduced[key] = {
                get() {
                    return useStore(this.$pinia)[keysOrMapper[key]];
                },
                set(value) {
                    // it's easier to type it here as any
                    return (useStore(this.$pinia)[keysOrMapper[key]] = value);
                },
            };
            return reduced;
        }, {});
}

/**
 * Creates an object of references with all the state, getters, and plugin-added
 * state properties of the store. Similar to `toRefs()` but specifically
 * designed for Pinia stores so methods and non reactive properties are
 * completely ignored.
 *
 * @param store - store to extract the refs from
 */
function storeToRefs(store) {
    // See https://github.com/vuejs/pinia/issues/852
    // It's easier to just use toRefs() even if it includes more stuff
    if (isVue2) {
        // @ts-expect-error: toRefs include methods and others
        return toRefs(store);
    }
    else {
        store = toRaw(store);
        const refs = {};
        for (const key in store) {
            const value = store[key];
            if (isRef(value) || isReactive(value)) {
                // @ts-expect-error: the key is state or getter
                refs[key] =
                    // ---
                    toRef(store, key);
            }
        }
        return refs;
    }
}

/**
 * Vue 2 Plugin that must be installed for pinia to work. Note **you don't need
 * this plugin if you are using Nuxt.js**. Use the `buildModule` instead:
 * https://pinia.vuejs.org/ssr/nuxt.html.
 *
 * @example
 * ```js
 * import Vue from 'vue'
 * import { PiniaVuePlugin, createPinia } from 'pinia'
 *
 * Vue.use(PiniaVuePlugin)
 * const pinia = createPinia()
 *
 * new Vue({
 *   el: '#app',
 *   // ...
 *   pinia,
 * })
 * ```
 *
 * @param _Vue - `Vue` imported from 'vue'.
 */
const PiniaVuePlugin = function (_Vue) {
    // Equivalent of
    // app.config.globalProperties.$pinia = pinia
    _Vue.mixin({
        beforeCreate() {
            const options = this.$options;
            if (options.pinia) {
                const pinia = options.pinia;
                // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/main/src/apis/inject.ts#L31
                /* istanbul ignore else */
                if (!this._provided) {
                    const provideCache = {};
                    Object.defineProperty(this, '_provided', {
                        get: () => provideCache,
                        set: (v) => Object.assign(provideCache, v),
                    });
                }
                this._provided[piniaSymbol] = pinia;
                // propagate the pinia instance in an SSR friendly way
                // avoid adding it to nuxt twice
                /* istanbul ignore else */
                if (!this.$pinia) {
                    this.$pinia = pinia;
                }
                pinia._a = this;
                if (IS_CLIENT) {
                    // this allows calling useStore() outside of a component setup after
                    // installing pinia's plugin
                    setActivePinia(pinia);
                }
                if (USE_DEVTOOLS) {
                    registerPiniaDevtools(pinia._a, pinia);
                }
            }
            else if (!this.$pinia && options.parent && options.parent.$pinia) {
                this.$pinia = options.parent.$pinia;
            }
        },
        destroyed() {
            delete this._pStores;
        },
    });
};




/***/ }),

/***/ 455:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LA: () => (/* binding */ createWebHistory),
/* harmony export */   aE: () => (/* binding */ createRouter),
/* harmony export */   lq: () => (/* binding */ useRoute),
/* harmony export */   rd: () => (/* binding */ useRouter)
/* harmony export */ });
/* unused harmony exports NavigationFailureType, RouterLink, RouterView, START_LOCATION, createMemoryHistory, createRouterMatcher, createWebHashHistory, isNavigationFailure, loadRouteLocation, matchedRouteKey, onBeforeRouteLeave, onBeforeRouteUpdate, parseQuery, routeLocationKey, routerKey, routerViewLocationKey, stringifyQuery, useLink, viewDepthKey */
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8734);
/* harmony import */ var _vue_devtools_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2461);
/*!
  * vue-router v4.4.0
  * (c) 2024 Eduardo San Martin Morote
  * @license MIT
  */



const isBrowser = typeof document !== 'undefined';

function isESModule(obj) {
    return obj.__esModule || obj[Symbol.toStringTag] === 'Module';
}
const assign = Object.assign;
function applyToParams(fn, params) {
    const newParams = {};
    for (const key in params) {
        const value = params[key];
        newParams[key] = isArray(value)
            ? value.map(fn)
            : fn(value);
    }
    return newParams;
}
const noop = () => { };
/**
 * Typesafe alternative to Array.isArray
 * https://github.com/microsoft/TypeScript/pull/48228
 */
const isArray = Array.isArray;

function warn(msg) {
    // avoid using ...args as it breaks in older Edge builds
    const args = Array.from(arguments).slice(1);
    console.warn.apply(console, ['[Vue Router warn]: ' + msg].concat(args));
}

/**
 * Encoding Rules (␣ = Space)
 * - Path: ␣ " < > # ? { }
 * - Query: ␣ " < > # & =
 * - Hash: ␣ " < > `
 *
 * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)
 * defines some extra characters to be encoded. Most browsers do not encode them
 * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to
 * also encode `!'()*`. Leaving un-encoded only ASCII alphanumeric(`a-zA-Z0-9`)
 * plus `-._~`. This extra safety should be applied to query by patching the
 * string returned by encodeURIComponent encodeURI also encodes `[\]^`. `\`
 * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a `\`
 * into a `/` if directly typed in. The _backtick_ (`````) should also be
 * encoded everywhere because some browsers like FF encode it when directly
 * written while others don't. Safari and IE don't encode ``"<>{}``` in hash.
 */
// const EXTRA_RESERVED_RE = /[!'()*]/g
// const encodeReservedReplacer = (c: string) => '%' + c.charCodeAt(0).toString(16)
const HASH_RE = /#/g; // %23
const AMPERSAND_RE = /&/g; // %26
const SLASH_RE = /\//g; // %2F
const EQUAL_RE = /=/g; // %3D
const IM_RE = /\?/g; // %3F
const PLUS_RE = /\+/g; // %2B
/**
 * NOTE: It's not clear to me if we should encode the + symbol in queries, it
 * seems to be less flexible than not doing so and I can't find out the legacy
 * systems requiring this for regular requests like text/html. In the standard,
 * the encoding of the plus character is only mentioned for
 * application/x-www-form-urlencoded
 * (https://url.spec.whatwg.org/#urlencoded-parsing) and most browsers seems lo
 * leave the plus character as is in queries. To be more flexible, we allow the
 * plus character on the query, but it can also be manually encoded by the user.
 *
 * Resources:
 * - https://url.spec.whatwg.org/#urlencoded-parsing
 * - https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20
 */
const ENC_BRACKET_OPEN_RE = /%5B/g; // [
const ENC_BRACKET_CLOSE_RE = /%5D/g; // ]
const ENC_CARET_RE = /%5E/g; // ^
const ENC_BACKTICK_RE = /%60/g; // `
const ENC_CURLY_OPEN_RE = /%7B/g; // {
const ENC_PIPE_RE = /%7C/g; // |
const ENC_CURLY_CLOSE_RE = /%7D/g; // }
const ENC_SPACE_RE = /%20/g; // }
/**
 * Encode characters that need to be encoded on the path, search and hash
 * sections of the URL.
 *
 * @internal
 * @param text - string to encode
 * @returns encoded string
 */
function commonEncode(text) {
    return encodeURI('' + text)
        .replace(ENC_PIPE_RE, '|')
        .replace(ENC_BRACKET_OPEN_RE, '[')
        .replace(ENC_BRACKET_CLOSE_RE, ']');
}
/**
 * Encode characters that need to be encoded on the hash section of the URL.
 *
 * @param text - string to encode
 * @returns encoded string
 */
function encodeHash(text) {
    return commonEncode(text)
        .replace(ENC_CURLY_OPEN_RE, '{')
        .replace(ENC_CURLY_CLOSE_RE, '}')
        .replace(ENC_CARET_RE, '^');
}
/**
 * Encode characters that need to be encoded query values on the query
 * section of the URL.
 *
 * @param text - string to encode
 * @returns encoded string
 */
function encodeQueryValue(text) {
    return (commonEncode(text)
        // Encode the space as +, encode the + to differentiate it from the space
        .replace(PLUS_RE, '%2B')
        .replace(ENC_SPACE_RE, '+')
        .replace(HASH_RE, '%23')
        .replace(AMPERSAND_RE, '%26')
        .replace(ENC_BACKTICK_RE, '`')
        .replace(ENC_CURLY_OPEN_RE, '{')
        .replace(ENC_CURLY_CLOSE_RE, '}')
        .replace(ENC_CARET_RE, '^'));
}
/**
 * Like `encodeQueryValue` but also encodes the `=` character.
 *
 * @param text - string to encode
 */
function encodeQueryKey(text) {
    return encodeQueryValue(text).replace(EQUAL_RE, '%3D');
}
/**
 * Encode characters that need to be encoded on the path section of the URL.
 *
 * @param text - string to encode
 * @returns encoded string
 */
function encodePath(text) {
    return commonEncode(text).replace(HASH_RE, '%23').replace(IM_RE, '%3F');
}
/**
 * Encode characters that need to be encoded on the path section of the URL as a
 * param. This function encodes everything {@link encodePath} does plus the
 * slash (`/`) character. If `text` is `null` or `undefined`, returns an empty
 * string instead.
 *
 * @param text - string to encode
 * @returns encoded string
 */
function encodeParam(text) {
    return text == null ? '' : encodePath(text).replace(SLASH_RE, '%2F');
}
/**
 * Decode text using `decodeURIComponent`. Returns the original text if it
 * fails.
 *
 * @param text - string to decode
 * @returns decoded string
 */
function decode(text) {
    try {
        return decodeURIComponent('' + text);
    }
    catch (err) {
        ( false) && 0;
    }
    return '' + text;
}

const TRAILING_SLASH_RE = /\/$/;
const removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, '');
/**
 * Transforms a URI into a normalized history location
 *
 * @param parseQuery
 * @param location - URI to normalize
 * @param currentLocation - current absolute location. Allows resolving relative
 * paths. Must start with `/`. Defaults to `/`
 * @returns a normalized history location
 */
function parseURL(parseQuery, location, currentLocation = '/') {
    let path, query = {}, searchString = '', hash = '';
    // Could use URL and URLSearchParams but IE 11 doesn't support it
    // TODO: move to new URL()
    const hashPos = location.indexOf('#');
    let searchPos = location.indexOf('?');
    // the hash appears before the search, so it's not part of the search string
    if (hashPos < searchPos && hashPos >= 0) {
        searchPos = -1;
    }
    if (searchPos > -1) {
        path = location.slice(0, searchPos);
        searchString = location.slice(searchPos + 1, hashPos > -1 ? hashPos : location.length);
        query = parseQuery(searchString);
    }
    if (hashPos > -1) {
        path = path || location.slice(0, hashPos);
        // keep the # character
        hash = location.slice(hashPos, location.length);
    }
    // no search and no query
    path = resolveRelativePath(path != null ? path : location, currentLocation);
    // empty path means a relative query or hash `?foo=f`, `#thing`
    return {
        fullPath: path + (searchString && '?') + searchString + hash,
        path,
        query,
        hash: decode(hash),
    };
}
/**
 * Stringifies a URL object
 *
 * @param stringifyQuery
 * @param location
 */
function stringifyURL(stringifyQuery, location) {
    const query = location.query ? stringifyQuery(location.query) : '';
    return location.path + (query && '?') + query + (location.hash || '');
}
/**
 * Strips off the base from the beginning of a location.pathname in a non-case-sensitive way.
 *
 * @param pathname - location.pathname
 * @param base - base to strip off
 */
function stripBase(pathname, base) {
    // no base or base is not found at the beginning
    if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))
        return pathname;
    return pathname.slice(base.length) || '/';
}
/**
 * Checks if two RouteLocation are equal. This means that both locations are
 * pointing towards the same {@link RouteRecord} and that all `params`, `query`
 * parameters and `hash` are the same
 *
 * @param stringifyQuery - A function that takes a query object of type LocationQueryRaw and returns a string representation of it.
 * @param a - first {@link RouteLocation}
 * @param b - second {@link RouteLocation}
 */
function isSameRouteLocation(stringifyQuery, a, b) {
    const aLastIndex = a.matched.length - 1;
    const bLastIndex = b.matched.length - 1;
    return (aLastIndex > -1 &&
        aLastIndex === bLastIndex &&
        isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) &&
        isSameRouteLocationParams(a.params, b.params) &&
        stringifyQuery(a.query) === stringifyQuery(b.query) &&
        a.hash === b.hash);
}
/**
 * Check if two `RouteRecords` are equal. Takes into account aliases: they are
 * considered equal to the `RouteRecord` they are aliasing.
 *
 * @param a - first {@link RouteRecord}
 * @param b - second {@link RouteRecord}
 */
function isSameRouteRecord(a, b) {
    // since the original record has an undefined value for aliasOf
    // but all aliases point to the original record, this will always compare
    // the original record
    return (a.aliasOf || a) === (b.aliasOf || b);
}
function isSameRouteLocationParams(a, b) {
    if (Object.keys(a).length !== Object.keys(b).length)
        return false;
    for (const key in a) {
        if (!isSameRouteLocationParamsValue(a[key], b[key]))
            return false;
    }
    return true;
}
function isSameRouteLocationParamsValue(a, b) {
    return isArray(a)
        ? isEquivalentArray(a, b)
        : isArray(b)
            ? isEquivalentArray(b, a)
            : a === b;
}
/**
 * Check if two arrays are the same or if an array with one single entry is the
 * same as another primitive value. Used to check query and parameters
 *
 * @param a - array of values
 * @param b - array of values or a single value
 */
function isEquivalentArray(a, b) {
    return isArray(b)
        ? a.length === b.length && a.every((value, i) => value === b[i])
        : a.length === 1 && a[0] === b;
}
/**
 * Resolves a relative path that starts with `.`.
 *
 * @param to - path location we are resolving
 * @param from - currentLocation.path, should start with `/`
 */
function resolveRelativePath(to, from) {
    if (to.startsWith('/'))
        return to;
    if (false) {}
    if (!to)
        return from;
    const fromSegments = from.split('/');
    const toSegments = to.split('/');
    const lastToSegment = toSegments[toSegments.length - 1];
    // make . and ./ the same (../ === .., ../../ === ../..)
    // this is the same behavior as new URL()
    if (lastToSegment === '..' || lastToSegment === '.') {
        toSegments.push('');
    }
    let position = fromSegments.length - 1;
    let toPosition;
    let segment;
    for (toPosition = 0; toPosition < toSegments.length; toPosition++) {
        segment = toSegments[toPosition];
        // we stay on the same position
        if (segment === '.')
            continue;
        // go up in the from array
        if (segment === '..') {
            // we can't go below zero, but we still need to increment toPosition
            if (position > 1)
                position--;
            // continue
        }
        // we reached a non-relative path, we stop here
        else
            break;
    }
    return (fromSegments.slice(0, position).join('/') +
        '/' +
        toSegments.slice(toPosition).join('/'));
}
/**
 * Initial route location where the router is. Can be used in navigation guards
 * to differentiate the initial navigation.
 *
 * @example
 * ```js
 * import { START_LOCATION } from 'vue-router'
 *
 * router.beforeEach((to, from) => {
 *   if (from === START_LOCATION) {
 *     // initial navigation
 *   }
 * })
 * ```
 */
const START_LOCATION_NORMALIZED = {
    path: '/',
    // TODO: could we use a symbol in the future?
    name: undefined,
    params: {},
    query: {},
    hash: '',
    fullPath: '/',
    matched: [],
    meta: {},
    redirectedFrom: undefined,
};

var NavigationType;
(function (NavigationType) {
    NavigationType["pop"] = "pop";
    NavigationType["push"] = "push";
})(NavigationType || (NavigationType = {}));
var NavigationDirection;
(function (NavigationDirection) {
    NavigationDirection["back"] = "back";
    NavigationDirection["forward"] = "forward";
    NavigationDirection["unknown"] = "";
})(NavigationDirection || (NavigationDirection = {}));
/**
 * Starting location for Histories
 */
const START = '';
// Generic utils
/**
 * Normalizes a base by removing any trailing slash and reading the base tag if
 * present.
 *
 * @param base - base to normalize
 */
function normalizeBase(base) {
    if (!base) {
        if (isBrowser) {
            // respect <base> tag
            const baseEl = document.querySelector('base');
            base = (baseEl && baseEl.getAttribute('href')) || '/';
            // strip full URL origin
            base = base.replace(/^\w+:\/\/[^\/]+/, '');
        }
        else {
            base = '/';
        }
    }
    // ensure leading slash when it was removed by the regex above avoid leading
    // slash with hash because the file could be read from the disk like file://
    // and the leading slash would cause problems
    if (base[0] !== '/' && base[0] !== '#')
        base = '/' + base;
    // remove the trailing slash so all other method can just do `base + fullPath`
    // to build an href
    return removeTrailingSlash(base);
}
// remove any character before the hash
const BEFORE_HASH_RE = /^[^#]+#/;
function createHref(base, location) {
    return base.replace(BEFORE_HASH_RE, '#') + location;
}

function getElementPosition(el, offset) {
    const docRect = document.documentElement.getBoundingClientRect();
    const elRect = el.getBoundingClientRect();
    return {
        behavior: offset.behavior,
        left: elRect.left - docRect.left - (offset.left || 0),
        top: elRect.top - docRect.top - (offset.top || 0),
    };
}
const computeScrollPosition = () => ({
    left: window.scrollX,
    top: window.scrollY,
});
function scrollToPosition(position) {
    let scrollToOptions;
    if ('el' in position) {
        const positionEl = position.el;
        const isIdSelector = typeof positionEl === 'string' && positionEl.startsWith('#');
        /**
         * `id`s can accept pretty much any characters, including CSS combinators
         * like `>` or `~`. It's still possible to retrieve elements using
         * `document.getElementById('~')` but it needs to be escaped when using
         * `document.querySelector('#\\~')` for it to be valid. The only
         * requirements for `id`s are them to be unique on the page and to not be
         * empty (`id=""`). Because of that, when passing an id selector, it should
         * be properly escaped for it to work with `querySelector`. We could check
         * for the id selector to be simple (no CSS combinators `+ >~`) but that
         * would make things inconsistent since they are valid characters for an
         * `id` but would need to be escaped when using `querySelector`, breaking
         * their usage and ending up in no selector returned. Selectors need to be
         * escaped:
         *
         * - `#1-thing` becomes `#\31 -thing`
         * - `#with~symbols` becomes `#with\\~symbols`
         *
         * - More information about  the topic can be found at
         *   https://mathiasbynens.be/notes/html5-id-class.
         * - Practical example: https://mathiasbynens.be/demo/html5-id
         */
        if (false) {}
        const el = typeof positionEl === 'string'
            ? isIdSelector
                ? document.getElementById(positionEl.slice(1))
                : document.querySelector(positionEl)
            : positionEl;
        if (!el) {
            ( false) &&
                0;
            return;
        }
        scrollToOptions = getElementPosition(el, position);
    }
    else {
        scrollToOptions = position;
    }
    if ('scrollBehavior' in document.documentElement.style)
        window.scrollTo(scrollToOptions);
    else {
        window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.scrollX, scrollToOptions.top != null ? scrollToOptions.top : window.scrollY);
    }
}
function getScrollKey(path, delta) {
    const position = history.state ? history.state.position - delta : -1;
    return position + path;
}
const scrollPositions = new Map();
function saveScrollPosition(key, scrollPosition) {
    scrollPositions.set(key, scrollPosition);
}
function getSavedScrollPosition(key) {
    const scroll = scrollPositions.get(key);
    // consume it so it's not used again
    scrollPositions.delete(key);
    return scroll;
}
// TODO: RFC about how to save scroll position
/**
 * ScrollBehavior instance used by the router to compute and restore the scroll
 * position when navigating.
 */
// export interface ScrollHandler<ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry> {
//   // returns a scroll position that can be saved in history
//   compute(): ScrollPositionEntry
//   // can take an extended ScrollPositionEntry
//   scroll(position: ScrollPosition): void
// }
// export const scrollHandler: ScrollHandler<ScrollPosition> = {
//   compute: computeScroll,
//   scroll: scrollToPosition,
// }

let createBaseLocation = () => location.protocol + '//' + location.host;
/**
 * Creates a normalized history location from a window.location object
 * @param base - The base path
 * @param location - The window.location object
 */
function createCurrentLocation(base, location) {
    const { pathname, search, hash } = location;
    // allows hash bases like #, /#, #/, #!, #!/, /#!/, or even /folder#end
    const hashPos = base.indexOf('#');
    if (hashPos > -1) {
        let slicePos = hash.includes(base.slice(hashPos))
            ? base.slice(hashPos).length
            : 1;
        let pathFromHash = hash.slice(slicePos);
        // prepend the starting slash to hash so the url starts with /#
        if (pathFromHash[0] !== '/')
            pathFromHash = '/' + pathFromHash;
        return stripBase(pathFromHash, '');
    }
    const path = stripBase(pathname, base);
    return path + search + hash;
}
function useHistoryListeners(base, historyState, currentLocation, replace) {
    let listeners = [];
    let teardowns = [];
    // TODO: should it be a stack? a Dict. Check if the popstate listener
    // can trigger twice
    let pauseState = null;
    const popStateHandler = ({ state, }) => {
        const to = createCurrentLocation(base, location);
        const from = currentLocation.value;
        const fromState = historyState.value;
        let delta = 0;
        if (state) {
            currentLocation.value = to;
            historyState.value = state;
            // ignore the popstate and reset the pauseState
            if (pauseState && pauseState === from) {
                pauseState = null;
                return;
            }
            delta = fromState ? state.position - fromState.position : 0;
        }
        else {
            replace(to);
        }
        // Here we could also revert the navigation by calling history.go(-delta)
        // this listener will have to be adapted to not trigger again and to wait for the url
        // to be updated before triggering the listeners. Some kind of validation function would also
        // need to be passed to the listeners so the navigation can be accepted
        // call all listeners
        listeners.forEach(listener => {
            listener(currentLocation.value, from, {
                delta,
                type: NavigationType.pop,
                direction: delta
                    ? delta > 0
                        ? NavigationDirection.forward
                        : NavigationDirection.back
                    : NavigationDirection.unknown,
            });
        });
    };
    function pauseListeners() {
        pauseState = currentLocation.value;
    }
    function listen(callback) {
        // set up the listener and prepare teardown callbacks
        listeners.push(callback);
        const teardown = () => {
            const index = listeners.indexOf(callback);
            if (index > -1)
                listeners.splice(index, 1);
        };
        teardowns.push(teardown);
        return teardown;
    }
    function beforeUnloadListener() {
        const { history } = window;
        if (!history.state)
            return;
        history.replaceState(assign({}, history.state, { scroll: computeScrollPosition() }), '');
    }
    function destroy() {
        for (const teardown of teardowns)
            teardown();
        teardowns = [];
        window.removeEventListener('popstate', popStateHandler);
        window.removeEventListener('beforeunload', beforeUnloadListener);
    }
    // set up the listeners and prepare teardown callbacks
    window.addEventListener('popstate', popStateHandler);
    // TODO: could we use 'pagehide' or 'visibilitychange' instead?
    // https://developer.chrome.com/blog/page-lifecycle-api/
    window.addEventListener('beforeunload', beforeUnloadListener, {
        passive: true,
    });
    return {
        pauseListeners,
        listen,
        destroy,
    };
}
/**
 * Creates a state object
 */
function buildState(back, current, forward, replaced = false, computeScroll = false) {
    return {
        back,
        current,
        forward,
        replaced,
        position: window.history.length,
        scroll: computeScroll ? computeScrollPosition() : null,
    };
}
function useHistoryStateNavigation(base) {
    const { history, location } = window;
    // private variables
    const currentLocation = {
        value: createCurrentLocation(base, location),
    };
    const historyState = { value: history.state };
    // build current history entry as this is a fresh navigation
    if (!historyState.value) {
        changeLocation(currentLocation.value, {
            back: null,
            current: currentLocation.value,
            forward: null,
            // the length is off by one, we need to decrease it
            position: history.length - 1,
            replaced: true,
            // don't add a scroll as the user may have an anchor, and we want
            // scrollBehavior to be triggered without a saved position
            scroll: null,
        }, true);
    }
    function changeLocation(to, state, replace) {
        /**
         * if a base tag is provided, and we are on a normal domain, we have to
         * respect the provided `base` attribute because pushState() will use it and
         * potentially erase anything before the `#` like at
         * https://github.com/vuejs/router/issues/685 where a base of
         * `/folder/#` but a base of `/` would erase the `/folder/` section. If
         * there is no host, the `<base>` tag makes no sense and if there isn't a
         * base tag we can just use everything after the `#`.
         */
        const hashIndex = base.indexOf('#');
        const url = hashIndex > -1
            ? (location.host && document.querySelector('base')
                ? base
                : base.slice(hashIndex)) + to
            : createBaseLocation() + base + to;
        try {
            // BROWSER QUIRK
            // NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds
            history[replace ? 'replaceState' : 'pushState'](state, '', url);
            historyState.value = state;
        }
        catch (err) {
            if ((false)) {}
            else {
                console.error(err);
            }
            // Force the navigation, this also resets the call count
            location[replace ? 'replace' : 'assign'](url);
        }
    }
    function replace(to, data) {
        const state = assign({}, history.state, buildState(historyState.value.back, 
        // keep back and forward entries but override current position
        to, historyState.value.forward, true), data, { position: historyState.value.position });
        changeLocation(to, state, true);
        currentLocation.value = to;
    }
    function push(to, data) {
        // Add to current entry the information of where we are going
        // as well as saving the current position
        const currentState = assign({}, 
        // use current history state to gracefully handle a wrong call to
        // history.replaceState
        // https://github.com/vuejs/router/issues/366
        historyState.value, history.state, {
            forward: to,
            scroll: computeScrollPosition(),
        });
        if (false) {}
        changeLocation(currentState.current, currentState, true);
        const state = assign({}, buildState(currentLocation.value, to, null), { position: currentState.position + 1 }, data);
        changeLocation(to, state, false);
        currentLocation.value = to;
    }
    return {
        location: currentLocation,
        state: historyState,
        push,
        replace,
    };
}
/**
 * Creates an HTML5 history. Most common history for single page applications.
 *
 * @param base -
 */
function createWebHistory(base) {
    base = normalizeBase(base);
    const historyNavigation = useHistoryStateNavigation(base);
    const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);
    function go(delta, triggerListeners = true) {
        if (!triggerListeners)
            historyListeners.pauseListeners();
        history.go(delta);
    }
    const routerHistory = assign({
        // it's overridden right after
        location: '',
        base,
        go,
        createHref: createHref.bind(null, base),
    }, historyNavigation, historyListeners);
    Object.defineProperty(routerHistory, 'location', {
        enumerable: true,
        get: () => historyNavigation.location.value,
    });
    Object.defineProperty(routerHistory, 'state', {
        enumerable: true,
        get: () => historyNavigation.state.value,
    });
    return routerHistory;
}

/**
 * Creates an in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.
 * It's up to the user to replace that location with the starter location by either calling `router.push` or `router.replace`.
 *
 * @param base - Base applied to all urls, defaults to '/'
 * @returns a history object that can be passed to the router constructor
 */
function createMemoryHistory(base = '') {
    let listeners = [];
    let queue = [START];
    let position = 0;
    base = normalizeBase(base);
    function setLocation(location) {
        position++;
        if (position !== queue.length) {
            // we are in the middle, we remove everything from here in the queue
            queue.splice(position);
        }
        queue.push(location);
    }
    function triggerListeners(to, from, { direction, delta }) {
        const info = {
            direction,
            delta,
            type: NavigationType.pop,
        };
        for (const callback of listeners) {
            callback(to, from, info);
        }
    }
    const routerHistory = {
        // rewritten by Object.defineProperty
        location: START,
        // TODO: should be kept in queue
        state: {},
        base,
        createHref: createHref.bind(null, base),
        replace(to) {
            // remove current entry and decrement position
            queue.splice(position--, 1);
            setLocation(to);
        },
        push(to, data) {
            setLocation(to);
        },
        listen(callback) {
            listeners.push(callback);
            return () => {
                const index = listeners.indexOf(callback);
                if (index > -1)
                    listeners.splice(index, 1);
            };
        },
        destroy() {
            listeners = [];
            queue = [START];
            position = 0;
        },
        go(delta, shouldTrigger = true) {
            const from = this.location;
            const direction = 
            // we are considering delta === 0 going forward, but in abstract mode
            // using 0 for the delta doesn't make sense like it does in html5 where
            // it reloads the page
            delta < 0 ? NavigationDirection.back : NavigationDirection.forward;
            position = Math.max(0, Math.min(position + delta, queue.length - 1));
            if (shouldTrigger) {
                triggerListeners(this.location, from, {
                    direction,
                    delta,
                });
            }
        },
    };
    Object.defineProperty(routerHistory, 'location', {
        enumerable: true,
        get: () => queue[position],
    });
    return routerHistory;
}

/**
 * Creates a hash history. Useful for web applications with no host (e.g. `file://`) or when configuring a server to
 * handle any URL is not possible.
 *
 * @param base - optional base to provide. Defaults to `location.pathname + location.search` If there is a `<base>` tag
 * in the `head`, its value will be ignored in favor of this parameter **but note it affects all the history.pushState()
 * calls**, meaning that if you use a `<base>` tag, it's `href` value **has to match this parameter** (ignoring anything
 * after the `#`).
 *
 * @example
 * ```js
 * // at https://example.com/folder
 * createWebHashHistory() // gives a url of `https://example.com/folder#`
 * createWebHashHistory('/folder/') // gives a url of `https://example.com/folder/#`
 * // if the `#` is provided in the base, it won't be added by `createWebHashHistory`
 * createWebHashHistory('/folder/#/app/') // gives a url of `https://example.com/folder/#/app/`
 * // you should avoid doing this because it changes the original url and breaks copying urls
 * createWebHashHistory('/other-folder/') // gives a url of `https://example.com/other-folder/#`
 *
 * // at file:///usr/etc/folder/index.html
 * // for locations with no `host`, the base is ignored
 * createWebHashHistory('/iAmIgnored') // gives a url of `file:///usr/etc/folder/index.html#`
 * ```
 */
function createWebHashHistory(base) {
    // Make sure this implementation is fine in terms of encoding, specially for IE11
    // for `file://`, directly use the pathname and ignore the base
    // location.pathname contains an initial `/` even at the root: `https://example.com`
    base = location.host ? base || location.pathname + location.search : '';
    // allow the user to provide a `#` in the middle: `/base/#/app`
    if (!base.includes('#'))
        base += '#';
    if (false) {}
    return createWebHistory(base);
}

function isRouteLocation(route) {
    return typeof route === 'string' || (route && typeof route === 'object');
}
function isRouteName(name) {
    return typeof name === 'string' || typeof name === 'symbol';
}

const NavigationFailureSymbol = Symbol(( false) ? 0 : '');
/**
 * Enumeration with all possible types for navigation failures. Can be passed to
 * {@link isNavigationFailure} to check for specific failures.
 */
var NavigationFailureType;
(function (NavigationFailureType) {
    /**
     * An aborted navigation is a navigation that failed because a navigation
     * guard returned `false` or called `next(false)`
     */
    NavigationFailureType[NavigationFailureType["aborted"] = 4] = "aborted";
    /**
     * A cancelled navigation is a navigation that failed because a more recent
     * navigation finished started (not necessarily finished).
     */
    NavigationFailureType[NavigationFailureType["cancelled"] = 8] = "cancelled";
    /**
     * A duplicated navigation is a navigation that failed because it was
     * initiated while already being at the exact same location.
     */
    NavigationFailureType[NavigationFailureType["duplicated"] = 16] = "duplicated";
})(NavigationFailureType || (NavigationFailureType = {}));
// DEV only debug messages
const ErrorTypeMessages = {
    [1 /* ErrorTypes.MATCHER_NOT_FOUND */]({ location, currentLocation }) {
        return `No match for\n ${JSON.stringify(location)}${currentLocation
            ? '\nwhile being at\n' + JSON.stringify(currentLocation)
            : ''}`;
    },
    [2 /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */]({ from, to, }) {
        return `Redirected from "${from.fullPath}" to "${stringifyRoute(to)}" via a navigation guard.`;
    },
    [4 /* ErrorTypes.NAVIGATION_ABORTED */]({ from, to }) {
        return `Navigation aborted from "${from.fullPath}" to "${to.fullPath}" via a navigation guard.`;
    },
    [8 /* ErrorTypes.NAVIGATION_CANCELLED */]({ from, to }) {
        return `Navigation cancelled from "${from.fullPath}" to "${to.fullPath}" with a new navigation.`;
    },
    [16 /* ErrorTypes.NAVIGATION_DUPLICATED */]({ from, to }) {
        return `Avoided redundant navigation to current location: "${from.fullPath}".`;
    },
};
/**
 * Creates a typed NavigationFailure object.
 * @internal
 * @param type - NavigationFailureType
 * @param params - { from, to }
 */
function createRouterError(type, params) {
    // keep full error messages in cjs versions
    if (false) {}
    else {
        return assign(new Error(), {
            type,
            [NavigationFailureSymbol]: true,
        }, params);
    }
}
function isNavigationFailure(error, type) {
    return (error instanceof Error &&
        NavigationFailureSymbol in error &&
        (type == null || !!(error.type & type)));
}
const propertiesToLog = ['params', 'query', 'hash'];
function stringifyRoute(to) {
    if (typeof to === 'string')
        return to;
    if (to.path != null)
        return to.path;
    const location = {};
    for (const key of propertiesToLog) {
        if (key in to)
            location[key] = to[key];
    }
    return JSON.stringify(location, null, 2);
}

// default pattern for a param: non-greedy everything but /
const BASE_PARAM_PATTERN = '[^/]+?';
const BASE_PATH_PARSER_OPTIONS = {
    sensitive: false,
    strict: false,
    start: true,
    end: true,
};
// Special Regex characters that must be escaped in static tokens
const REGEX_CHARS_RE = /[.+*?^${}()[\]/\\]/g;
/**
 * Creates a path parser from an array of Segments (a segment is an array of Tokens)
 *
 * @param segments - array of segments returned by tokenizePath
 * @param extraOptions - optional options for the regexp
 * @returns a PathParser
 */
function tokensToParser(segments, extraOptions) {
    const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);
    // the amount of scores is the same as the length of segments except for the root segment "/"
    const score = [];
    // the regexp as a string
    let pattern = options.start ? '^' : '';
    // extracted keys
    const keys = [];
    for (const segment of segments) {
        // the root segment needs special treatment
        const segmentScores = segment.length ? [] : [90 /* PathScore.Root */];
        // allow trailing slash
        if (options.strict && !segment.length)
            pattern += '/';
        for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {
            const token = segment[tokenIndex];
            // resets the score if we are inside a sub-segment /:a-other-:b
            let subSegmentScore = 40 /* PathScore.Segment */ +
                (options.sensitive ? 0.25 /* PathScore.BonusCaseSensitive */ : 0);
            if (token.type === 0 /* TokenType.Static */) {
                // prepend the slash if we are starting a new segment
                if (!tokenIndex)
                    pattern += '/';
                pattern += token.value.replace(REGEX_CHARS_RE, '\\$&');
                subSegmentScore += 40 /* PathScore.Static */;
            }
            else if (token.type === 1 /* TokenType.Param */) {
                const { value, repeatable, optional, regexp } = token;
                keys.push({
                    name: value,
                    repeatable,
                    optional,
                });
                const re = regexp ? regexp : BASE_PARAM_PATTERN;
                // the user provided a custom regexp /:id(\\d+)
                if (re !== BASE_PARAM_PATTERN) {
                    subSegmentScore += 10 /* PathScore.BonusCustomRegExp */;
                    // make sure the regexp is valid before using it
                    try {
                        new RegExp(`(${re})`);
                    }
                    catch (err) {
                        throw new Error(`Invalid custom RegExp for param "${value}" (${re}): ` +
                            err.message);
                    }
                }
                // when we repeat we must take care of the repeating leading slash
                let subPattern = repeatable ? `((?:${re})(?:/(?:${re}))*)` : `(${re})`;
                // prepend the slash if we are starting a new segment
                if (!tokenIndex)
                    subPattern =
                        // avoid an optional / if there are more segments e.g. /:p?-static
                        // or /:p?-:p2
                        optional && segment.length < 2
                            ? `(?:/${subPattern})`
                            : '/' + subPattern;
                if (optional)
                    subPattern += '?';
                pattern += subPattern;
                subSegmentScore += 20 /* PathScore.Dynamic */;
                if (optional)
                    subSegmentScore += -8 /* PathScore.BonusOptional */;
                if (repeatable)
                    subSegmentScore += -20 /* PathScore.BonusRepeatable */;
                if (re === '.*')
                    subSegmentScore += -50 /* PathScore.BonusWildcard */;
            }
            segmentScores.push(subSegmentScore);
        }
        // an empty array like /home/ -> [[{home}], []]
        // if (!segment.length) pattern += '/'
        score.push(segmentScores);
    }
    // only apply the strict bonus to the last score
    if (options.strict && options.end) {
        const i = score.length - 1;
        score[i][score[i].length - 1] += 0.7000000000000001 /* PathScore.BonusStrict */;
    }
    // TODO: dev only warn double trailing slash
    if (!options.strict)
        pattern += '/?';
    if (options.end)
        pattern += '$';
    // allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else
    else if (options.strict)
        pattern += '(?:/|$)';
    const re = new RegExp(pattern, options.sensitive ? '' : 'i');
    function parse(path) {
        const match = path.match(re);
        const params = {};
        if (!match)
            return null;
        for (let i = 1; i < match.length; i++) {
            const value = match[i] || '';
            const key = keys[i - 1];
            params[key.name] = value && key.repeatable ? value.split('/') : value;
        }
        return params;
    }
    function stringify(params) {
        let path = '';
        // for optional parameters to allow to be empty
        let avoidDuplicatedSlash = false;
        for (const segment of segments) {
            if (!avoidDuplicatedSlash || !path.endsWith('/'))
                path += '/';
            avoidDuplicatedSlash = false;
            for (const token of segment) {
                if (token.type === 0 /* TokenType.Static */) {
                    path += token.value;
                }
                else if (token.type === 1 /* TokenType.Param */) {
                    const { value, repeatable, optional } = token;
                    const param = value in params ? params[value] : '';
                    if (isArray(param) && !repeatable) {
                        throw new Error(`Provided param "${value}" is an array but it is not repeatable (* or + modifiers)`);
                    }
                    const text = isArray(param)
                        ? param.join('/')
                        : param;
                    if (!text) {
                        if (optional) {
                            // if we have more than one optional param like /:a?-static we don't need to care about the optional param
                            if (segment.length < 2) {
                                // remove the last slash as we could be at the end
                                if (path.endsWith('/'))
                                    path = path.slice(0, -1);
                                // do not append a slash on the next iteration
                                else
                                    avoidDuplicatedSlash = true;
                            }
                        }
                        else
                            throw new Error(`Missing required param "${value}"`);
                    }
                    path += text;
                }
            }
        }
        // avoid empty path when we have multiple optional params
        return path || '/';
    }
    return {
        re,
        score,
        keys,
        parse,
        stringify,
    };
}
/**
 * Compares an array of numbers as used in PathParser.score and returns a
 * number. This function can be used to `sort` an array
 *
 * @param a - first array of numbers
 * @param b - second array of numbers
 * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b
 * should be sorted first
 */
function compareScoreArray(a, b) {
    let i = 0;
    while (i < a.length && i < b.length) {
        const diff = b[i] - a[i];
        // only keep going if diff === 0
        if (diff)
            return diff;
        i++;
    }
    // if the last subsegment was Static, the shorter segments should be sorted first
    // otherwise sort the longest segment first
    if (a.length < b.length) {
        return a.length === 1 && a[0] === 40 /* PathScore.Static */ + 40 /* PathScore.Segment */
            ? -1
            : 1;
    }
    else if (a.length > b.length) {
        return b.length === 1 && b[0] === 40 /* PathScore.Static */ + 40 /* PathScore.Segment */
            ? 1
            : -1;
    }
    return 0;
}
/**
 * Compare function that can be used with `sort` to sort an array of PathParser
 *
 * @param a - first PathParser
 * @param b - second PathParser
 * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b
 */
function comparePathParserScore(a, b) {
    let i = 0;
    const aScore = a.score;
    const bScore = b.score;
    while (i < aScore.length && i < bScore.length) {
        const comp = compareScoreArray(aScore[i], bScore[i]);
        // do not return if both are equal
        if (comp)
            return comp;
        i++;
    }
    if (Math.abs(bScore.length - aScore.length) === 1) {
        if (isLastScoreNegative(aScore))
            return 1;
        if (isLastScoreNegative(bScore))
            return -1;
    }
    // if a and b share the same score entries but b has more, sort b first
    return bScore.length - aScore.length;
    // this is the ternary version
    // return aScore.length < bScore.length
    //   ? 1
    //   : aScore.length > bScore.length
    //   ? -1
    //   : 0
}
/**
 * This allows detecting splats at the end of a path: /home/:id(.*)*
 *
 * @param score - score to check
 * @returns true if the last entry is negative
 */
function isLastScoreNegative(score) {
    const last = score[score.length - 1];
    return score.length > 0 && last[last.length - 1] < 0;
}

const ROOT_TOKEN = {
    type: 0 /* TokenType.Static */,
    value: '',
};
const VALID_PARAM_RE = /[a-zA-Z0-9_]/;
// After some profiling, the cache seems to be unnecessary because tokenizePath
// (the slowest part of adding a route) is very fast
// const tokenCache = new Map<string, Token[][]>()
function tokenizePath(path) {
    if (!path)
        return [[]];
    if (path === '/')
        return [[ROOT_TOKEN]];
    if (!path.startsWith('/')) {
        throw new Error(( false)
            ? 0
            : `Invalid path "${path}"`);
    }
    // if (tokenCache.has(path)) return tokenCache.get(path)!
    function crash(message) {
        throw new Error(`ERR (${state})/"${buffer}": ${message}`);
    }
    let state = 0 /* TokenizerState.Static */;
    let previousState = state;
    const tokens = [];
    // the segment will always be valid because we get into the initial state
    // with the leading /
    let segment;
    function finalizeSegment() {
        if (segment)
            tokens.push(segment);
        segment = [];
    }
    // index on the path
    let i = 0;
    // char at index
    let char;
    // buffer of the value read
    let buffer = '';
    // custom regexp for a param
    let customRe = '';
    function consumeBuffer() {
        if (!buffer)
            return;
        if (state === 0 /* TokenizerState.Static */) {
            segment.push({
                type: 0 /* TokenType.Static */,
                value: buffer,
            });
        }
        else if (state === 1 /* TokenizerState.Param */ ||
            state === 2 /* TokenizerState.ParamRegExp */ ||
            state === 3 /* TokenizerState.ParamRegExpEnd */) {
            if (segment.length > 1 && (char === '*' || char === '+'))
                crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);
            segment.push({
                type: 1 /* TokenType.Param */,
                value: buffer,
                regexp: customRe,
                repeatable: char === '*' || char === '+',
                optional: char === '*' || char === '?',
            });
        }
        else {
            crash('Invalid state to consume buffer');
        }
        buffer = '';
    }
    function addCharToBuffer() {
        buffer += char;
    }
    while (i < path.length) {
        char = path[i++];
        if (char === '\\' && state !== 2 /* TokenizerState.ParamRegExp */) {
            previousState = state;
            state = 4 /* TokenizerState.EscapeNext */;
            continue;
        }
        switch (state) {
            case 0 /* TokenizerState.Static */:
                if (char === '/') {
                    if (buffer) {
                        consumeBuffer();
                    }
                    finalizeSegment();
                }
                else if (char === ':') {
                    consumeBuffer();
                    state = 1 /* TokenizerState.Param */;
                }
                else {
                    addCharToBuffer();
                }
                break;
            case 4 /* TokenizerState.EscapeNext */:
                addCharToBuffer();
                state = previousState;
                break;
            case 1 /* TokenizerState.Param */:
                if (char === '(') {
                    state = 2 /* TokenizerState.ParamRegExp */;
                }
                else if (VALID_PARAM_RE.test(char)) {
                    addCharToBuffer();
                }
                else {
                    consumeBuffer();
                    state = 0 /* TokenizerState.Static */;
                    // go back one character if we were not modifying
                    if (char !== '*' && char !== '?' && char !== '+')
                        i--;
                }
                break;
            case 2 /* TokenizerState.ParamRegExp */:
                // TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)
                // it already works by escaping the closing )
                // https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#
                // is this really something people need since you can also write
                // /prefix_:p()_suffix
                if (char === ')') {
                    // handle the escaped )
                    if (customRe[customRe.length - 1] == '\\')
                        customRe = customRe.slice(0, -1) + char;
                    else
                        state = 3 /* TokenizerState.ParamRegExpEnd */;
                }
                else {
                    customRe += char;
                }
                break;
            case 3 /* TokenizerState.ParamRegExpEnd */:
                // same as finalizing a param
                consumeBuffer();
                state = 0 /* TokenizerState.Static */;
                // go back one character if we were not modifying
                if (char !== '*' && char !== '?' && char !== '+')
                    i--;
                customRe = '';
                break;
            default:
                crash('Unknown state');
                break;
        }
    }
    if (state === 2 /* TokenizerState.ParamRegExp */)
        crash(`Unfinished custom RegExp for param "${buffer}"`);
    consumeBuffer();
    finalizeSegment();
    // tokenCache.set(path, tokens)
    return tokens;
}

function createRouteRecordMatcher(record, parent, options) {
    const parser = tokensToParser(tokenizePath(record.path), options);
    // warn against params with the same name
    if ((false)) {}
    const matcher = assign(parser, {
        record,
        parent,
        // these needs to be populated by the parent
        children: [],
        alias: [],
    });
    if (parent) {
        // both are aliases or both are not aliases
        // we don't want to mix them because the order is used when
        // passing originalRecord in Matcher.addRoute
        if (!matcher.record.aliasOf === !parent.record.aliasOf)
            parent.children.push(matcher);
    }
    return matcher;
}

/**
 * Creates a Router Matcher.
 *
 * @internal
 * @param routes - array of initial routes
 * @param globalOptions - global route options
 */
function createRouterMatcher(routes, globalOptions) {
    // normalized ordered array of matchers
    const matchers = [];
    const matcherMap = new Map();
    globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);
    function getRecordMatcher(name) {
        return matcherMap.get(name);
    }
    function addRoute(record, parent, originalRecord) {
        // used later on to remove by name
        const isRootAdd = !originalRecord;
        const mainNormalizedRecord = normalizeRouteRecord(record);
        if ((false)) {}
        // we might be the child of an alias
        mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;
        const options = mergeOptions(globalOptions, record);
        // generate an array of records to correctly handle aliases
        const normalizedRecords = [
            mainNormalizedRecord,
        ];
        if ('alias' in record) {
            const aliases = typeof record.alias === 'string' ? [record.alias] : record.alias;
            for (const alias of aliases) {
                normalizedRecords.push(assign({}, mainNormalizedRecord, {
                    // this allows us to hold a copy of the `components` option
                    // so that async components cache is hold on the original record
                    components: originalRecord
                        ? originalRecord.record.components
                        : mainNormalizedRecord.components,
                    path: alias,
                    // we might be the child of an alias
                    aliasOf: originalRecord
                        ? originalRecord.record
                        : mainNormalizedRecord,
                    // the aliases are always of the same kind as the original since they
                    // are defined on the same record
                }));
            }
        }
        let matcher;
        let originalMatcher;
        for (const normalizedRecord of normalizedRecords) {
            const { path } = normalizedRecord;
            // Build up the path for nested routes if the child isn't an absolute
            // route. Only add the / delimiter if the child path isn't empty and if the
            // parent path doesn't have a trailing slash
            if (parent && path[0] !== '/') {
                const parentPath = parent.record.path;
                const connectingSlash = parentPath[parentPath.length - 1] === '/' ? '' : '/';
                normalizedRecord.path =
                    parent.record.path + (path && connectingSlash + path);
            }
            if (false) {}
            // create the object beforehand, so it can be passed to children
            matcher = createRouteRecordMatcher(normalizedRecord, parent, options);
            if (false)
                {}
            // if we are an alias we must tell the original record that we exist,
            // so we can be removed
            if (originalRecord) {
                originalRecord.alias.push(matcher);
                if ((false)) {}
            }
            else {
                // otherwise, the first record is the original and others are aliases
                originalMatcher = originalMatcher || matcher;
                if (originalMatcher !== matcher)
                    originalMatcher.alias.push(matcher);
                // remove the route if named and only for the top record (avoid in nested calls)
                // this works because the original record is the first one
                if (isRootAdd && record.name && !isAliasRecord(matcher))
                    removeRoute(record.name);
            }
            // Avoid adding a record that doesn't display anything. This allows passing through records without a component to
            // not be reached and pass through the catch all route
            if (isMatchable(matcher)) {
                insertMatcher(matcher);
            }
            if (mainNormalizedRecord.children) {
                const children = mainNormalizedRecord.children;
                for (let i = 0; i < children.length; i++) {
                    addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);
                }
            }
            // if there was no original record, then the first one was not an alias and all
            // other aliases (if any) need to reference this record when adding children
            originalRecord = originalRecord || matcher;
            // TODO: add normalized records for more flexibility
            // if (parent && isAliasRecord(originalRecord)) {
            //   parent.children.push(originalRecord)
            // }
        }
        return originalMatcher
            ? () => {
                // since other matchers are aliases, they should be removed by the original matcher
                removeRoute(originalMatcher);
            }
            : noop;
    }
    function removeRoute(matcherRef) {
        if (isRouteName(matcherRef)) {
            const matcher = matcherMap.get(matcherRef);
            if (matcher) {
                matcherMap.delete(matcherRef);
                matchers.splice(matchers.indexOf(matcher), 1);
                matcher.children.forEach(removeRoute);
                matcher.alias.forEach(removeRoute);
            }
        }
        else {
            const index = matchers.indexOf(matcherRef);
            if (index > -1) {
                matchers.splice(index, 1);
                if (matcherRef.record.name)
                    matcherMap.delete(matcherRef.record.name);
                matcherRef.children.forEach(removeRoute);
                matcherRef.alias.forEach(removeRoute);
            }
        }
    }
    function getRoutes() {
        return matchers;
    }
    function insertMatcher(matcher) {
        const index = findInsertionIndex(matcher, matchers);
        matchers.splice(index, 0, matcher);
        // only add the original record to the name map
        if (matcher.record.name && !isAliasRecord(matcher))
            matcherMap.set(matcher.record.name, matcher);
    }
    function resolve(location, currentLocation) {
        let matcher;
        let params = {};
        let path;
        let name;
        if ('name' in location && location.name) {
            matcher = matcherMap.get(location.name);
            if (!matcher)
                throw createRouterError(1 /* ErrorTypes.MATCHER_NOT_FOUND */, {
                    location,
                });
            // warn if the user is passing invalid params so they can debug it better when they get removed
            if ((false)) {}
            name = matcher.record.name;
            params = assign(
            // paramsFromLocation is a new object
            paramsFromLocation(currentLocation.params, 
            // only keep params that exist in the resolved location
            // only keep optional params coming from a parent record
            matcher.keys
                .filter(k => !k.optional)
                .concat(matcher.parent ? matcher.parent.keys.filter(k => k.optional) : [])
                .map(k => k.name)), 
            // discard any existing params in the current location that do not exist here
            // #1497 this ensures better active/exact matching
            location.params &&
                paramsFromLocation(location.params, matcher.keys.map(k => k.name)));
            // throws if cannot be stringified
            path = matcher.stringify(params);
        }
        else if (location.path != null) {
            // no need to resolve the path with the matcher as it was provided
            // this also allows the user to control the encoding
            path = location.path;
            if (false) {}
            matcher = matchers.find(m => m.re.test(path));
            // matcher should have a value after the loop
            if (matcher) {
                // we know the matcher works because we tested the regexp
                params = matcher.parse(path);
                name = matcher.record.name;
            }
            // location is a relative path
        }
        else {
            // match by name or path of current route
            matcher = currentLocation.name
                ? matcherMap.get(currentLocation.name)
                : matchers.find(m => m.re.test(currentLocation.path));
            if (!matcher)
                throw createRouterError(1 /* ErrorTypes.MATCHER_NOT_FOUND */, {
                    location,
                    currentLocation,
                });
            name = matcher.record.name;
            // since we are navigating to the same location, we don't need to pick the
            // params like when `name` is provided
            params = assign({}, currentLocation.params, location.params);
            path = matcher.stringify(params);
        }
        const matched = [];
        let parentMatcher = matcher;
        while (parentMatcher) {
            // reversed order so parents are at the beginning
            matched.unshift(parentMatcher.record);
            parentMatcher = parentMatcher.parent;
        }
        return {
            name,
            path,
            params,
            matched,
            meta: mergeMetaFields(matched),
        };
    }
    // add initial routes
    routes.forEach(route => addRoute(route));
    function clearRoutes() {
        matchers.length = 0;
        matcherMap.clear();
    }
    return {
        addRoute,
        resolve,
        removeRoute,
        clearRoutes,
        getRoutes,
        getRecordMatcher,
    };
}
function paramsFromLocation(params, keys) {
    const newParams = {};
    for (const key of keys) {
        if (key in params)
            newParams[key] = params[key];
    }
    return newParams;
}
/**
 * Normalizes a RouteRecordRaw. Creates a copy
 *
 * @param record
 * @returns the normalized version
 */
function normalizeRouteRecord(record) {
    return {
        path: record.path,
        redirect: record.redirect,
        name: record.name,
        meta: record.meta || {},
        aliasOf: undefined,
        beforeEnter: record.beforeEnter,
        props: normalizeRecordProps(record),
        children: record.children || [],
        instances: {},
        leaveGuards: new Set(),
        updateGuards: new Set(),
        enterCallbacks: {},
        components: 'components' in record
            ? record.components || null
            : record.component && { default: record.component },
    };
}
/**
 * Normalize the optional `props` in a record to always be an object similar to
 * components. Also accept a boolean for components.
 * @param record
 */
function normalizeRecordProps(record) {
    const propsObject = {};
    // props does not exist on redirect records, but we can set false directly
    const props = record.props || false;
    if ('component' in record) {
        propsObject.default = props;
    }
    else {
        // NOTE: we could also allow a function to be applied to every component.
        // Would need user feedback for use cases
        for (const name in record.components)
            propsObject[name] = typeof props === 'object' ? props[name] : props;
    }
    return propsObject;
}
/**
 * Checks if a record or any of its parent is an alias
 * @param record
 */
function isAliasRecord(record) {
    while (record) {
        if (record.record.aliasOf)
            return true;
        record = record.parent;
    }
    return false;
}
/**
 * Merge meta fields of an array of records
 *
 * @param matched - array of matched records
 */
function mergeMetaFields(matched) {
    return matched.reduce((meta, record) => assign(meta, record.meta), {});
}
function mergeOptions(defaults, partialOptions) {
    const options = {};
    for (const key in defaults) {
        options[key] = key in partialOptions ? partialOptions[key] : defaults[key];
    }
    return options;
}
function isSameParam(a, b) {
    return (a.name === b.name &&
        a.optional === b.optional &&
        a.repeatable === b.repeatable);
}
/**
 * Check if a path and its alias have the same required params
 *
 * @param a - original record
 * @param b - alias record
 */
function checkSameParams(a, b) {
    for (const key of a.keys) {
        if (!key.optional && !b.keys.find(isSameParam.bind(null, key)))
            return warn(`Alias "${b.record.path}" and the original record: "${a.record.path}" must have the exact same param named "${key.name}"`);
    }
    for (const key of b.keys) {
        if (!key.optional && !a.keys.find(isSameParam.bind(null, key)))
            return warn(`Alias "${b.record.path}" and the original record: "${a.record.path}" must have the exact same param named "${key.name}"`);
    }
}
/**
 * A route with a name and a child with an empty path without a name should warn when adding the route
 *
 * @param mainNormalizedRecord - RouteRecordNormalized
 * @param parent - RouteRecordMatcher
 */
function checkChildMissingNameWithEmptyPath(mainNormalizedRecord, parent) {
    if (parent &&
        parent.record.name &&
        !mainNormalizedRecord.name &&
        !mainNormalizedRecord.path) {
        warn(`The route named "${String(parent.record.name)}" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`);
    }
}
function checkMissingParamsInAbsolutePath(record, parent) {
    for (const key of parent.keys) {
        if (!record.keys.find(isSameParam.bind(null, key)))
            return warn(`Absolute path "${record.record.path}" must have the exact same param named "${key.name}" as its parent "${parent.record.path}".`);
    }
}
/**
 * Performs a binary search to find the correct insertion index for a new matcher.
 *
 * Matchers are primarily sorted by their score. If scores are tied then we also consider parent/child relationships,
 * with descendants coming before ancestors. If there's still a tie, new routes are inserted after existing routes.
 *
 * @param matcher - new matcher to be inserted
 * @param matchers - existing matchers
 */
function findInsertionIndex(matcher, matchers) {
    // First phase: binary search based on score
    let lower = 0;
    let upper = matchers.length;
    while (lower !== upper) {
        const mid = (lower + upper) >> 1;
        const sortOrder = comparePathParserScore(matcher, matchers[mid]);
        if (sortOrder < 0) {
            upper = mid;
        }
        else {
            lower = mid + 1;
        }
    }
    // Second phase: check for an ancestor with the same score
    const insertionAncestor = getInsertionAncestor(matcher);
    if (insertionAncestor) {
        upper = matchers.lastIndexOf(insertionAncestor, upper - 1);
        if (false) {}
    }
    return upper;
}
function getInsertionAncestor(matcher) {
    let ancestor = matcher;
    while ((ancestor = ancestor.parent)) {
        if (isMatchable(ancestor) &&
            comparePathParserScore(matcher, ancestor) === 0) {
            return ancestor;
        }
    }
    return;
}
/**
 * Checks if a matcher can be reachable. This means if it's possible to reach it as a route. For example, routes without
 * a component, or name, or redirect, are just used to group other routes.
 * @param matcher
 * @param matcher.record record of the matcher
 * @returns
 */
function isMatchable({ record }) {
    return !!(record.name ||
        (record.components && Object.keys(record.components).length) ||
        record.redirect);
}

/**
 * Transforms a queryString into a {@link LocationQuery} object. Accept both, a
 * version with the leading `?` and without Should work as URLSearchParams

 * @internal
 *
 * @param search - search string to parse
 * @returns a query object
 */
function parseQuery(search) {
    const query = {};
    // avoid creating an object with an empty key and empty value
    // because of split('&')
    if (search === '' || search === '?')
        return query;
    const hasLeadingIM = search[0] === '?';
    const searchParams = (hasLeadingIM ? search.slice(1) : search).split('&');
    for (let i = 0; i < searchParams.length; ++i) {
        // pre decode the + into space
        const searchParam = searchParams[i].replace(PLUS_RE, ' ');
        // allow the = character
        const eqPos = searchParam.indexOf('=');
        const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));
        const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));
        if (key in query) {
            // an extra variable for ts types
            let currentValue = query[key];
            if (!isArray(currentValue)) {
                currentValue = query[key] = [currentValue];
            }
            currentValue.push(value);
        }
        else {
            query[key] = value;
        }
    }
    return query;
}
/**
 * Stringifies a {@link LocationQueryRaw} object. Like `URLSearchParams`, it
 * doesn't prepend a `?`
 *
 * @internal
 *
 * @param query - query object to stringify
 * @returns string version of the query without the leading `?`
 */
function stringifyQuery(query) {
    let search = '';
    for (let key in query) {
        const value = query[key];
        key = encodeQueryKey(key);
        if (value == null) {
            // only null adds the value
            if (value !== undefined) {
                search += (search.length ? '&' : '') + key;
            }
            continue;
        }
        // keep null values
        const values = isArray(value)
            ? value.map(v => v && encodeQueryValue(v))
            : [value && encodeQueryValue(value)];
        values.forEach(value => {
            // skip undefined values in arrays as if they were not present
            // smaller code than using filter
            if (value !== undefined) {
                // only append & with non-empty search
                search += (search.length ? '&' : '') + key;
                if (value != null)
                    search += '=' + value;
            }
        });
    }
    return search;
}
/**
 * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting
 * numbers into strings, removing keys with an undefined value and replacing
 * undefined with null in arrays
 *
 * @param query - query object to normalize
 * @returns a normalized query object
 */
function normalizeQuery(query) {
    const normalizedQuery = {};
    for (const key in query) {
        const value = query[key];
        if (value !== undefined) {
            normalizedQuery[key] = isArray(value)
                ? value.map(v => (v == null ? null : '' + v))
                : value == null
                    ? value
                    : '' + value;
        }
    }
    return normalizedQuery;
}

/**
 * RouteRecord being rendered by the closest ancestor Router View. Used for
 * `onBeforeRouteUpdate` and `onBeforeRouteLeave`. rvlm stands for Router View
 * Location Matched
 *
 * @internal
 */
const matchedRouteKey = Symbol(( false) ? 0 : '');
/**
 * Allows overriding the router view depth to control which component in
 * `matched` is rendered. rvd stands for Router View Depth
 *
 * @internal
 */
const viewDepthKey = Symbol(( false) ? 0 : '');
/**
 * Allows overriding the router instance returned by `useRouter` in tests. r
 * stands for router
 *
 * @internal
 */
const routerKey = Symbol(( false) ? 0 : '');
/**
 * Allows overriding the current route returned by `useRoute` in tests. rl
 * stands for route location
 *
 * @internal
 */
const routeLocationKey = Symbol(( false) ? 0 : '');
/**
 * Allows overriding the current route used by router-view. Internally this is
 * used when the `route` prop is passed.
 *
 * @internal
 */
const routerViewLocationKey = Symbol(( false) ? 0 : '');

/**
 * Create a list of callbacks that can be reset. Used to create before and after navigation guards list
 */
function useCallbacks() {
    let handlers = [];
    function add(handler) {
        handlers.push(handler);
        return () => {
            const i = handlers.indexOf(handler);
            if (i > -1)
                handlers.splice(i, 1);
        };
    }
    function reset() {
        handlers = [];
    }
    return {
        add,
        list: () => handlers.slice(),
        reset,
    };
}

function registerGuard(record, name, guard) {
    const removeFromList = () => {
        record[name].delete(guard);
    };
    onUnmounted(removeFromList);
    onDeactivated(removeFromList);
    onActivated(() => {
        record[name].add(guard);
    });
    record[name].add(guard);
}
/**
 * Add a navigation guard that triggers whenever the component for the current
 * location is about to be left. Similar to {@link beforeRouteLeave} but can be
 * used in any component. The guard is removed when the component is unmounted.
 *
 * @param leaveGuard - {@link NavigationGuard}
 */
function onBeforeRouteLeave(leaveGuard) {
    if (false) {}
    const activeRecord = inject(matchedRouteKey, 
    // to avoid warning
    {}).value;
    if (!activeRecord) {
        ( false) &&
            0;
        return;
    }
    registerGuard(activeRecord, 'leaveGuards', leaveGuard);
}
/**
 * Add a navigation guard that triggers whenever the current location is about
 * to be updated. Similar to {@link beforeRouteUpdate} but can be used in any
 * component. The guard is removed when the component is unmounted.
 *
 * @param updateGuard - {@link NavigationGuard}
 */
function onBeforeRouteUpdate(updateGuard) {
    if (false) {}
    const activeRecord = inject(matchedRouteKey, 
    // to avoid warning
    {}).value;
    if (!activeRecord) {
        ( false) &&
            0;
        return;
    }
    registerGuard(activeRecord, 'updateGuards', updateGuard);
}
function guardToPromiseFn(guard, to, from, record, name, runWithContext = fn => fn()) {
    // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place
    const enterCallbackArray = record &&
        // name is defined if record is because of the function overload
        (record.enterCallbacks[name] = record.enterCallbacks[name] || []);
    return () => new Promise((resolve, reject) => {
        const next = (valid) => {
            if (valid === false) {
                reject(createRouterError(4 /* ErrorTypes.NAVIGATION_ABORTED */, {
                    from,
                    to,
                }));
            }
            else if (valid instanceof Error) {
                reject(valid);
            }
            else if (isRouteLocation(valid)) {
                reject(createRouterError(2 /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */, {
                    from: to,
                    to: valid,
                }));
            }
            else {
                if (enterCallbackArray &&
                    // since enterCallbackArray is truthy, both record and name also are
                    record.enterCallbacks[name] === enterCallbackArray &&
                    typeof valid === 'function') {
                    enterCallbackArray.push(valid);
                }
                resolve();
            }
        };
        // wrapping with Promise.resolve allows it to work with both async and sync guards
        const guardReturn = runWithContext(() => guard.call(record && record.instances[name], to, from, ( false) ? 0 : next));
        let guardCall = Promise.resolve(guardReturn);
        if (guard.length < 3)
            guardCall = guardCall.then(next);
        if (false) {}
        guardCall.catch(err => reject(err));
    });
}
function canOnlyBeCalledOnce(next, to, from) {
    let called = 0;
    return function () {
        if (called++ === 1)
            warn(`The "next" callback was called more than once in one navigation guard when going from "${from.fullPath}" to "${to.fullPath}". It should be called exactly one time in each navigation guard. This will fail in production.`);
        // @ts-expect-error: we put it in the original one because it's easier to check
        next._called = true;
        if (called === 1)
            next.apply(null, arguments);
    };
}
function extractComponentsGuards(matched, guardType, to, from, runWithContext = fn => fn()) {
    const guards = [];
    for (const record of matched) {
        if (false) {}
        for (const name in record.components) {
            let rawComponent = record.components[name];
            if ((false)) {}
            // skip update and leave guards if the route component is not mounted
            if (guardType !== 'beforeRouteEnter' && !record.instances[name])
                continue;
            if (isRouteComponent(rawComponent)) {
                // __vccOpts is added by vue-class-component and contain the regular options
                const options = rawComponent.__vccOpts || rawComponent;
                const guard = options[guardType];
                guard &&
                    guards.push(guardToPromiseFn(guard, to, from, record, name, runWithContext));
            }
            else {
                // start requesting the chunk already
                let componentPromise = rawComponent();
                if (false) {}
                guards.push(() => componentPromise.then(resolved => {
                    if (!resolved)
                        return Promise.reject(new Error(`Couldn't resolve component "${name}" at "${record.path}"`));
                    const resolvedComponent = isESModule(resolved)
                        ? resolved.default
                        : resolved;
                    // replace the function with the resolved component
                    // cannot be null or undefined because we went into the for loop
                    record.components[name] = resolvedComponent;
                    // __vccOpts is added by vue-class-component and contain the regular options
                    const options = resolvedComponent.__vccOpts || resolvedComponent;
                    const guard = options[guardType];
                    return (guard &&
                        guardToPromiseFn(guard, to, from, record, name, runWithContext)());
                }));
            }
        }
    }
    return guards;
}
/**
 * Allows differentiating lazy components from functional components and vue-class-component
 * @internal
 *
 * @param component
 */
function isRouteComponent(component) {
    return (typeof component === 'object' ||
        'displayName' in component ||
        'props' in component ||
        '__vccOpts' in component);
}
/**
 * Ensures a route is loaded, so it can be passed as o prop to `<RouterView>`.
 *
 * @param route - resolved route to load
 */
function loadRouteLocation(route) {
    return route.matched.every(record => record.redirect)
        ? Promise.reject(new Error('Cannot load a route that redirects.'))
        : Promise.all(route.matched.map(record => record.components &&
            Promise.all(Object.keys(record.components).reduce((promises, name) => {
                const rawComponent = record.components[name];
                if (typeof rawComponent === 'function' &&
                    !('displayName' in rawComponent)) {
                    promises.push(rawComponent().then(resolved => {
                        if (!resolved)
                            return Promise.reject(new Error(`Couldn't resolve component "${name}" at "${record.path}". Ensure you passed a function that returns a promise.`));
                        const resolvedComponent = isESModule(resolved)
                            ? resolved.default
                            : resolved;
                        // replace the function with the resolved component
                        // cannot be null or undefined because we went into the for loop
                        record.components[name] = resolvedComponent;
                        return;
                    }));
                }
                return promises;
            }, [])))).then(() => route);
}

// TODO: we could allow currentRoute as a prop to expose `isActive` and
// `isExactActive` behavior should go through an RFC
/**
 * Returns the internal behavior of a {@link RouterLink} without the rendering part.
 *
 * @param props - a `to` location and an optional `replace` flag
 */
function useLink(props) {
    const router = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .inject */ .WQ)(routerKey);
    const currentRoute = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .inject */ .WQ)(routeLocationKey);
    let hasPrevious = false;
    let previousTo = null;
    const route = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => {
        const to = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .unref */ .R1)(props.to);
        if (false) {}
        return router.resolve(to);
    });
    const activeRecordIndex = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => {
        const { matched } = route.value;
        const { length } = matched;
        const routeMatched = matched[length - 1];
        const currentMatched = currentRoute.matched;
        if (!routeMatched || !currentMatched.length)
            return -1;
        const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
        if (index > -1)
            return index;
        // possible parent record
        const parentRecordPath = getOriginalPath(matched[length - 2]);
        return (
        // we are dealing with nested routes
        length > 1 &&
            // if the parent and matched route have the same path, this link is
            // referring to the empty child. Or we currently are on a different
            // child of the same parent
            getOriginalPath(routeMatched) === parentRecordPath &&
            // avoid comparing the child with its parent
            currentMatched[currentMatched.length - 1].path !== parentRecordPath
            ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2]))
            : index);
    });
    const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => activeRecordIndex.value > -1 &&
        includesParams(currentRoute.params, route.value.params));
    const isExactActive = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => activeRecordIndex.value > -1 &&
        activeRecordIndex.value === currentRoute.matched.length - 1 &&
        isSameRouteLocationParams(currentRoute.params, route.value.params));
    function navigate(e = {}) {
        if (guardEvent(e)) {
            return router[(0,vue__WEBPACK_IMPORTED_MODULE_1__/* .unref */ .R1)(props.replace) ? 'replace' : 'push']((0,vue__WEBPACK_IMPORTED_MODULE_1__/* .unref */ .R1)(props.to)
            // avoid uncaught errors are they are logged anyway
            ).catch(noop);
        }
        return Promise.resolve();
    }
    // devtools only
    if (( true) && isBrowser) {
        const instance = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .getCurrentInstance */ .nI)();
        if (instance) {
            const linkContextDevtools = {
                route: route.value,
                isActive: isActive.value,
                isExactActive: isExactActive.value,
                error: null,
            };
            // @ts-expect-error: this is internal
            instance.__vrl_devtools = instance.__vrl_devtools || [];
            // @ts-expect-error: this is internal
            instance.__vrl_devtools.push(linkContextDevtools);
            (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .watchEffect */ .nT)(() => {
                linkContextDevtools.route = route.value;
                linkContextDevtools.isActive = isActive.value;
                linkContextDevtools.isExactActive = isExactActive.value;
                linkContextDevtools.error = isRouteLocation((0,vue__WEBPACK_IMPORTED_MODULE_1__/* .unref */ .R1)(props.to))
                    ? null
                    : 'Invalid "to" value';
            }, { flush: 'post' });
        }
    }
    /**
     * NOTE: update {@link _RouterLinkI}'s `$slots` type when updating this
     */
    return {
        route,
        href: (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => route.value.href),
        isActive,
        isExactActive,
        navigate,
    };
}
const RouterLinkImpl = /*#__PURE__*/ (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .defineComponent */ .pM)({
    name: 'RouterLink',
    compatConfig: { MODE: 3 },
    props: {
        to: {
            type: [String, Object],
            required: true,
        },
        replace: Boolean,
        activeClass: String,
        // inactiveClass: String,
        exactActiveClass: String,
        custom: Boolean,
        ariaCurrentValue: {
            type: String,
            default: 'page',
        },
    },
    useLink,
    setup(props, { slots }) {
        const link = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .reactive */ .Kh)(useLink(props));
        const { options } = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .inject */ .WQ)(routerKey);
        const elClass = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => ({
            [getLinkClass(props.activeClass, options.linkActiveClass, 'router-link-active')]: link.isActive,
            // [getLinkClass(
            //   props.inactiveClass,
            //   options.linkInactiveClass,
            //   'router-link-inactive'
            // )]: !link.isExactActive,
            [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, 'router-link-exact-active')]: link.isExactActive,
        }));
        return () => {
            const children = slots.default && slots.default(link);
            return props.custom
                ? children
                : (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('a', {
                    'aria-current': link.isExactActive
                        ? props.ariaCurrentValue
                        : null,
                    href: link.href,
                    // this would override user added attrs but Vue will still add
                    // the listener, so we end up triggering both
                    onClick: link.navigate,
                    class: elClass.value,
                }, children);
        };
    },
});
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
/**
 * Component to render a link that triggers a navigation on click.
 */
const RouterLink = RouterLinkImpl;
function guardEvent(e) {
    // don't redirect with control keys
    if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)
        return;
    // don't redirect when preventDefault called
    if (e.defaultPrevented)
        return;
    // don't redirect on right click
    if (e.button !== undefined && e.button !== 0)
        return;
    // don't redirect if `target="_blank"`
    // @ts-expect-error getAttribute does exist
    if (e.currentTarget && e.currentTarget.getAttribute) {
        // @ts-expect-error getAttribute exists
        const target = e.currentTarget.getAttribute('target');
        if (/\b_blank\b/i.test(target))
            return;
    }
    // this may be a Weex event which doesn't have this method
    if (e.preventDefault)
        e.preventDefault();
    return true;
}
function includesParams(outer, inner) {
    for (const key in inner) {
        const innerValue = inner[key];
        const outerValue = outer[key];
        if (typeof innerValue === 'string') {
            if (innerValue !== outerValue)
                return false;
        }
        else {
            if (!isArray(outerValue) ||
                outerValue.length !== innerValue.length ||
                innerValue.some((value, i) => value !== outerValue[i]))
                return false;
        }
    }
    return true;
}
/**
 * Get the original path value of a record by following its aliasOf
 * @param record
 */
function getOriginalPath(record) {
    return record ? (record.aliasOf ? record.aliasOf.path : record.path) : '';
}
/**
 * Utility class to get the active class based on defaults.
 * @param propClass
 * @param globalClass
 * @param defaultClass
 */
const getLinkClass = (propClass, globalClass, defaultClass) => propClass != null
    ? propClass
    : globalClass != null
        ? globalClass
        : defaultClass;

const RouterViewImpl = /*#__PURE__*/ (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .defineComponent */ .pM)({
    name: 'RouterView',
    // #674 we manually inherit them
    inheritAttrs: false,
    props: {
        name: {
            type: String,
            default: 'default',
        },
        route: Object,
    },
    // Better compat for @vue/compat users
    // https://github.com/vuejs/router/issues/1315
    compatConfig: { MODE: 3 },
    setup(props, { attrs, slots }) {
        ( false) && 0;
        const injectedRoute = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .inject */ .WQ)(routerViewLocationKey);
        const routeToDisplay = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => props.route || injectedRoute.value);
        const injectedDepth = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .inject */ .WQ)(viewDepthKey, 0);
        // The depth changes based on empty components option, which allows passthrough routes e.g. routes with children
        // that are used to reuse the `path` property
        const depth = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => {
            let initialDepth = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .unref */ .R1)(injectedDepth);
            const { matched } = routeToDisplay.value;
            let matchedRoute;
            while ((matchedRoute = matched[initialDepth]) &&
                !matchedRoute.components) {
                initialDepth++;
            }
            return initialDepth;
        });
        const matchedRouteRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => routeToDisplay.value.matched[depth.value]);
        (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .provide */ .Gt)(viewDepthKey, (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => depth.value + 1));
        (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .provide */ .Gt)(matchedRouteKey, matchedRouteRef);
        (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .provide */ .Gt)(routerViewLocationKey, routeToDisplay);
        const viewRef = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .ref */ .KR)();
        // watch at the same time the component instance, the route record we are
        // rendering, and the name
        (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .watch */ .wB)(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to, name], [oldInstance, from, oldName]) => {
            // copy reused instances
            if (to) {
                // this will update the instance for new instances as well as reused
                // instances when navigating to a new route
                to.instances[name] = instance;
                // the component instance is reused for a different route or name, so
                // we copy any saved update or leave guards. With async setup, the
                // mounting component will mount before the matchedRoute changes,
                // making instance === oldInstance, so we check if guards have been
                // added before. This works because we remove guards when
                // unmounting/deactivating components
                if (from && from !== to && instance && instance === oldInstance) {
                    if (!to.leaveGuards.size) {
                        to.leaveGuards = from.leaveGuards;
                    }
                    if (!to.updateGuards.size) {
                        to.updateGuards = from.updateGuards;
                    }
                }
            }
            // trigger beforeRouteEnter next callbacks
            if (instance &&
                to &&
                // if there is no instance but to and from are the same this might be
                // the first visit
                (!from || !isSameRouteRecord(to, from) || !oldInstance)) {
                (to.enterCallbacks[name] || []).forEach(callback => callback(instance));
            }
        }, { flush: 'post' });
        return () => {
            const route = routeToDisplay.value;
            // we need the value at the time we render because when we unmount, we
            // navigated to a different location so the value is different
            const currentName = props.name;
            const matchedRoute = matchedRouteRef.value;
            const ViewComponent = matchedRoute && matchedRoute.components[currentName];
            if (!ViewComponent) {
                return normalizeSlot(slots.default, { Component: ViewComponent, route });
            }
            // props from route configuration
            const routePropsOption = matchedRoute.props[currentName];
            const routeProps = routePropsOption
                ? routePropsOption === true
                    ? route.params
                    : typeof routePropsOption === 'function'
                        ? routePropsOption(route)
                        : routePropsOption
                : null;
            const onVnodeUnmounted = vnode => {
                // remove the instance reference to prevent leak
                if (vnode.component.isUnmounted) {
                    matchedRoute.instances[currentName] = null;
                }
            };
            const component = (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(ViewComponent, assign({}, routeProps, attrs, {
                onVnodeUnmounted,
                ref: viewRef,
            }));
            if (( true) &&
                isBrowser &&
                component.ref) {
                // TODO: can display if it's an alias, its props
                const info = {
                    depth: depth.value,
                    name: matchedRoute.name,
                    path: matchedRoute.path,
                    meta: matchedRoute.meta,
                };
                const internalInstances = isArray(component.ref)
                    ? component.ref.map(r => r.i)
                    : [component.ref.i];
                internalInstances.forEach(instance => {
                    // @ts-expect-error
                    instance.__vrv_devtools = info;
                });
            }
            return (
            // pass the vnode to the slot as a prop.
            // h and <component :is="..."> both accept vnodes
            normalizeSlot(slots.default, { Component: component, route }) ||
                component);
        };
    },
});
function normalizeSlot(slot, data) {
    if (!slot)
        return null;
    const slotContent = slot(data);
    return slotContent.length === 1 ? slotContent[0] : slotContent;
}
// export the public type for h/tsx inference
// also to avoid inline import() in generated d.ts files
/**
 * Component to display the current route the user is at.
 */
const RouterView = RouterViewImpl;
// warn against deprecated usage with <transition> & <keep-alive>
// due to functional component being no longer eager in Vue 3
function warnDeprecatedUsage() {
    const instance = getCurrentInstance();
    const parentName = instance.parent && instance.parent.type.name;
    const parentSubTreeType = instance.parent && instance.parent.subTree && instance.parent.subTree.type;
    if (parentName &&
        (parentName === 'KeepAlive' || parentName.includes('Transition')) &&
        typeof parentSubTreeType === 'object' &&
        parentSubTreeType.name === 'RouterView') {
        const comp = parentName === 'KeepAlive' ? 'keep-alive' : 'transition';
        warn(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\n` +
            `Use slot props instead:\n\n` +
            `<router-view v-slot="{ Component }">\n` +
            `  <${comp}>\n` +
            `    <component :is="Component" />\n` +
            `  </${comp}>\n` +
            `</router-view>`);
    }
}

/**
 * Copies a route location and removes any problematic properties that cannot be shown in devtools (e.g. Vue instances).
 *
 * @param routeLocation - routeLocation to format
 * @param tooltip - optional tooltip
 * @returns a copy of the routeLocation
 */
function formatRouteLocation(routeLocation, tooltip) {
    const copy = assign({}, routeLocation, {
        // remove variables that can contain vue instances
        matched: routeLocation.matched.map(matched => omit(matched, ['instances', 'children', 'aliasOf'])),
    });
    return {
        _custom: {
            type: null,
            readOnly: true,
            display: routeLocation.fullPath,
            tooltip,
            value: copy,
        },
    };
}
function formatDisplay(display) {
    return {
        _custom: {
            display,
        },
    };
}
// to support multiple router instances
let routerId = 0;
function addDevtools(app, router, matcher) {
    // Take over router.beforeEach and afterEach
    // make sure we are not registering the devtool twice
    if (router.__hasDevtools)
        return;
    router.__hasDevtools = true;
    // increment to support multiple router instances
    const id = routerId++;
    (0,_vue_devtools_api__WEBPACK_IMPORTED_MODULE_2__/* .setupDevtoolsPlugin */ .$q)({
        id: 'org.vuejs.router' + (id ? '.' + id : ''),
        label: 'Vue Router',
        packageName: 'vue-router',
        homepage: 'https://router.vuejs.org',
        logo: 'https://router.vuejs.org/logo.png',
        componentStateTypes: ['Routing'],
        app,
    }, api => {
        if (typeof api.now !== 'function') {
            console.warn('[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.');
        }
        // display state added by the router
        api.on.inspectComponent((payload, ctx) => {
            if (payload.instanceData) {
                payload.instanceData.state.push({
                    type: 'Routing',
                    key: '$route',
                    editable: false,
                    value: formatRouteLocation(router.currentRoute.value, 'Current Route'),
                });
            }
        });
        // mark router-link as active and display tags on router views
        api.on.visitComponentTree(({ treeNode: node, componentInstance }) => {
            if (componentInstance.__vrv_devtools) {
                const info = componentInstance.__vrv_devtools;
                node.tags.push({
                    label: (info.name ? `${info.name.toString()}: ` : '') + info.path,
                    textColor: 0,
                    tooltip: 'This component is rendered by &lt;router-view&gt;',
                    backgroundColor: PINK_500,
                });
            }
            // if multiple useLink are used
            if (isArray(componentInstance.__vrl_devtools)) {
                componentInstance.__devtoolsApi = api;
                componentInstance.__vrl_devtools.forEach(devtoolsData => {
                    let label = devtoolsData.route.path;
                    let backgroundColor = ORANGE_400;
                    let tooltip = '';
                    let textColor = 0;
                    if (devtoolsData.error) {
                        label = devtoolsData.error;
                        backgroundColor = RED_100;
                        textColor = RED_700;
                    }
                    else if (devtoolsData.isExactActive) {
                        backgroundColor = LIME_500;
                        tooltip = 'This is exactly active';
                    }
                    else if (devtoolsData.isActive) {
                        backgroundColor = BLUE_600;
                        tooltip = 'This link is active';
                    }
                    node.tags.push({
                        label,
                        textColor,
                        tooltip,
                        backgroundColor,
                    });
                });
            }
        });
        (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .watch */ .wB)(router.currentRoute, () => {
            // refresh active state
            refreshRoutesView();
            api.notifyComponentUpdate();
            api.sendInspectorTree(routerInspectorId);
            api.sendInspectorState(routerInspectorId);
        });
        const navigationsLayerId = 'router:navigations:' + id;
        api.addTimelineLayer({
            id: navigationsLayerId,
            label: `Router${id ? ' ' + id : ''} Navigations`,
            color: 0x40a8c4,
        });
        // const errorsLayerId = 'router:errors'
        // api.addTimelineLayer({
        //   id: errorsLayerId,
        //   label: 'Router Errors',
        //   color: 0xea5455,
        // })
        router.onError((error, to) => {
            api.addTimelineEvent({
                layerId: navigationsLayerId,
                event: {
                    title: 'Error during Navigation',
                    subtitle: to.fullPath,
                    logType: 'error',
                    time: api.now(),
                    data: { error },
                    groupId: to.meta.__navigationId,
                },
            });
        });
        // attached to `meta` and used to group events
        let navigationId = 0;
        router.beforeEach((to, from) => {
            const data = {
                guard: formatDisplay('beforeEach'),
                from: formatRouteLocation(from, 'Current Location during this navigation'),
                to: formatRouteLocation(to, 'Target location'),
            };
            // Used to group navigations together, hide from devtools
            Object.defineProperty(to.meta, '__navigationId', {
                value: navigationId++,
            });
            api.addTimelineEvent({
                layerId: navigationsLayerId,
                event: {
                    time: api.now(),
                    title: 'Start of navigation',
                    subtitle: to.fullPath,
                    data,
                    groupId: to.meta.__navigationId,
                },
            });
        });
        router.afterEach((to, from, failure) => {
            const data = {
                guard: formatDisplay('afterEach'),
            };
            if (failure) {
                data.failure = {
                    _custom: {
                        type: Error,
                        readOnly: true,
                        display: failure ? failure.message : '',
                        tooltip: 'Navigation Failure',
                        value: failure,
                    },
                };
                data.status = formatDisplay('❌');
            }
            else {
                data.status = formatDisplay('✅');
            }
            // we set here to have the right order
            data.from = formatRouteLocation(from, 'Current Location during this navigation');
            data.to = formatRouteLocation(to, 'Target location');
            api.addTimelineEvent({
                layerId: navigationsLayerId,
                event: {
                    title: 'End of navigation',
                    subtitle: to.fullPath,
                    time: api.now(),
                    data,
                    logType: failure ? 'warning' : 'default',
                    groupId: to.meta.__navigationId,
                },
            });
        });
        /**
         * Inspector of Existing routes
         */
        const routerInspectorId = 'router-inspector:' + id;
        api.addInspector({
            id: routerInspectorId,
            label: 'Routes' + (id ? ' ' + id : ''),
            icon: 'book',
            treeFilterPlaceholder: 'Search routes',
        });
        function refreshRoutesView() {
            // the routes view isn't active
            if (!activeRoutesPayload)
                return;
            const payload = activeRoutesPayload;
            // children routes will appear as nested
            let routes = matcher.getRoutes().filter(route => !route.parent ||
                // these routes have a parent with no component which will not appear in the view
                // therefore we still need to include them
                !route.parent.record.components);
            // reset match state to false
            routes.forEach(resetMatchStateOnRouteRecord);
            // apply a match state if there is a payload
            if (payload.filter) {
                routes = routes.filter(route => 
                // save matches state based on the payload
                isRouteMatching(route, payload.filter.toLowerCase()));
            }
            // mark active routes
            routes.forEach(route => markRouteRecordActive(route, router.currentRoute.value));
            payload.rootNodes = routes.map(formatRouteRecordForInspector);
        }
        let activeRoutesPayload;
        api.on.getInspectorTree(payload => {
            activeRoutesPayload = payload;
            if (payload.app === app && payload.inspectorId === routerInspectorId) {
                refreshRoutesView();
            }
        });
        /**
         * Display information about the currently selected route record
         */
        api.on.getInspectorState(payload => {
            if (payload.app === app && payload.inspectorId === routerInspectorId) {
                const routes = matcher.getRoutes();
                const route = routes.find(route => route.record.__vd_id === payload.nodeId);
                if (route) {
                    payload.state = {
                        options: formatRouteRecordMatcherForStateInspector(route),
                    };
                }
            }
        });
        api.sendInspectorTree(routerInspectorId);
        api.sendInspectorState(routerInspectorId);
    });
}
function modifierForKey(key) {
    if (key.optional) {
        return key.repeatable ? '*' : '?';
    }
    else {
        return key.repeatable ? '+' : '';
    }
}
function formatRouteRecordMatcherForStateInspector(route) {
    const { record } = route;
    const fields = [
        { editable: false, key: 'path', value: record.path },
    ];
    if (record.name != null) {
        fields.push({
            editable: false,
            key: 'name',
            value: record.name,
        });
    }
    fields.push({ editable: false, key: 'regexp', value: route.re });
    if (route.keys.length) {
        fields.push({
            editable: false,
            key: 'keys',
            value: {
                _custom: {
                    type: null,
                    readOnly: true,
                    display: route.keys
                        .map(key => `${key.name}${modifierForKey(key)}`)
                        .join(' '),
                    tooltip: 'Param keys',
                    value: route.keys,
                },
            },
        });
    }
    if (record.redirect != null) {
        fields.push({
            editable: false,
            key: 'redirect',
            value: record.redirect,
        });
    }
    if (route.alias.length) {
        fields.push({
            editable: false,
            key: 'aliases',
            value: route.alias.map(alias => alias.record.path),
        });
    }
    if (Object.keys(route.record.meta).length) {
        fields.push({
            editable: false,
            key: 'meta',
            value: route.record.meta,
        });
    }
    fields.push({
        key: 'score',
        editable: false,
        value: {
            _custom: {
                type: null,
                readOnly: true,
                display: route.score.map(score => score.join(', ')).join(' | '),
                tooltip: 'Score used to sort routes',
                value: route.score,
            },
        },
    });
    return fields;
}
/**
 * Extracted from tailwind palette
 */
const PINK_500 = 0xec4899;
const BLUE_600 = 0x2563eb;
const LIME_500 = 0x84cc16;
const CYAN_400 = 0x22d3ee;
const ORANGE_400 = 0xfb923c;
// const GRAY_100 = 0xf4f4f5
const DARK = 0x666666;
const RED_100 = 0xfee2e2;
const RED_700 = 0xb91c1c;
function formatRouteRecordForInspector(route) {
    const tags = [];
    const { record } = route;
    if (record.name != null) {
        tags.push({
            label: String(record.name),
            textColor: 0,
            backgroundColor: CYAN_400,
        });
    }
    if (record.aliasOf) {
        tags.push({
            label: 'alias',
            textColor: 0,
            backgroundColor: ORANGE_400,
        });
    }
    if (route.__vd_match) {
        tags.push({
            label: 'matches',
            textColor: 0,
            backgroundColor: PINK_500,
        });
    }
    if (route.__vd_exactActive) {
        tags.push({
            label: 'exact',
            textColor: 0,
            backgroundColor: LIME_500,
        });
    }
    if (route.__vd_active) {
        tags.push({
            label: 'active',
            textColor: 0,
            backgroundColor: BLUE_600,
        });
    }
    if (record.redirect) {
        tags.push({
            label: typeof record.redirect === 'string'
                ? `redirect: ${record.redirect}`
                : 'redirects',
            textColor: 0xffffff,
            backgroundColor: DARK,
        });
    }
    // add an id to be able to select it. Using the `path` is not possible because
    // empty path children would collide with their parents
    let id = record.__vd_id;
    if (id == null) {
        id = String(routeRecordId++);
        record.__vd_id = id;
    }
    return {
        id,
        label: record.path,
        tags,
        children: route.children.map(formatRouteRecordForInspector),
    };
}
//  incremental id for route records and inspector state
let routeRecordId = 0;
const EXTRACT_REGEXP_RE = /^\/(.*)\/([a-z]*)$/;
function markRouteRecordActive(route, currentRoute) {
    // no route will be active if matched is empty
    // reset the matching state
    const isExactActive = currentRoute.matched.length &&
        isSameRouteRecord(currentRoute.matched[currentRoute.matched.length - 1], route.record);
    route.__vd_exactActive = route.__vd_active = isExactActive;
    if (!isExactActive) {
        route.__vd_active = currentRoute.matched.some(match => isSameRouteRecord(match, route.record));
    }
    route.children.forEach(childRoute => markRouteRecordActive(childRoute, currentRoute));
}
function resetMatchStateOnRouteRecord(route) {
    route.__vd_match = false;
    route.children.forEach(resetMatchStateOnRouteRecord);
}
function isRouteMatching(route, filter) {
    const found = String(route.re).match(EXTRACT_REGEXP_RE);
    route.__vd_match = false;
    if (!found || found.length < 3) {
        return false;
    }
    // use a regexp without $ at the end to match nested routes better
    const nonEndingRE = new RegExp(found[1].replace(/\$$/, ''), found[2]);
    if (nonEndingRE.test(filter)) {
        // mark children as matches
        route.children.forEach(child => isRouteMatching(child, filter));
        // exception case: `/`
        if (route.record.path !== '/' || filter === '/') {
            route.__vd_match = route.re.test(filter);
            return true;
        }
        // hide the / route
        return false;
    }
    const path = route.record.path.toLowerCase();
    const decodedPath = decode(path);
    // also allow partial matching on the path
    if (!filter.startsWith('/') &&
        (decodedPath.includes(filter) || path.includes(filter)))
        return true;
    if (decodedPath.startsWith(filter) || path.startsWith(filter))
        return true;
    if (route.record.name && String(route.record.name).includes(filter))
        return true;
    return route.children.some(child => isRouteMatching(child, filter));
}
function omit(obj, keys) {
    const ret = {};
    for (const key in obj) {
        if (!keys.includes(key)) {
            // @ts-expect-error
            ret[key] = obj[key];
        }
    }
    return ret;
}

/**
 * Creates a Router instance that can be used by a Vue app.
 *
 * @param options - {@link RouterOptions}
 */
function createRouter(options) {
    const matcher = createRouterMatcher(options.routes, options);
    const parseQuery$1 = options.parseQuery || parseQuery;
    const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;
    const routerHistory = options.history;
    if (false)
        {}
    const beforeGuards = useCallbacks();
    const beforeResolveGuards = useCallbacks();
    const afterGuards = useCallbacks();
    const currentRoute = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .shallowRef */ .IJ)(START_LOCATION_NORMALIZED);
    let pendingLocation = START_LOCATION_NORMALIZED;
    // leave the scrollRestoration if no scrollBehavior is provided
    if (isBrowser && options.scrollBehavior && 'scrollRestoration' in history) {
        history.scrollRestoration = 'manual';
    }
    const normalizeParams = applyToParams.bind(null, paramValue => '' + paramValue);
    const encodeParams = applyToParams.bind(null, encodeParam);
    const decodeParams = 
    // @ts-expect-error: intentionally avoid the type check
    applyToParams.bind(null, decode);
    function addRoute(parentOrRoute, route) {
        let parent;
        let record;
        if (isRouteName(parentOrRoute)) {
            parent = matcher.getRecordMatcher(parentOrRoute);
            if (false) {}
            record = route;
        }
        else {
            record = parentOrRoute;
        }
        return matcher.addRoute(record, parent);
    }
    function removeRoute(name) {
        const recordMatcher = matcher.getRecordMatcher(name);
        if (recordMatcher) {
            matcher.removeRoute(recordMatcher);
        }
        else if ((false)) {}
    }
    function getRoutes() {
        return matcher.getRoutes().map(routeMatcher => routeMatcher.record);
    }
    function hasRoute(name) {
        return !!matcher.getRecordMatcher(name);
    }
    function resolve(rawLocation, currentLocation) {
        // const resolve: Router['resolve'] = (rawLocation: RouteLocationRaw, currentLocation) => {
        // const objectLocation = routerLocationAsObject(rawLocation)
        // we create a copy to modify it later
        currentLocation = assign({}, currentLocation || currentRoute.value);
        if (typeof rawLocation === 'string') {
            const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);
            const matchedRoute = matcher.resolve({ path: locationNormalized.path }, currentLocation);
            const href = routerHistory.createHref(locationNormalized.fullPath);
            if ((false)) {}
            // locationNormalized is always a new object
            return assign(locationNormalized, matchedRoute, {
                params: decodeParams(matchedRoute.params),
                hash: decode(locationNormalized.hash),
                redirectedFrom: undefined,
                href,
            });
        }
        if (false) {}
        let matcherLocation;
        // path could be relative in object as well
        if (rawLocation.path != null) {
            if (false) {}
            matcherLocation = assign({}, rawLocation, {
                path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path,
            });
        }
        else {
            // remove any nullish param
            const targetParams = assign({}, rawLocation.params);
            for (const key in targetParams) {
                if (targetParams[key] == null) {
                    delete targetParams[key];
                }
            }
            // pass encoded values to the matcher, so it can produce encoded path and fullPath
            matcherLocation = assign({}, rawLocation, {
                params: encodeParams(targetParams),
            });
            // current location params are decoded, we need to encode them in case the
            // matcher merges the params
            currentLocation.params = encodeParams(currentLocation.params);
        }
        const matchedRoute = matcher.resolve(matcherLocation, currentLocation);
        const hash = rawLocation.hash || '';
        if (false) {}
        // the matcher might have merged current location params, so
        // we need to run the decoding again
        matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));
        const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {
            hash: encodeHash(hash),
            path: matchedRoute.path,
        }));
        const href = routerHistory.createHref(fullPath);
        if ((false)) {}
        return assign({
            fullPath,
            // keep the hash encoded so fullPath is effectively path + encodedQuery +
            // hash
            hash,
            query: 
            // if the user is using a custom query lib like qs, we might have
            // nested objects, so we keep the query as is, meaning it can contain
            // numbers at `$route.query`, but at the point, the user will have to
            // use their own type anyway.
            // https://github.com/vuejs/router/issues/328#issuecomment-649481567
            stringifyQuery$1 === stringifyQuery
                ? normalizeQuery(rawLocation.query)
                : (rawLocation.query || {}),
        }, matchedRoute, {
            redirectedFrom: undefined,
            href,
        });
    }
    function locationAsObject(to) {
        return typeof to === 'string'
            ? parseURL(parseQuery$1, to, currentRoute.value.path)
            : assign({}, to);
    }
    function checkCanceledNavigation(to, from) {
        if (pendingLocation !== to) {
            return createRouterError(8 /* ErrorTypes.NAVIGATION_CANCELLED */, {
                from,
                to,
            });
        }
    }
    function push(to) {
        return pushWithRedirect(to);
    }
    function replace(to) {
        return push(assign(locationAsObject(to), { replace: true }));
    }
    function handleRedirectRecord(to) {
        const lastMatched = to.matched[to.matched.length - 1];
        if (lastMatched && lastMatched.redirect) {
            const { redirect } = lastMatched;
            let newTargetLocation = typeof redirect === 'function' ? redirect(to) : redirect;
            if (typeof newTargetLocation === 'string') {
                newTargetLocation =
                    newTargetLocation.includes('?') || newTargetLocation.includes('#')
                        ? (newTargetLocation = locationAsObject(newTargetLocation))
                        : // force empty params
                            { path: newTargetLocation };
                // @ts-expect-error: force empty params when a string is passed to let
                // the router parse them again
                newTargetLocation.params = {};
            }
            if (false) {}
            return assign({
                query: to.query,
                hash: to.hash,
                // avoid transferring params if the redirect has a path
                params: newTargetLocation.path != null ? {} : to.params,
            }, newTargetLocation);
        }
    }
    function pushWithRedirect(to, redirectedFrom) {
        const targetLocation = (pendingLocation = resolve(to));
        const from = currentRoute.value;
        const data = to.state;
        const force = to.force;
        // to could be a string where `replace` is a function
        const replace = to.replace === true;
        const shouldRedirect = handleRedirectRecord(targetLocation);
        if (shouldRedirect)
            return pushWithRedirect(assign(locationAsObject(shouldRedirect), {
                state: typeof shouldRedirect === 'object'
                    ? assign({}, data, shouldRedirect.state)
                    : data,
                force,
                replace,
            }), 
            // keep original redirectedFrom if it exists
            redirectedFrom || targetLocation);
        // if it was a redirect we already called `pushWithRedirect` above
        const toLocation = targetLocation;
        toLocation.redirectedFrom = redirectedFrom;
        let failure;
        if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {
            failure = createRouterError(16 /* ErrorTypes.NAVIGATION_DUPLICATED */, { to: toLocation, from });
            // trigger scroll to allow scrolling to the same anchor
            handleScroll(from, from, 
            // this is a push, the only way for it to be triggered from a
            // history.listen is with a redirect, which makes it become a push
            true, 
            // This cannot be the first navigation because the initial location
            // cannot be manually navigated to
            false);
        }
        return (failure ? Promise.resolve(failure) : navigate(toLocation, from))
            .catch((error) => isNavigationFailure(error)
            ? // navigation redirects still mark the router as ready
                isNavigationFailure(error, 2 /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */)
                    ? error
                    : markAsReady(error) // also returns the error
            : // reject any unknown error
                triggerError(error, toLocation, from))
            .then((failure) => {
            if (failure) {
                if (isNavigationFailure(failure, 2 /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */)) {
                    if (false) {}
                    return pushWithRedirect(
                    // keep options
                    assign({
                        // preserve an existing replacement but allow the redirect to override it
                        replace,
                    }, locationAsObject(failure.to), {
                        state: typeof failure.to === 'object'
                            ? assign({}, data, failure.to.state)
                            : data,
                        force,
                    }), 
                    // preserve the original redirectedFrom if any
                    redirectedFrom || toLocation);
                }
            }
            else {
                // if we fail we don't finalize the navigation
                failure = finalizeNavigation(toLocation, from, true, replace, data);
            }
            triggerAfterEach(toLocation, from, failure);
            return failure;
        });
    }
    /**
     * Helper to reject and skip all navigation guards if a new navigation happened
     * @param to
     * @param from
     */
    function checkCanceledNavigationAndReject(to, from) {
        const error = checkCanceledNavigation(to, from);
        return error ? Promise.reject(error) : Promise.resolve();
    }
    function runWithContext(fn) {
        const app = installedApps.values().next().value;
        // support Vue < 3.3
        return app && typeof app.runWithContext === 'function'
            ? app.runWithContext(fn)
            : fn();
    }
    // TODO: refactor the whole before guards by internally using router.beforeEach
    function navigate(to, from) {
        let guards;
        const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to, from);
        // all components here have been resolved once because we are leaving
        guards = extractComponentsGuards(leavingRecords.reverse(), 'beforeRouteLeave', to, from);
        // leavingRecords is already reversed
        for (const record of leavingRecords) {
            record.leaveGuards.forEach(guard => {
                guards.push(guardToPromiseFn(guard, to, from));
            });
        }
        const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to, from);
        guards.push(canceledNavigationCheck);
        // run the queue of per route beforeRouteLeave guards
        return (runGuardQueue(guards)
            .then(() => {
            // check global guards beforeEach
            guards = [];
            for (const guard of beforeGuards.list()) {
                guards.push(guardToPromiseFn(guard, to, from));
            }
            guards.push(canceledNavigationCheck);
            return runGuardQueue(guards);
        })
            .then(() => {
            // check in components beforeRouteUpdate
            guards = extractComponentsGuards(updatingRecords, 'beforeRouteUpdate', to, from);
            for (const record of updatingRecords) {
                record.updateGuards.forEach(guard => {
                    guards.push(guardToPromiseFn(guard, to, from));
                });
            }
            guards.push(canceledNavigationCheck);
            // run the queue of per route beforeEnter guards
            return runGuardQueue(guards);
        })
            .then(() => {
            // check the route beforeEnter
            guards = [];
            for (const record of enteringRecords) {
                // do not trigger beforeEnter on reused views
                if (record.beforeEnter) {
                    if (isArray(record.beforeEnter)) {
                        for (const beforeEnter of record.beforeEnter)
                            guards.push(guardToPromiseFn(beforeEnter, to, from));
                    }
                    else {
                        guards.push(guardToPromiseFn(record.beforeEnter, to, from));
                    }
                }
            }
            guards.push(canceledNavigationCheck);
            // run the queue of per route beforeEnter guards
            return runGuardQueue(guards);
        })
            .then(() => {
            // NOTE: at this point to.matched is normalized and does not contain any () => Promise<Component>
            // clear existing enterCallbacks, these are added by extractComponentsGuards
            to.matched.forEach(record => (record.enterCallbacks = {}));
            // check in-component beforeRouteEnter
            guards = extractComponentsGuards(enteringRecords, 'beforeRouteEnter', to, from, runWithContext);
            guards.push(canceledNavigationCheck);
            // run the queue of per route beforeEnter guards
            return runGuardQueue(guards);
        })
            .then(() => {
            // check global guards beforeResolve
            guards = [];
            for (const guard of beforeResolveGuards.list()) {
                guards.push(guardToPromiseFn(guard, to, from));
            }
            guards.push(canceledNavigationCheck);
            return runGuardQueue(guards);
        })
            // catch any navigation canceled
            .catch(err => isNavigationFailure(err, 8 /* ErrorTypes.NAVIGATION_CANCELLED */)
            ? err
            : Promise.reject(err)));
    }
    function triggerAfterEach(to, from, failure) {
        // navigation is confirmed, call afterGuards
        // TODO: wrap with error handlers
        afterGuards
            .list()
            .forEach(guard => runWithContext(() => guard(to, from, failure)));
    }
    /**
     * - Cleans up any navigation guards
     * - Changes the url if necessary
     * - Calls the scrollBehavior
     */
    function finalizeNavigation(toLocation, from, isPush, replace, data) {
        // a more recent navigation took place
        const error = checkCanceledNavigation(toLocation, from);
        if (error)
            return error;
        // only consider as push if it's not the first navigation
        const isFirstNavigation = from === START_LOCATION_NORMALIZED;
        const state = !isBrowser ? {} : history.state;
        // change URL only if the user did a push/replace and if it's not the initial navigation because
        // it's just reflecting the url
        if (isPush) {
            // on the initial navigation, we want to reuse the scroll position from
            // history state if it exists
            if (replace || isFirstNavigation)
                routerHistory.replace(toLocation.fullPath, assign({
                    scroll: isFirstNavigation && state && state.scroll,
                }, data));
            else
                routerHistory.push(toLocation.fullPath, data);
        }
        // accept current navigation
        currentRoute.value = toLocation;
        handleScroll(toLocation, from, isPush, isFirstNavigation);
        markAsReady();
    }
    let removeHistoryListener;
    // attach listener to history to trigger navigations
    function setupListeners() {
        // avoid setting up listeners twice due to an invalid first navigation
        if (removeHistoryListener)
            return;
        removeHistoryListener = routerHistory.listen((to, _from, info) => {
            if (!router.listening)
                return;
            // cannot be a redirect route because it was in history
            const toLocation = resolve(to);
            // due to dynamic routing, and to hash history with manual navigation
            // (manually changing the url or calling history.hash = '#/somewhere'),
            // there could be a redirect record in history
            const shouldRedirect = handleRedirectRecord(toLocation);
            if (shouldRedirect) {
                pushWithRedirect(assign(shouldRedirect, { replace: true }), toLocation).catch(noop);
                return;
            }
            pendingLocation = toLocation;
            const from = currentRoute.value;
            // TODO: should be moved to web history?
            if (isBrowser) {
                saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());
            }
            navigate(toLocation, from)
                .catch((error) => {
                if (isNavigationFailure(error, 4 /* ErrorTypes.NAVIGATION_ABORTED */ | 8 /* ErrorTypes.NAVIGATION_CANCELLED */)) {
                    return error;
                }
                if (isNavigationFailure(error, 2 /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */)) {
                    // Here we could call if (info.delta) routerHistory.go(-info.delta,
                    // false) but this is bug prone as we have no way to wait the
                    // navigation to be finished before calling pushWithRedirect. Using
                    // a setTimeout of 16ms seems to work but there is no guarantee for
                    // it to work on every browser. So instead we do not restore the
                    // history entry and trigger a new navigation as requested by the
                    // navigation guard.
                    // the error is already handled by router.push we just want to avoid
                    // logging the error
                    pushWithRedirect(error.to, toLocation
                    // avoid an uncaught rejection, let push call triggerError
                    )
                        .then(failure => {
                        // manual change in hash history #916 ending up in the URL not
                        // changing, but it was changed by the manual url change, so we
                        // need to manually change it ourselves
                        if (isNavigationFailure(failure, 4 /* ErrorTypes.NAVIGATION_ABORTED */ |
                            16 /* ErrorTypes.NAVIGATION_DUPLICATED */) &&
                            !info.delta &&
                            info.type === NavigationType.pop) {
                            routerHistory.go(-1, false);
                        }
                    })
                        .catch(noop);
                    // avoid the then branch
                    return Promise.reject();
                }
                // do not restore history on unknown direction
                if (info.delta) {
                    routerHistory.go(-info.delta, false);
                }
                // unrecognized error, transfer to the global handler
                return triggerError(error, toLocation, from);
            })
                .then((failure) => {
                failure =
                    failure ||
                        finalizeNavigation(
                        // after navigation, all matched components are resolved
                        toLocation, from, false);
                // revert the navigation
                if (failure) {
                    if (info.delta &&
                        // a new navigation has been triggered, so we do not want to revert, that will change the current history
                        // entry while a different route is displayed
                        !isNavigationFailure(failure, 8 /* ErrorTypes.NAVIGATION_CANCELLED */)) {
                        routerHistory.go(-info.delta, false);
                    }
                    else if (info.type === NavigationType.pop &&
                        isNavigationFailure(failure, 4 /* ErrorTypes.NAVIGATION_ABORTED */ | 16 /* ErrorTypes.NAVIGATION_DUPLICATED */)) {
                        // manual change in hash history #916
                        // it's like a push but lacks the information of the direction
                        routerHistory.go(-1, false);
                    }
                }
                triggerAfterEach(toLocation, from, failure);
            })
                // avoid warnings in the console about uncaught rejections, they are logged by triggerErrors
                .catch(noop);
        });
    }
    // Initialization and Errors
    let readyHandlers = useCallbacks();
    let errorListeners = useCallbacks();
    let ready;
    /**
     * Trigger errorListeners added via onError and throws the error as well
     *
     * @param error - error to throw
     * @param to - location we were navigating to when the error happened
     * @param from - location we were navigating from when the error happened
     * @returns the error as a rejected promise
     */
    function triggerError(error, to, from) {
        markAsReady(error);
        const list = errorListeners.list();
        if (list.length) {
            list.forEach(handler => handler(error, to, from));
        }
        else {
            if ((false)) {}
            console.error(error);
        }
        // reject the error no matter there were error listeners or not
        return Promise.reject(error);
    }
    function isReady() {
        if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)
            return Promise.resolve();
        return new Promise((resolve, reject) => {
            readyHandlers.add([resolve, reject]);
        });
    }
    function markAsReady(err) {
        if (!ready) {
            // still not ready if an error happened
            ready = !err;
            setupListeners();
            readyHandlers
                .list()
                .forEach(([resolve, reject]) => (err ? reject(err) : resolve()));
            readyHandlers.reset();
        }
        return err;
    }
    // Scroll behavior
    function handleScroll(to, from, isPush, isFirstNavigation) {
        const { scrollBehavior } = options;
        if (!isBrowser || !scrollBehavior)
            return Promise.resolve();
        const scrollPosition = (!isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0))) ||
            ((isFirstNavigation || !isPush) &&
                history.state &&
                history.state.scroll) ||
            null;
        return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .nextTick */ .dY)()
            .then(() => scrollBehavior(to, from, scrollPosition))
            .then(position => position && scrollToPosition(position))
            .catch(err => triggerError(err, to, from));
    }
    const go = (delta) => routerHistory.go(delta);
    let started;
    const installedApps = new Set();
    const router = {
        currentRoute,
        listening: true,
        addRoute,
        removeRoute,
        clearRoutes: matcher.clearRoutes,
        hasRoute,
        getRoutes,
        resolve,
        options,
        push,
        replace,
        go,
        back: () => go(-1),
        forward: () => go(1),
        beforeEach: beforeGuards.add,
        beforeResolve: beforeResolveGuards.add,
        afterEach: afterGuards.add,
        onError: errorListeners.add,
        isReady,
        install(app) {
            const router = this;
            app.component('RouterLink', RouterLink);
            app.component('RouterView', RouterView);
            app.config.globalProperties.$router = router;
            Object.defineProperty(app.config.globalProperties, '$route', {
                enumerable: true,
                get: () => (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .unref */ .R1)(currentRoute),
            });
            // this initial navigation is only necessary on client, on server it doesn't
            // make sense because it will create an extra unnecessary navigation and could
            // lead to problems
            if (isBrowser &&
                // used for the initial navigation client side to avoid pushing
                // multiple times when the router is used in multiple apps
                !started &&
                currentRoute.value === START_LOCATION_NORMALIZED) {
                // see above
                started = true;
                push(routerHistory.location).catch(err => {
                    if ((false))
                        {}
                });
            }
            const reactiveRoute = {};
            for (const key in START_LOCATION_NORMALIZED) {
                Object.defineProperty(reactiveRoute, key, {
                    get: () => currentRoute.value[key],
                    enumerable: true,
                });
            }
            app.provide(routerKey, router);
            app.provide(routeLocationKey, (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .shallowReactive */ .Gc)(reactiveRoute));
            app.provide(routerViewLocationKey, currentRoute);
            const unmountApp = app.unmount;
            installedApps.add(app);
            app.unmount = function () {
                installedApps.delete(app);
                // the router is not attached to an app anymore
                if (installedApps.size < 1) {
                    // invalidate the current navigation
                    pendingLocation = START_LOCATION_NORMALIZED;
                    removeHistoryListener && removeHistoryListener();
                    removeHistoryListener = null;
                    currentRoute.value = START_LOCATION_NORMALIZED;
                    started = false;
                    ready = false;
                }
                unmountApp();
            };
            // TODO: this probably needs to be updated so it can be used by vue-termui
            if (( true) && isBrowser) {
                addDevtools(app, router, matcher);
            }
        },
    };
    // TODO: type this as NavigationGuardReturn or similar instead of any
    function runGuardQueue(guards) {
        return guards.reduce((promise, guard) => promise.then(() => runWithContext(guard)), Promise.resolve());
    }
    return router;
}
function extractChangingRecords(to, from) {
    const leavingRecords = [];
    const updatingRecords = [];
    const enteringRecords = [];
    const len = Math.max(from.matched.length, to.matched.length);
    for (let i = 0; i < len; i++) {
        const recordFrom = from.matched[i];
        if (recordFrom) {
            if (to.matched.find(record => isSameRouteRecord(record, recordFrom)))
                updatingRecords.push(recordFrom);
            else
                leavingRecords.push(recordFrom);
        }
        const recordTo = to.matched[i];
        if (recordTo) {
            // the type doesn't matter because we are comparing per reference
            if (!from.matched.find(record => isSameRouteRecord(record, recordTo))) {
                enteringRecords.push(recordTo);
            }
        }
    }
    return [leavingRecords, updatingRecords, enteringRecords];
}

/**
 * Returns the router instance. Equivalent to using `$router` inside
 * templates.
 */
function useRouter() {
    return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .inject */ .WQ)(routerKey);
}
/**
 * Returns the current route location. Equivalent to using `$route` inside
 * templates.
 */
function useRoute(_name) {
    return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .inject */ .WQ)(routeLocationKey);
}




/***/ }),

/***/ 4401:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var isCallable = __webpack_require__(6428);
var tryToString = __webpack_require__(3798);

var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw new $TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ 633:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var isPossiblePrototype = __webpack_require__(3496);

var $String = String;
var $TypeError = TypeError;

module.exports = function (argument) {
  if (isPossiblePrototype(argument)) return argument;
  throw new $TypeError("Can't set " + $String(argument) + ' as a prototype');
};


/***/ }),

/***/ 3129:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var has = (__webpack_require__(4843).has);

// Perform ? RequireInternalSlot(M, [[SetData]])
module.exports = function (it) {
  has(it);
  return it;
};


/***/ }),

/***/ 5050:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var isObject = __webpack_require__(2399);

var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw new $TypeError($String(argument) + ' is not an object');
};


/***/ }),

/***/ 5884:
/***/ ((module) => {

"use strict";

// eslint-disable-next-line es/no-typed-arrays -- safe
module.exports = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';


/***/ }),

/***/ 1777:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThisAccessor = __webpack_require__(6129);
var classof = __webpack_require__(7713);

var $TypeError = TypeError;

// Includes
// - Perform ? RequireInternalSlot(O, [[ArrayBufferData]]).
// - If IsSharedArrayBuffer(O) is true, throw a TypeError exception.
module.exports = uncurryThisAccessor(ArrayBuffer.prototype, 'byteLength', 'get') || function (O) {
  if (classof(O) !== 'ArrayBuffer') throw new $TypeError('ArrayBuffer expected');
  return O.byteLength;
};


/***/ }),

/***/ 5749:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);
var arrayBufferByteLength = __webpack_require__(1777);

var slice = uncurryThis(ArrayBuffer.prototype.slice);

module.exports = function (O) {
  if (arrayBufferByteLength(O) !== 0) return false;
  try {
    slice(O, 0, 0);
    return false;
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ 2237:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(160);
var uncurryThis = __webpack_require__(6785);
var uncurryThisAccessor = __webpack_require__(6129);
var toIndex = __webpack_require__(6211);
var isDetached = __webpack_require__(5749);
var arrayBufferByteLength = __webpack_require__(1777);
var detachTransferable = __webpack_require__(8050);
var PROPER_STRUCTURED_CLONE_TRANSFER = __webpack_require__(611);

var structuredClone = global.structuredClone;
var ArrayBuffer = global.ArrayBuffer;
var DataView = global.DataView;
var TypeError = global.TypeError;
var min = Math.min;
var ArrayBufferPrototype = ArrayBuffer.prototype;
var DataViewPrototype = DataView.prototype;
var slice = uncurryThis(ArrayBufferPrototype.slice);
var isResizable = uncurryThisAccessor(ArrayBufferPrototype, 'resizable', 'get');
var maxByteLength = uncurryThisAccessor(ArrayBufferPrototype, 'maxByteLength', 'get');
var getInt8 = uncurryThis(DataViewPrototype.getInt8);
var setInt8 = uncurryThis(DataViewPrototype.setInt8);

module.exports = (PROPER_STRUCTURED_CLONE_TRANSFER || detachTransferable) && function (arrayBuffer, newLength, preserveResizability) {
  var byteLength = arrayBufferByteLength(arrayBuffer);
  var newByteLength = newLength === undefined ? byteLength : toIndex(newLength);
  var fixedLength = !isResizable || !isResizable(arrayBuffer);
  var newBuffer;
  if (isDetached(arrayBuffer)) throw new TypeError('ArrayBuffer is detached');
  if (PROPER_STRUCTURED_CLONE_TRANSFER) {
    arrayBuffer = structuredClone(arrayBuffer, { transfer: [arrayBuffer] });
    if (byteLength === newByteLength && (preserveResizability || fixedLength)) return arrayBuffer;
  }
  if (byteLength >= newByteLength && (!preserveResizability || fixedLength)) {
    newBuffer = slice(arrayBuffer, 0, newByteLength);
  } else {
    var options = preserveResizability && !fixedLength && maxByteLength ? { maxByteLength: maxByteLength(arrayBuffer) } : undefined;
    newBuffer = new ArrayBuffer(newByteLength, options);
    var a = new DataView(arrayBuffer);
    var b = new DataView(newBuffer);
    var copyLength = min(newByteLength, byteLength);
    for (var i = 0; i < copyLength; i++) setInt8(b, i, getInt8(a, i));
  }
  if (!PROPER_STRUCTURED_CLONE_TRANSFER) detachTransferable(arrayBuffer);
  return newBuffer;
};


/***/ }),

/***/ 4551:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var NATIVE_ARRAY_BUFFER = __webpack_require__(5884);
var DESCRIPTORS = __webpack_require__(9389);
var global = __webpack_require__(160);
var isCallable = __webpack_require__(6428);
var isObject = __webpack_require__(2399);
var hasOwn = __webpack_require__(7586);
var classof = __webpack_require__(1374);
var tryToString = __webpack_require__(3798);
var createNonEnumerableProperty = __webpack_require__(2792);
var defineBuiltIn = __webpack_require__(7189);
var defineBuiltInAccessor = __webpack_require__(7685);
var isPrototypeOf = __webpack_require__(4914);
var getPrototypeOf = __webpack_require__(4314);
var setPrototypeOf = __webpack_require__(9182);
var wellKnownSymbol = __webpack_require__(522);
var uid = __webpack_require__(5841);
var InternalStateModule = __webpack_require__(4510);

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var Int8Array = global.Int8Array;
var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
var Uint8ClampedArray = global.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
var TypedArray = Int8Array && getPrototypeOf(Int8Array);
var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
var ObjectPrototype = Object.prototype;
var TypeError = global.TypeError;

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');
var TYPED_ARRAY_CONSTRUCTOR = 'TypedArrayConstructor';
// Fixing native typed arrays in Opera Presto crashes the browser, see #595
var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQUIRED = false;
var NAME, Constructor, Prototype;

var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};

var BigIntArrayConstructorsList = {
  BigInt64Array: 8,
  BigUint64Array: 8
};

var isView = function isView(it) {
  if (!isObject(it)) return false;
  var klass = classof(it);
  return klass === 'DataView'
    || hasOwn(TypedArrayConstructorsList, klass)
    || hasOwn(BigIntArrayConstructorsList, klass);
};

var getTypedArrayConstructor = function (it) {
  var proto = getPrototypeOf(it);
  if (!isObject(proto)) return;
  var state = getInternalState(proto);
  return (state && hasOwn(state, TYPED_ARRAY_CONSTRUCTOR)) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);
};

var isTypedArray = function (it) {
  if (!isObject(it)) return false;
  var klass = classof(it);
  return hasOwn(TypedArrayConstructorsList, klass)
    || hasOwn(BigIntArrayConstructorsList, klass);
};

var aTypedArray = function (it) {
  if (isTypedArray(it)) return it;
  throw new TypeError('Target is not a typed array');
};

var aTypedArrayConstructor = function (C) {
  if (isCallable(C) && (!setPrototypeOf || isPrototypeOf(TypedArray, C))) return C;
  throw new TypeError(tryToString(C) + ' is not a typed array constructor');
};

var exportTypedArrayMethod = function (KEY, property, forced, options) {
  if (!DESCRIPTORS) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && hasOwn(TypedArrayConstructor.prototype, KEY)) try {
      delete TypedArrayConstructor.prototype[KEY];
    } catch (error) {
      // old WebKit bug - some methods are non-configurable
      try {
        TypedArrayConstructor.prototype[KEY] = property;
      } catch (error2) { /* empty */ }
    }
  }
  if (!TypedArrayPrototype[KEY] || forced) {
    defineBuiltIn(TypedArrayPrototype, KEY, forced ? property
      : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property, options);
  }
};

var exportTypedArrayStaticMethod = function (KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!DESCRIPTORS) return;
  if (setPrototypeOf) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global[ARRAY];
      if (TypedArrayConstructor && hasOwn(TypedArrayConstructor, KEY)) try {
        delete TypedArrayConstructor[KEY];
      } catch (error) { /* empty */ }
    }
    if (!TypedArray[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return defineBuiltIn(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);
      } catch (error) { /* empty */ }
    } else return;
  }
  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global[ARRAY];
    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      defineBuiltIn(TypedArrayConstructor, KEY, property);
    }
  }
};

for (NAME in TypedArrayConstructorsList) {
  Constructor = global[NAME];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
  else NATIVE_ARRAY_BUFFER_VIEWS = false;
}

for (NAME in BigIntArrayConstructorsList) {
  Constructor = global[NAME];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) enforceInternalState(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
}

// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS || !isCallable(TypedArray) || TypedArray === Function.prototype) {
  // eslint-disable-next-line no-shadow -- safe
  TypedArray = function TypedArray() {
    throw new TypeError('Incorrect invocation');
  };
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
  }
}

if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
  TypedArrayPrototype = TypedArray.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
    if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
  }
}

// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
  setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
}

if (DESCRIPTORS && !hasOwn(TypedArrayPrototype, TO_STRING_TAG)) {
  TYPED_ARRAY_TAG_REQUIRED = true;
  defineBuiltInAccessor(TypedArrayPrototype, TO_STRING_TAG, {
    configurable: true,
    get: function () {
      return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
    }
  });
  for (NAME in TypedArrayConstructorsList) if (global[NAME]) {
    createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
  }
}

module.exports = {
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG,
  aTypedArray: aTypedArray,
  aTypedArrayConstructor: aTypedArrayConstructor,
  exportTypedArrayMethod: exportTypedArrayMethod,
  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
  getTypedArrayConstructor: getTypedArrayConstructor,
  isView: isView,
  isTypedArray: isTypedArray,
  TypedArray: TypedArray,
  TypedArrayPrototype: TypedArrayPrototype
};


/***/ }),

/***/ 9986:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toIndexedObject = __webpack_require__(4716);
var toAbsoluteIndex = __webpack_require__(1971);
var lengthOfArrayLike = __webpack_require__(925);

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    if (length === 0) return !IS_INCLUDES && -1;
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el !== el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value !== value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ 848:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var DESCRIPTORS = __webpack_require__(9389);
var isArray = __webpack_require__(3772);

var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Safari < 13 does not throw an error in this case
var SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS && !function () {
  // makes no sense without proper strict mode support
  if (this !== undefined) return true;
  try {
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    Object.defineProperty([], 'length', { writable: false }).length = 1;
  } catch (error) {
    return error instanceof TypeError;
  }
}();

module.exports = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function (O, length) {
  if (isArray(O) && !getOwnPropertyDescriptor(O, 'length').writable) {
    throw new $TypeError('Cannot set read only .length');
  } return O.length = length;
} : function (O, length) {
  return O.length = length;
};


/***/ }),

/***/ 5091:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var lengthOfArrayLike = __webpack_require__(925);
var toIntegerOrInfinity = __webpack_require__(6552);

var $RangeError = RangeError;

// https://tc39.es/proposal-change-array-by-copy/#sec-array.prototype.with
// https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with
module.exports = function (O, C, index, value) {
  var len = lengthOfArrayLike(O);
  var relativeIndex = toIntegerOrInfinity(index);
  var actualIndex = relativeIndex < 0 ? len + relativeIndex : relativeIndex;
  if (actualIndex >= len || actualIndex < 0) throw new $RangeError('Incorrect index');
  var A = new C(len);
  var k = 0;
  for (; k < len; k++) A[k] = k === actualIndex ? value : O[k];
  return A;
};


/***/ }),

/***/ 7713:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ 1374:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__(785);
var isCallable = __webpack_require__(6428);
var classofRaw = __webpack_require__(7713);
var wellKnownSymbol = __webpack_require__(522);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Object = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) === 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) === 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};


/***/ }),

/***/ 2849:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var hasOwn = __webpack_require__(7586);
var ownKeys = __webpack_require__(8992);
var getOwnPropertyDescriptorModule = __webpack_require__(2552);
var definePropertyModule = __webpack_require__(7618);

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};


/***/ }),

/***/ 6392:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var fails = __webpack_require__(770);

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ 2792:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var DESCRIPTORS = __webpack_require__(9389);
var definePropertyModule = __webpack_require__(7618);
var createPropertyDescriptor = __webpack_require__(4419);

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ 4419:
/***/ ((module) => {

"use strict";

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ 7685:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var makeBuiltIn = __webpack_require__(1058);
var defineProperty = __webpack_require__(7618);

module.exports = function (target, name, descriptor) {
  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });
  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });
  return defineProperty.f(target, name, descriptor);
};


/***/ }),

/***/ 7189:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var isCallable = __webpack_require__(6428);
var definePropertyModule = __webpack_require__(7618);
var makeBuiltIn = __webpack_require__(1058);
var defineGlobalProperty = __webpack_require__(5022);

module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];
      else if (O[key]) simple = true;
    } catch (error) { /* empty */ }
    if (simple) O[key] = value;
    else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};


/***/ }),

/***/ 5022:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(160);

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ 9389:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var fails = __webpack_require__(770);

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] !== 7;
});


/***/ }),

/***/ 8050:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(160);
var tryNodeRequire = __webpack_require__(6841);
var PROPER_STRUCTURED_CLONE_TRANSFER = __webpack_require__(611);

var structuredClone = global.structuredClone;
var $ArrayBuffer = global.ArrayBuffer;
var $MessageChannel = global.MessageChannel;
var detach = false;
var WorkerThreads, channel, buffer, $detach;

if (PROPER_STRUCTURED_CLONE_TRANSFER) {
  detach = function (transferable) {
    structuredClone(transferable, { transfer: [transferable] });
  };
} else if ($ArrayBuffer) try {
  if (!$MessageChannel) {
    WorkerThreads = tryNodeRequire('worker_threads');
    if (WorkerThreads) $MessageChannel = WorkerThreads.MessageChannel;
  }

  if ($MessageChannel) {
    channel = new $MessageChannel();
    buffer = new $ArrayBuffer(2);

    $detach = function (transferable) {
      channel.port1.postMessage(null, [transferable]);
    };

    if (buffer.byteLength === 2) {
      $detach(buffer);
      if (buffer.byteLength === 0) detach = $detach;
    }
  }
} catch (error) { /* empty */ }

module.exports = detach;


/***/ }),

/***/ 7814:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(160);
var isObject = __webpack_require__(2399);

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ 914:
/***/ ((module) => {

"use strict";

var $TypeError = TypeError;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991

module.exports = function (it) {
  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');
  return it;
};


/***/ }),

/***/ 5859:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var IS_DENO = __webpack_require__(8747);
var IS_NODE = __webpack_require__(1599);

module.exports = !IS_DENO && !IS_NODE
  && typeof window == 'object'
  && typeof document == 'object';


/***/ }),

/***/ 8747:
/***/ ((module) => {

"use strict";

/* global Deno -- Deno case */
module.exports = typeof Deno == 'object' && Deno && typeof Deno.version == 'object';


/***/ }),

/***/ 1599:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(160);
var classof = __webpack_require__(7713);

module.exports = classof(global.process) === 'process';


/***/ }),

/***/ 3741:
/***/ ((module) => {

"use strict";

module.exports = typeof navigator != 'undefined' && String(navigator.userAgent) || '';


/***/ }),

/***/ 613:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(160);
var userAgent = __webpack_require__(3741);

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ 5226:
/***/ ((module) => {

"use strict";

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ 7485:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(160);
var getOwnPropertyDescriptor = (__webpack_require__(2552).f);
var createNonEnumerableProperty = __webpack_require__(2792);
var defineBuiltIn = __webpack_require__(7189);
var defineGlobalProperty = __webpack_require__(5022);
var copyConstructorProperties = __webpack_require__(2849);
var isForced = __webpack_require__(1513);

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = global[TARGET] && global[TARGET].prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ 770:
/***/ ((module) => {

"use strict";

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ 9391:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var fails = __webpack_require__(770);

module.exports = !fails(function () {
  // eslint-disable-next-line es/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});


/***/ }),

/***/ 7624:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var NATIVE_BIND = __webpack_require__(9391);

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ 1391:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var DESCRIPTORS = __webpack_require__(9389);
var hasOwn = __webpack_require__(7586);

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ 6129:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);
var aCallable = __webpack_require__(4401);

module.exports = function (object, key, method) {
  try {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));
  } catch (error) { /* empty */ }
};


/***/ }),

/***/ 6785:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var NATIVE_BIND = __webpack_require__(9391);

var FunctionPrototype = Function.prototype;
var call = FunctionPrototype.call;
var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);

module.exports = NATIVE_BIND ? uncurryThisWithBind : function (fn) {
  return function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ 7060:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(160);
var isCallable = __webpack_require__(6428);

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ 3970:
/***/ ((module) => {

"use strict";

// `GetIteratorDirect(obj)` abstract operation
// https://tc39.es/proposal-iterator-helpers/#sec-getiteratordirect
module.exports = function (obj) {
  return {
    iterator: obj,
    next: obj.next,
    done: false
  };
};


/***/ }),

/***/ 8209:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aCallable = __webpack_require__(4401);
var isNullOrUndefined = __webpack_require__(3614);

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return isNullOrUndefined(func) ? undefined : aCallable(func);
};


/***/ }),

/***/ 5142:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aCallable = __webpack_require__(4401);
var anObject = __webpack_require__(5050);
var call = __webpack_require__(7624);
var toIntegerOrInfinity = __webpack_require__(6552);
var getIteratorDirect = __webpack_require__(3970);

var INVALID_SIZE = 'Invalid size';
var $RangeError = RangeError;
var $TypeError = TypeError;
var max = Math.max;

var SetRecord = function (set, intSize) {
  this.set = set;
  this.size = max(intSize, 0);
  this.has = aCallable(set.has);
  this.keys = aCallable(set.keys);
};

SetRecord.prototype = {
  getIterator: function () {
    return getIteratorDirect(anObject(call(this.keys, this.set)));
  },
  includes: function (it) {
    return call(this.has, this.set, it);
  }
};

// `GetSetRecord` abstract operation
// https://tc39.es/proposal-set-methods/#sec-getsetrecord
module.exports = function (obj) {
  anObject(obj);
  var numSize = +obj.size;
  // NOTE: If size is undefined, then numSize will be NaN
  // eslint-disable-next-line no-self-compare -- NaN check
  if (numSize !== numSize) throw new $TypeError(INVALID_SIZE);
  var intSize = toIntegerOrInfinity(numSize);
  if (intSize < 0) throw new $RangeError(INVALID_SIZE);
  return new SetRecord(obj, intSize);
};


/***/ }),

/***/ 160:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var check = function (it) {
  return it && it.Math === Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  check(typeof this == 'object' && this) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();


/***/ }),

/***/ 7586:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);
var toObject = __webpack_require__(5644);

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ 20:
/***/ ((module) => {

"use strict";

module.exports = {};


/***/ }),

/***/ 1030:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var DESCRIPTORS = __webpack_require__(9389);
var fails = __webpack_require__(770);
var createElement = __webpack_require__(7814);

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a !== 7;
});


/***/ }),

/***/ 6160:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);
var fails = __webpack_require__(770);
var classof = __webpack_require__(7713);

var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) === 'String' ? split(it, '') : $Object(it);
} : $Object;


/***/ }),

/***/ 3013:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);
var isCallable = __webpack_require__(6428);
var store = __webpack_require__(8294);

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ 4510:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var NATIVE_WEAK_MAP = __webpack_require__(8393);
var global = __webpack_require__(160);
var isObject = __webpack_require__(2399);
var createNonEnumerableProperty = __webpack_require__(2792);
var hasOwn = __webpack_require__(7586);
var shared = __webpack_require__(8294);
var sharedKey = __webpack_require__(2200);
var hiddenKeys = __webpack_require__(20);

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw new TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  /* eslint-disable no-self-assign -- prototype methods protection */
  store.get = store.get;
  store.has = store.has;
  store.set = store.set;
  /* eslint-enable no-self-assign -- prototype methods protection */
  set = function (it, metadata) {
    if (store.has(it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    store.set(it, metadata);
    return metadata;
  };
  get = function (it) {
    return store.get(it) || {};
  };
  has = function (it) {
    return store.has(it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ 3772:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var classof = __webpack_require__(7713);

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) === 'Array';
};


/***/ }),

/***/ 3208:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var classof = __webpack_require__(1374);

module.exports = function (it) {
  var klass = classof(it);
  return klass === 'BigInt64Array' || klass === 'BigUint64Array';
};


/***/ }),

/***/ 6428:
/***/ ((module) => {

"use strict";

// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot
var documentAll = typeof document == 'object' && document.all;

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
// eslint-disable-next-line unicorn/no-typeof-undefined -- required for testing
module.exports = typeof documentAll == 'undefined' && documentAll !== undefined ? function (argument) {
  return typeof argument == 'function' || argument === documentAll;
} : function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ 1513:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var fails = __webpack_require__(770);
var isCallable = __webpack_require__(6428);

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value === POLYFILL ? true
    : value === NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ 3614:
/***/ ((module) => {

"use strict";

// we can't use just `it == null` since of `document.all` special case
// https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot-aec
module.exports = function (it) {
  return it === null || it === undefined;
};


/***/ }),

/***/ 2399:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var isCallable = __webpack_require__(6428);

module.exports = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ 3496:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var isObject = __webpack_require__(2399);

module.exports = function (argument) {
  return isObject(argument) || argument === null;
};


/***/ }),

/***/ 5046:
/***/ ((module) => {

"use strict";

module.exports = false;


/***/ }),

/***/ 9920:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var getBuiltIn = __webpack_require__(7060);
var isCallable = __webpack_require__(6428);
var isPrototypeOf = __webpack_require__(4914);
var USE_SYMBOL_AS_UID = __webpack_require__(9361);

var $Object = Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};


/***/ }),

/***/ 2392:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var call = __webpack_require__(7624);

module.exports = function (record, fn, ITERATOR_INSTEAD_OF_RECORD) {
  var iterator = ITERATOR_INSTEAD_OF_RECORD ? record : record.iterator;
  var next = record.next;
  var step, result;
  while (!(step = call(next, iterator)).done) {
    result = fn(step.value);
    if (result !== undefined) return result;
  }
};


/***/ }),

/***/ 4292:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var call = __webpack_require__(7624);
var anObject = __webpack_require__(5050);
var getMethod = __webpack_require__(8209);

module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};


/***/ }),

/***/ 925:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toLength = __webpack_require__(2395);

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ 1058:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);
var fails = __webpack_require__(770);
var isCallable = __webpack_require__(6428);
var hasOwn = __webpack_require__(7586);
var DESCRIPTORS = __webpack_require__(9389);
var CONFIGURABLE_FUNCTION_NAME = (__webpack_require__(1391).CONFIGURABLE);
var inspectSource = __webpack_require__(3013);
var InternalStateModule = __webpack_require__(4510);

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
var $String = String;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;
var stringSlice = uncurryThis(''.slice);
var replace = uncurryThis(''.replace);
var join = uncurryThis([].join);

var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn = module.exports = function (value, name, options) {
  if (stringSlice($String(name), 0, 7) === 'Symbol(') {
    name = '[' + replace($String(name), /^Symbol\(([^)]*)\).*$/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
    if (DESCRIPTORS) defineProperty(value, 'name', { value: name, configurable: true });
    else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = join(TEMPLATE, typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');


/***/ }),

/***/ 7998:
/***/ ((module) => {

"use strict";

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};


/***/ }),

/***/ 7618:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var DESCRIPTORS = __webpack_require__(9389);
var IE8_DOM_DEFINE = __webpack_require__(1030);
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(6067);
var anObject = __webpack_require__(5050);
var toPropertyKey = __webpack_require__(5656);

var $TypeError = TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw new $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ 2552:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var DESCRIPTORS = __webpack_require__(9389);
var call = __webpack_require__(7624);
var propertyIsEnumerableModule = __webpack_require__(1680);
var createPropertyDescriptor = __webpack_require__(4419);
var toIndexedObject = __webpack_require__(4716);
var toPropertyKey = __webpack_require__(5656);
var hasOwn = __webpack_require__(7586);
var IE8_DOM_DEFINE = __webpack_require__(1030);

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ 365:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var internalObjectKeys = __webpack_require__(5587);
var enumBugKeys = __webpack_require__(5226);

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ 9964:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ 4314:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var hasOwn = __webpack_require__(7586);
var isCallable = __webpack_require__(6428);
var toObject = __webpack_require__(5644);
var sharedKey = __webpack_require__(2200);
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(6392);

var IE_PROTO = sharedKey('IE_PROTO');
var $Object = Object;
var ObjectPrototype = $Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es/no-object-getprototypeof -- safe
module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof $Object ? ObjectPrototype : null;
};


/***/ }),

/***/ 4914:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ 5587:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);
var hasOwn = __webpack_require__(7586);
var toIndexedObject = __webpack_require__(4716);
var indexOf = (__webpack_require__(9986).indexOf);
var hiddenKeys = __webpack_require__(20);

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ 1680:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ 9182:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/* eslint-disable no-proto -- safe */
var uncurryThisAccessor = __webpack_require__(6129);
var isObject = __webpack_require__(2399);
var requireObjectCoercible = __webpack_require__(4997);
var aPossiblePrototype = __webpack_require__(633);

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = uncurryThisAccessor(Object.prototype, '__proto__', 'set');
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    requireObjectCoercible(O);
    aPossiblePrototype(proto);
    if (!isObject(O)) return O;
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ 3615:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var call = __webpack_require__(7624);
var isCallable = __webpack_require__(6428);
var isObject = __webpack_require__(2399);

var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw new $TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ 8992:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var getBuiltIn = __webpack_require__(7060);
var uncurryThis = __webpack_require__(6785);
var getOwnPropertyNamesModule = __webpack_require__(365);
var getOwnPropertySymbolsModule = __webpack_require__(9964);
var anObject = __webpack_require__(5050);

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ 4997:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var isNullOrUndefined = __webpack_require__(3614);

var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (isNullOrUndefined(it)) throw new $TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ 9351:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var SetHelpers = __webpack_require__(4843);
var iterate = __webpack_require__(9640);

var Set = SetHelpers.Set;
var add = SetHelpers.add;

module.exports = function (set) {
  var result = new Set();
  iterate(set, function (it) {
    add(result, it);
  });
  return result;
};


/***/ }),

/***/ 8643:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aSet = __webpack_require__(3129);
var SetHelpers = __webpack_require__(4843);
var clone = __webpack_require__(9351);
var size = __webpack_require__(6357);
var getSetRecord = __webpack_require__(5142);
var iterateSet = __webpack_require__(9640);
var iterateSimple = __webpack_require__(2392);

var has = SetHelpers.has;
var remove = SetHelpers.remove;

// `Set.prototype.difference` method
// https://github.com/tc39/proposal-set-methods
module.exports = function difference(other) {
  var O = aSet(this);
  var otherRec = getSetRecord(other);
  var result = clone(O);
  if (size(O) <= otherRec.size) iterateSet(O, function (e) {
    if (otherRec.includes(e)) remove(result, e);
  });
  else iterateSimple(otherRec.getIterator(), function (e) {
    if (has(O, e)) remove(result, e);
  });
  return result;
};


/***/ }),

/***/ 4843:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);

// eslint-disable-next-line es/no-set -- safe
var SetPrototype = Set.prototype;

module.exports = {
  // eslint-disable-next-line es/no-set -- safe
  Set: Set,
  add: uncurryThis(SetPrototype.add),
  has: uncurryThis(SetPrototype.has),
  remove: uncurryThis(SetPrototype['delete']),
  proto: SetPrototype
};


/***/ }),

/***/ 441:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aSet = __webpack_require__(3129);
var SetHelpers = __webpack_require__(4843);
var size = __webpack_require__(6357);
var getSetRecord = __webpack_require__(5142);
var iterateSet = __webpack_require__(9640);
var iterateSimple = __webpack_require__(2392);

var Set = SetHelpers.Set;
var add = SetHelpers.add;
var has = SetHelpers.has;

// `Set.prototype.intersection` method
// https://github.com/tc39/proposal-set-methods
module.exports = function intersection(other) {
  var O = aSet(this);
  var otherRec = getSetRecord(other);
  var result = new Set();

  if (size(O) > otherRec.size) {
    iterateSimple(otherRec.getIterator(), function (e) {
      if (has(O, e)) add(result, e);
    });
  } else {
    iterateSet(O, function (e) {
      if (otherRec.includes(e)) add(result, e);
    });
  }

  return result;
};


/***/ }),

/***/ 7002:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aSet = __webpack_require__(3129);
var has = (__webpack_require__(4843).has);
var size = __webpack_require__(6357);
var getSetRecord = __webpack_require__(5142);
var iterateSet = __webpack_require__(9640);
var iterateSimple = __webpack_require__(2392);
var iteratorClose = __webpack_require__(4292);

// `Set.prototype.isDisjointFrom` method
// https://tc39.github.io/proposal-set-methods/#Set.prototype.isDisjointFrom
module.exports = function isDisjointFrom(other) {
  var O = aSet(this);
  var otherRec = getSetRecord(other);
  if (size(O) <= otherRec.size) return iterateSet(O, function (e) {
    if (otherRec.includes(e)) return false;
  }, true) !== false;
  var iterator = otherRec.getIterator();
  return iterateSimple(iterator, function (e) {
    if (has(O, e)) return iteratorClose(iterator, 'normal', false);
  }) !== false;
};


/***/ }),

/***/ 2361:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aSet = __webpack_require__(3129);
var size = __webpack_require__(6357);
var iterate = __webpack_require__(9640);
var getSetRecord = __webpack_require__(5142);

// `Set.prototype.isSubsetOf` method
// https://tc39.github.io/proposal-set-methods/#Set.prototype.isSubsetOf
module.exports = function isSubsetOf(other) {
  var O = aSet(this);
  var otherRec = getSetRecord(other);
  if (size(O) > otherRec.size) return false;
  return iterate(O, function (e) {
    if (!otherRec.includes(e)) return false;
  }, true) !== false;
};


/***/ }),

/***/ 6872:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aSet = __webpack_require__(3129);
var has = (__webpack_require__(4843).has);
var size = __webpack_require__(6357);
var getSetRecord = __webpack_require__(5142);
var iterateSimple = __webpack_require__(2392);
var iteratorClose = __webpack_require__(4292);

// `Set.prototype.isSupersetOf` method
// https://tc39.github.io/proposal-set-methods/#Set.prototype.isSupersetOf
module.exports = function isSupersetOf(other) {
  var O = aSet(this);
  var otherRec = getSetRecord(other);
  if (size(O) < otherRec.size) return false;
  var iterator = otherRec.getIterator();
  return iterateSimple(iterator, function (e) {
    if (!has(O, e)) return iteratorClose(iterator, 'normal', false);
  }) !== false;
};


/***/ }),

/***/ 9640:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);
var iterateSimple = __webpack_require__(2392);
var SetHelpers = __webpack_require__(4843);

var Set = SetHelpers.Set;
var SetPrototype = SetHelpers.proto;
var forEach = uncurryThis(SetPrototype.forEach);
var keys = uncurryThis(SetPrototype.keys);
var next = keys(new Set()).next;

module.exports = function (set, fn, interruptible) {
  return interruptible ? iterateSimple({ iterator: keys(set), next: next }, fn) : forEach(set, fn);
};


/***/ }),

/***/ 5815:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var getBuiltIn = __webpack_require__(7060);

var createSetLike = function (size) {
  return {
    size: size,
    has: function () {
      return false;
    },
    keys: function () {
      return {
        next: function () {
          return { done: true };
        }
      };
    }
  };
};

module.exports = function (name) {
  var Set = getBuiltIn('Set');
  try {
    new Set()[name](createSetLike(0));
    try {
      // late spec change, early WebKit ~ Safari 17.0 beta implementation does not pass it
      // https://github.com/tc39/proposal-set-methods/pull/88
      new Set()[name](createSetLike(-1));
      return false;
    } catch (error2) {
      return true;
    }
  } catch (error) {
    return false;
  }
};


/***/ }),

/***/ 6357:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThisAccessor = __webpack_require__(6129);
var SetHelpers = __webpack_require__(4843);

module.exports = uncurryThisAccessor(SetHelpers.proto, 'size', 'get') || function (set) {
  return set.size;
};


/***/ }),

/***/ 9606:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aSet = __webpack_require__(3129);
var SetHelpers = __webpack_require__(4843);
var clone = __webpack_require__(9351);
var getSetRecord = __webpack_require__(5142);
var iterateSimple = __webpack_require__(2392);

var add = SetHelpers.add;
var has = SetHelpers.has;
var remove = SetHelpers.remove;

// `Set.prototype.symmetricDifference` method
// https://github.com/tc39/proposal-set-methods
module.exports = function symmetricDifference(other) {
  var O = aSet(this);
  var keysIter = getSetRecord(other).getIterator();
  var result = clone(O);
  iterateSimple(keysIter, function (e) {
    if (has(O, e)) remove(result, e);
    else add(result, e);
  });
  return result;
};


/***/ }),

/***/ 3861:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aSet = __webpack_require__(3129);
var add = (__webpack_require__(4843).add);
var clone = __webpack_require__(9351);
var getSetRecord = __webpack_require__(5142);
var iterateSimple = __webpack_require__(2392);

// `Set.prototype.union` method
// https://github.com/tc39/proposal-set-methods
module.exports = function union(other) {
  var O = aSet(this);
  var keysIter = getSetRecord(other).getIterator();
  var result = clone(O);
  iterateSimple(keysIter, function (it) {
    add(result, it);
  });
  return result;
};


/***/ }),

/***/ 2200:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var shared = __webpack_require__(5066);
var uid = __webpack_require__(5841);

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ 8294:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var IS_PURE = __webpack_require__(5046);
var globalThis = __webpack_require__(160);
var defineGlobalProperty = __webpack_require__(5022);

var SHARED = '__core-js_shared__';
var store = module.exports = globalThis[SHARED] || defineGlobalProperty(SHARED, {});

(store.versions || (store.versions = [])).push({
  version: '3.37.1',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2024 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.37.1/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});


/***/ }),

/***/ 5066:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var store = __webpack_require__(8294);

module.exports = function (key, value) {
  return store[key] || (store[key] = value || {});
};


/***/ }),

/***/ 611:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(160);
var fails = __webpack_require__(770);
var V8 = __webpack_require__(613);
var IS_BROWSER = __webpack_require__(5859);
var IS_DENO = __webpack_require__(8747);
var IS_NODE = __webpack_require__(1599);

var structuredClone = global.structuredClone;

module.exports = !!structuredClone && !fails(function () {
  // prevent V8 ArrayBufferDetaching protector cell invalidation and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if ((IS_DENO && V8 > 92) || (IS_NODE && V8 > 94) || (IS_BROWSER && V8 > 97)) return false;
  var buffer = new ArrayBuffer(8);
  var clone = structuredClone(buffer, { transfer: [buffer] });
  return buffer.byteLength !== 0 || clone.byteLength !== 8;
});


/***/ }),

/***/ 9120:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(613);
var fails = __webpack_require__(770);
var global = __webpack_require__(160);

var $String = global.String;

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol('symbol detection');
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  // nb: Do not call `String` directly to avoid this being optimized out to `symbol+''` which will,
  // of course, fail.
  return !$String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ 1971:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toIntegerOrInfinity = __webpack_require__(6552);

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ 4149:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toPrimitive = __webpack_require__(1266);

var $TypeError = TypeError;

// `ToBigInt` abstract operation
// https://tc39.es/ecma262/#sec-tobigint
module.exports = function (argument) {
  var prim = toPrimitive(argument, 'number');
  if (typeof prim == 'number') throw new $TypeError("Can't convert number to bigint");
  // eslint-disable-next-line es/no-bigint -- safe
  return BigInt(prim);
};


/***/ }),

/***/ 6211:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toIntegerOrInfinity = __webpack_require__(6552);
var toLength = __webpack_require__(2395);

var $RangeError = RangeError;

// `ToIndex` abstract operation
// https://tc39.es/ecma262/#sec-toindex
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toIntegerOrInfinity(it);
  var length = toLength(number);
  if (number !== length) throw new $RangeError('Wrong length or index');
  return length;
};


/***/ }),

/***/ 4716:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(6160);
var requireObjectCoercible = __webpack_require__(4997);

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ 6552:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var trunc = __webpack_require__(7998);

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};


/***/ }),

/***/ 2395:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toIntegerOrInfinity = __webpack_require__(6552);

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  var len = toIntegerOrInfinity(argument);
  return len > 0 ? min(len, 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ 5644:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var requireObjectCoercible = __webpack_require__(4997);

var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ 1266:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var call = __webpack_require__(7624);
var isObject = __webpack_require__(2399);
var isSymbol = __webpack_require__(9920);
var getMethod = __webpack_require__(8209);
var ordinaryToPrimitive = __webpack_require__(3615);
var wellKnownSymbol = __webpack_require__(522);

var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw new $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ 5656:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toPrimitive = __webpack_require__(1266);
var isSymbol = __webpack_require__(9920);

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ 785:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var wellKnownSymbol = __webpack_require__(522);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ 2170:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var classof = __webpack_require__(1374);

var $String = String;

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw new TypeError('Cannot convert a Symbol value to a string');
  return $String(argument);
};


/***/ }),

/***/ 6841:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var IS_NODE = __webpack_require__(1599);

module.exports = function (name) {
  try {
    // eslint-disable-next-line no-new-func -- safe
    if (IS_NODE) return Function('return require("' + name + '")')();
  } catch (error) { /* empty */ }
};


/***/ }),

/***/ 3798:
/***/ ((module) => {

"use strict";

var $String = String;

module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ 5841:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var uncurryThis = __webpack_require__(6785);

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ 9361:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(9120);

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ 6067:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var DESCRIPTORS = __webpack_require__(9389);
var fails = __webpack_require__(770);

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype !== 42;
});


/***/ }),

/***/ 2341:
/***/ ((module) => {

"use strict";

var $TypeError = TypeError;

module.exports = function (passed, required) {
  if (passed < required) throw new $TypeError('Not enough arguments');
  return passed;
};


/***/ }),

/***/ 8393:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(160);
var isCallable = __webpack_require__(6428);

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));


/***/ }),

/***/ 522:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(160);
var shared = __webpack_require__(5066);
var hasOwn = __webpack_require__(7586);
var uid = __webpack_require__(5841);
var NATIVE_SYMBOL = __webpack_require__(9120);
var USE_SYMBOL_AS_UID = __webpack_require__(9361);

var Symbol = global.Symbol;
var WellKnownSymbolsStore = shared('wks');
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol['for'] || Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name)) {
    WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol, name)
      ? Symbol[name]
      : createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ 3186:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var DESCRIPTORS = __webpack_require__(9389);
var defineBuiltInAccessor = __webpack_require__(7685);
var isDetached = __webpack_require__(5749);

var ArrayBufferPrototype = ArrayBuffer.prototype;

if (DESCRIPTORS && !('detached' in ArrayBufferPrototype)) {
  defineBuiltInAccessor(ArrayBufferPrototype, 'detached', {
    configurable: true,
    get: function detached() {
      return isDetached(this);
    }
  });
}


/***/ }),

/***/ 5683:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(7485);
var $transfer = __webpack_require__(2237);

// `ArrayBuffer.prototype.transferToFixedLength` method
// https://tc39.es/proposal-arraybuffer-transfer/#sec-arraybuffer.prototype.transfertofixedlength
if ($transfer) $({ target: 'ArrayBuffer', proto: true }, {
  transferToFixedLength: function transferToFixedLength() {
    return $transfer(this, arguments.length ? arguments[0] : undefined, false);
  }
});


/***/ }),

/***/ 5531:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(7485);
var $transfer = __webpack_require__(2237);

// `ArrayBuffer.prototype.transfer` method
// https://tc39.es/proposal-arraybuffer-transfer/#sec-arraybuffer.prototype.transfer
if ($transfer) $({ target: 'ArrayBuffer', proto: true }, {
  transfer: function transfer() {
    return $transfer(this, arguments.length ? arguments[0] : undefined, true);
  }
});


/***/ }),

/***/ 239:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(7485);
var toObject = __webpack_require__(5644);
var lengthOfArrayLike = __webpack_require__(925);
var setArrayLength = __webpack_require__(848);
var doesNotExceedSafeInteger = __webpack_require__(914);
var fails = __webpack_require__(770);

var INCORRECT_TO_LENGTH = fails(function () {
  return [].push.call({ length: 0x100000000 }, 1) !== 4294967297;
});

// V8 <= 121 and Safari <= 15.4; FF < 23 throws InternalError
// https://bugs.chromium.org/p/v8/issues/detail?id=12681
var properErrorOnNonWritableLength = function () {
  try {
    // eslint-disable-next-line es/no-object-defineproperty -- safe
    Object.defineProperty([], 'length', { writable: false }).push();
  } catch (error) {
    return error instanceof TypeError;
  }
};

var FORCED = INCORRECT_TO_LENGTH || !properErrorOnNonWritableLength();

// `Array.prototype.push` method
// https://tc39.es/ecma262/#sec-array.prototype.push
$({ target: 'Array', proto: true, arity: 1, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  push: function push(item) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var argCount = arguments.length;
    doesNotExceedSafeInteger(len + argCount);
    for (var i = 0; i < argCount; i++) {
      O[len] = arguments[i];
      len++;
    }
    setArrayLength(O, len);
    return len;
  }
});


/***/ }),

/***/ 7225:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(7485);
var difference = __webpack_require__(8643);
var setMethodAcceptSetLike = __webpack_require__(5815);

// `Set.prototype.difference` method
// https://github.com/tc39/proposal-set-methods
$({ target: 'Set', proto: true, real: true, forced: !setMethodAcceptSetLike('difference') }, {
  difference: difference
});


/***/ }),

/***/ 8743:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(7485);
var fails = __webpack_require__(770);
var intersection = __webpack_require__(441);
var setMethodAcceptSetLike = __webpack_require__(5815);

var INCORRECT = !setMethodAcceptSetLike('intersection') || fails(function () {
  // eslint-disable-next-line es/no-array-from, es/no-set -- testing
  return String(Array.from(new Set([1, 2, 3]).intersection(new Set([3, 2])))) !== '3,2';
});

// `Set.prototype.intersection` method
// https://github.com/tc39/proposal-set-methods
$({ target: 'Set', proto: true, real: true, forced: INCORRECT }, {
  intersection: intersection
});


/***/ }),

/***/ 2858:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(7485);
var isDisjointFrom = __webpack_require__(7002);
var setMethodAcceptSetLike = __webpack_require__(5815);

// `Set.prototype.isDisjointFrom` method
// https://github.com/tc39/proposal-set-methods
$({ target: 'Set', proto: true, real: true, forced: !setMethodAcceptSetLike('isDisjointFrom') }, {
  isDisjointFrom: isDisjointFrom
});


/***/ }),

/***/ 2071:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(7485);
var isSubsetOf = __webpack_require__(2361);
var setMethodAcceptSetLike = __webpack_require__(5815);

// `Set.prototype.isSubsetOf` method
// https://github.com/tc39/proposal-set-methods
$({ target: 'Set', proto: true, real: true, forced: !setMethodAcceptSetLike('isSubsetOf') }, {
  isSubsetOf: isSubsetOf
});


/***/ }),

/***/ 5520:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(7485);
var isSupersetOf = __webpack_require__(6872);
var setMethodAcceptSetLike = __webpack_require__(5815);

// `Set.prototype.isSupersetOf` method
// https://github.com/tc39/proposal-set-methods
$({ target: 'Set', proto: true, real: true, forced: !setMethodAcceptSetLike('isSupersetOf') }, {
  isSupersetOf: isSupersetOf
});


/***/ }),

/***/ 2775:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(7485);
var symmetricDifference = __webpack_require__(9606);
var setMethodAcceptSetLike = __webpack_require__(5815);

// `Set.prototype.symmetricDifference` method
// https://github.com/tc39/proposal-set-methods
$({ target: 'Set', proto: true, real: true, forced: !setMethodAcceptSetLike('symmetricDifference') }, {
  symmetricDifference: symmetricDifference
});


/***/ }),

/***/ 6203:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(7485);
var union = __webpack_require__(3861);
var setMethodAcceptSetLike = __webpack_require__(5815);

// `Set.prototype.union` method
// https://github.com/tc39/proposal-set-methods
$({ target: 'Set', proto: true, real: true, forced: !setMethodAcceptSetLike('union') }, {
  union: union
});


/***/ }),

/***/ 9048:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var arrayWith = __webpack_require__(5091);
var ArrayBufferViewCore = __webpack_require__(4551);
var isBigIntArray = __webpack_require__(3208);
var toIntegerOrInfinity = __webpack_require__(6552);
var toBigInt = __webpack_require__(4149);

var aTypedArray = ArrayBufferViewCore.aTypedArray;
var getTypedArrayConstructor = ArrayBufferViewCore.getTypedArrayConstructor;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;

var PROPER_ORDER = !!function () {
  try {
    // eslint-disable-next-line no-throw-literal, es/no-typed-arrays, es/no-array-prototype-with -- required for testing
    new Int8Array(1)['with'](2, { valueOf: function () { throw 8; } });
  } catch (error) {
    // some early implementations, like WebKit, does not follow the final semantic
    // https://github.com/tc39/proposal-change-array-by-copy/pull/86
    return error === 8;
  }
}();

// `%TypedArray%.prototype.with` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.with
exportTypedArrayMethod('with', { 'with': function (index, value) {
  var O = aTypedArray(this);
  var relativeIndex = toIntegerOrInfinity(index);
  var actualValue = isBigIntArray(O) ? toBigInt(value) : +value;
  return arrayWith(O, getTypedArrayConstructor(O), relativeIndex, actualValue);
} }['with'], !PROPER_ORDER);


/***/ }),

/***/ 8812:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// TODO: Remove from `core-js@4`
__webpack_require__(7225);


/***/ }),

/***/ 2042:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// TODO: Remove from `core-js@4`
__webpack_require__(8743);


/***/ }),

/***/ 9875:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// TODO: Remove from `core-js@4`
__webpack_require__(2858);


/***/ }),

/***/ 2090:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// TODO: Remove from `core-js@4`
__webpack_require__(2071);


/***/ }),

/***/ 8441:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// TODO: Remove from `core-js@4`
__webpack_require__(5520);


/***/ }),

/***/ 8462:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// TODO: Remove from `core-js@4`
__webpack_require__(2775);


/***/ }),

/***/ 2336:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

// TODO: Remove from `core-js@4`
__webpack_require__(6203);


/***/ }),

/***/ 7396:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var defineBuiltIn = __webpack_require__(7189);
var uncurryThis = __webpack_require__(6785);
var toString = __webpack_require__(2170);
var validateArgumentsLength = __webpack_require__(2341);

var $URLSearchParams = URLSearchParams;
var URLSearchParamsPrototype = $URLSearchParams.prototype;
var append = uncurryThis(URLSearchParamsPrototype.append);
var $delete = uncurryThis(URLSearchParamsPrototype['delete']);
var forEach = uncurryThis(URLSearchParamsPrototype.forEach);
var push = uncurryThis([].push);
var params = new $URLSearchParams('a=1&a=2&b=3');

params['delete']('a', 1);
// `undefined` case is a Chromium 117 bug
// https://bugs.chromium.org/p/v8/issues/detail?id=14222
params['delete']('b', undefined);

if (params + '' !== 'a=2') {
  defineBuiltIn(URLSearchParamsPrototype, 'delete', function (name /* , value */) {
    var length = arguments.length;
    var $value = length < 2 ? undefined : arguments[1];
    if (length && $value === undefined) return $delete(this, name);
    var entries = [];
    forEach(this, function (v, k) { // also validates `this`
      push(entries, { key: k, value: v });
    });
    validateArgumentsLength(length, 1);
    var key = toString(name);
    var value = toString($value);
    var index = 0;
    var dindex = 0;
    var found = false;
    var entriesLength = entries.length;
    var entry;
    while (index < entriesLength) {
      entry = entries[index++];
      if (found || entry.key === key) {
        found = true;
        $delete(this, entry.key);
      } else dindex++;
    }
    while (dindex < entriesLength) {
      entry = entries[dindex++];
      if (!(entry.key === key && entry.value === value)) append(this, entry.key, entry.value);
    }
  }, { enumerable: true, unsafe: true });
}


/***/ }),

/***/ 923:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var defineBuiltIn = __webpack_require__(7189);
var uncurryThis = __webpack_require__(6785);
var toString = __webpack_require__(2170);
var validateArgumentsLength = __webpack_require__(2341);

var $URLSearchParams = URLSearchParams;
var URLSearchParamsPrototype = $URLSearchParams.prototype;
var getAll = uncurryThis(URLSearchParamsPrototype.getAll);
var $has = uncurryThis(URLSearchParamsPrototype.has);
var params = new $URLSearchParams('a=1');

// `undefined` case is a Chromium 117 bug
// https://bugs.chromium.org/p/v8/issues/detail?id=14222
if (params.has('a', 2) || !params.has('a', undefined)) {
  defineBuiltIn(URLSearchParamsPrototype, 'has', function has(name /* , value */) {
    var length = arguments.length;
    var $value = length < 2 ? undefined : arguments[1];
    if (length && $value === undefined) return $has(this, name);
    var values = getAll(this, name); // also validates `this`
    validateArgumentsLength(length, 1);
    var value = toString($value);
    var index = 0;
    while (index < values.length) {
      if (values[index++] === value) return true;
    } return false;
  }, { enumerable: true, unsafe: true });
}


/***/ }),

/***/ 9502:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var DESCRIPTORS = __webpack_require__(9389);
var uncurryThis = __webpack_require__(6785);
var defineBuiltInAccessor = __webpack_require__(7685);

var URLSearchParamsPrototype = URLSearchParams.prototype;
var forEach = uncurryThis(URLSearchParamsPrototype.forEach);

// `URLSearchParams.prototype.size` getter
// https://github.com/whatwg/url/pull/734
if (DESCRIPTORS && !('size' in URLSearchParamsPrototype)) {
  defineBuiltInAccessor(URLSearchParamsPrototype, 'size', {
    get: function size() {
      var count = 0;
      forEach(this, function () { count++; });
      return count;
    },
    configurable: true,
    enumerable: true
  });
}


/***/ }),

/***/ 2303:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ lib_axios)
});

// NAMESPACE OBJECT: ./node_modules/axios/lib/platform/common/utils.js
var common_utils_namespaceObject = {};
__webpack_require__.r(common_utils_namespaceObject);
__webpack_require__.d(common_utils_namespaceObject, {
  hasBrowserEnv: () => (hasBrowserEnv),
  hasStandardBrowserEnv: () => (hasStandardBrowserEnv),
  hasStandardBrowserWebWorkerEnv: () => (hasStandardBrowserWebWorkerEnv),
  origin: () => (origin)
});

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/bind.js


function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/utils.js




// utils is a library of generic helper functions non-specific to axios

const {toString: utils_toString} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = utils_toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
}

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
}

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

const [isReadableStream, isRequest, isResponse, isHeaders] = ['ReadableStream', 'Request', 'Response', 'Headers'].map(kindOfTest);

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : global)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  }

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
}

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
}

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
}


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
}

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
}

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
}

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const utils_hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
}

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
}

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  }

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
}

const noop = () => {}

const toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
}

const ALPHA = 'abcdefghijklmnopqrstuvwxyz'

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
}

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0]
  }

  return str;
}

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  }

  return visit(obj, 0);
}

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

/* harmony default export */ const utils = ({
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty: utils_hasOwnProperty,
  hasOwnProp: utils_hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
});

;// CONCATENATED MODULE: ./node_modules/axios/lib/core/AxiosError.js




/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

const AxiosError_prototype = AxiosError.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(AxiosError_prototype, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(AxiosError_prototype);

  utils.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

/* harmony default export */ const core_AxiosError = (AxiosError);

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/null.js
// eslint-disable-next-line strict
/* harmony default export */ const helpers_null = (null);

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toFormData.js




// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored


/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return utils.isPlainObject(thing) || utils.isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return utils.isArray(arr) && !arr.some(isVisitable);
}

const predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!utils.isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (helpers_null || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = utils.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !utils.isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && utils.isSpecCompliantForm(formData);

  if (!utils.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (utils.isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && utils.isBlob(value)) {
      throw new core_AxiosError('Blob is not supported. Use a Buffer instead.');
    }

    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (utils.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (utils.isArray(value) && isFlatArray(value)) ||
        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(utils.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (utils.isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    utils.forEach(value, function each(el, key) {
      const result = !(utils.isUndefined(el) || el === null) && visitor.call(
        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!utils.isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/* harmony default export */ const helpers_toFormData = (toFormData);

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js




/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && helpers_toFormData(params, this, options);
}

const AxiosURLSearchParams_prototype = AxiosURLSearchParams.prototype;

AxiosURLSearchParams_prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

AxiosURLSearchParams_prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/* harmony default export */ const helpers_AxiosURLSearchParams = (AxiosURLSearchParams);

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/buildURL.js





/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function buildURL_encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || buildURL_encode;

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils.isURLSearchParams(params) ?
      params.toString() :
      new helpers_AxiosURLSearchParams(params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/core/InterceptorManager.js




class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

/* harmony default export */ const core_InterceptorManager = (InterceptorManager);

;// CONCATENATED MODULE: ./node_modules/axios/lib/defaults/transitional.js


/* harmony default export */ const defaults_transitional = ({
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
});

;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js



/* harmony default export */ const classes_URLSearchParams = (typeof URLSearchParams !== 'undefined' ? URLSearchParams : helpers_AxiosURLSearchParams);

;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/FormData.js


/* harmony default export */ const classes_FormData = (typeof FormData !== 'undefined' ? FormData : null);

;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/classes/Blob.js


/* harmony default export */ const classes_Blob = (typeof Blob !== 'undefined' ? Blob : null);

;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/browser/index.js




/* harmony default export */ const browser = ({
  isBrowser: true,
  classes: {
    URLSearchParams: classes_URLSearchParams,
    FormData: classes_FormData,
    Blob: classes_Blob
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
});

;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/common/utils.js
const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = (
  (product) => {
    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0
  })(typeof navigator !== 'undefined' && navigator.product);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

const origin = hasBrowserEnv && window.location.href || 'http://localhost';



;// CONCATENATED MODULE: ./node_modules/axios/lib/platform/index.js



/* harmony default export */ const platform = ({
  ...common_utils_namespaceObject,
  ...browser
});

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/toURLEncodedForm.js






function toURLEncodedForm(data, options) {
  return helpers_toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils.isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/formDataToJSON.js




/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return utils.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils.isArray(target) ? target.length : name;

    if (isLast) {
      if (utils.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !utils.isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && utils.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {
    const obj = {};

    utils.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/* harmony default export */ const helpers_formDataToJSON = (formDataToJSON);

;// CONCATENATED MODULE: ./node_modules/axios/lib/defaults/index.js










/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: defaults_transitional,

  adapter: ['xhr', 'http', 'fetch'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = utils.isObject(data);

    if (isObjectPayload && utils.isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = utils.isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify(helpers_formDataToJSON(data)) : data;
    }

    if (utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data) ||
      utils.isReadableStream(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }

      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return helpers_toFormData(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (utils.isResponse(data) || utils.isReadableStream(data)) {
      return data;
    }

    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw core_AxiosError.from(e, core_AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

/* harmony default export */ const lib_defaults = (defaults);

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseHeaders.js




// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = utils.toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
/* harmony default export */ const parseHeaders = (rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
});

;// CONCATENATED MODULE: ./node_modules/axios/lib/core/AxiosHeaders.js





const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return utils.isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (utils.isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!utils.isString(value)) return;

  if (utils.isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (utils.isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = utils.toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = utils.findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (utils.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite)
    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else if (utils.isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils.findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (utils.isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (utils.isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils.findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = utils.findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (utils.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    utils.forEach(this, (value, header) => {
      const key = utils.findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    utils.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
utils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

utils.freezeMethods(AxiosHeaders);

/* harmony default export */ const core_AxiosHeaders = (AxiosHeaders);

;// CONCATENATED MODULE: ./node_modules/axios/lib/core/transformData.js






/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || lib_defaults;
  const context = response || config;
  const headers = core_AxiosHeaders.from(context.headers);
  let data = context.data;

  utils.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/isCancel.js


function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CanceledError.js





/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  core_AxiosError.call(this, message == null ? 'canceled' : message, core_AxiosError.ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

utils.inherits(CanceledError, core_AxiosError, {
  __CANCEL__: true
});

/* harmony default export */ const cancel_CanceledError = (CanceledError);

;// CONCATENATED MODULE: ./node_modules/axios/lib/core/settle.js




/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new core_AxiosError(
      'Request failed with status code ' + response.status,
      [core_AxiosError.ERR_BAD_REQUEST, core_AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/parseProtocol.js


function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/speedometer.js


/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

/* harmony default export */ const helpers_speedometer = (speedometer);

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/throttle.js


/**
 * Throttle decorator
 * @param {Function} fn
 * @param {Number} freq
 * @return {Function}
 */
function throttle(fn, freq) {
  let timestamp = 0;
  const threshold = 1000 / freq;
  let timer = null;
  return function throttled() {
    const force = this === true;

    const now = Date.now();
    if (force || now - timestamp > threshold) {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      timestamp = now;
      return fn.apply(null, arguments);
    }
    if (!timer) {
      timer = setTimeout(() => {
        timer = null;
        timestamp = Date.now();
        return fn.apply(null, arguments);
      }, threshold - (now - timestamp));
    }
  };
}

/* harmony default export */ const helpers_throttle = (throttle);

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/progressEventReducer.js



/* harmony default export */ const progressEventReducer = ((listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = helpers_speedometer(50, 250);

  return helpers_throttle(e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e,
      lengthComputable: total != null
    };

    data[isDownloadStream ? 'download' : 'upload'] = true;

    listener(data);
  }, freq);
});

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isURLSameOrigin.js





/* harmony default export */ const isURLSameOrigin = (platform.hasStandardBrowserEnv ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement('a');
    let originURL;

    /**
    * Parse a URL to discover its components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      let href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
          urlParsingNode.pathname :
          '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })());

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/cookies.js



/* harmony default export */ const cookies = (platform.hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      utils.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      utils.isString(path) && cookie.push('path=' + path);

      utils.isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  });


;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isAbsoluteURL.js


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/combineURLs.js


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/core/buildFullPath.js





/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/core/mergeConfig.js





const headersToObject = (thing) => thing instanceof core_AxiosHeaders ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, caseless) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge.call({caseless}, target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, caseless) {
    if (!utils.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils.isUndefined(a)) {
      return getMergedValue(undefined, a, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!utils.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!utils.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!utils.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };

  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/resolveConfig.js









/* harmony default export */ const resolveConfig = ((config) => {
  const newConfig = mergeConfig({}, config);

  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;

  newConfig.headers = headers = core_AxiosHeaders.from(headers);

  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);

  // HTTP basic authentication
  if (auth) {
    headers.set('Authorization', 'Basic ' +
      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))
    );
  }

  let contentType;

  if (utils.isFormData(data)) {
    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(undefined); // Let the browser set it
    } else if ((contentType = headers.getContentType()) !== false) {
      // fix semicolon duplication issue for ReactNative FormData implementation
      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
    }
  }

  // Add xsrf header
  // This is only done if running in a standard browser environment.
  // Specifically not if we're in a web worker, or react-native.

  if (platform.hasStandardBrowserEnv) {
    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));

    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {
      // Add xsrf header
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);

      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }

  return newConfig;
});


;// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/xhr.js











const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

/* harmony default export */ const xhr = (isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig(config);
    let requestData = _config.data;
    const requestHeaders = core_AxiosHeaders.from(_config.headers).normalize();
    let {responseType} = _config;
    let onCanceled;
    function done() {
      if (_config.cancelToken) {
        _config.cancelToken.unsubscribe(onCanceled);
      }

      if (_config.signal) {
        _config.signal.removeEventListener('abort', onCanceled);
      }
    }

    let request = new XMLHttpRequest();

    request.open(_config.method.toUpperCase(), _config.url, true);

    // Set the request timeout in MS
    request.timeout = _config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = core_AxiosHeaders.from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new core_AxiosError('Request aborted', core_AxiosError.ECONNABORTED, _config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new core_AxiosError('Network Error', core_AxiosError.ERR_NETWORK, _config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = _config.transitional || defaults_transitional;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new core_AxiosError(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? core_AxiosError.ETIMEDOUT : core_AxiosError.ECONNABORTED,
        _config,
        request));

      // Clean up request
      request = null;
    };

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = _config.responseType;
    }

    // Handle progress if needed
    if (typeof _config.onDownloadProgress === 'function') {
      request.addEventListener('progress', progressEventReducer(_config.onDownloadProgress, true));
    }

    // Not all browsers support upload events
    if (typeof _config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', progressEventReducer(_config.onUploadProgress));
    }

    if (_config.cancelToken || _config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new cancel_CanceledError(null, config, request) : cancel);
        request.abort();
        request = null;
      };

      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = parseProtocol(_config.url);

    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new core_AxiosError('Unsupported protocol ' + protocol + ':', core_AxiosError.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
});

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/composeSignals.js



const composeSignals = (signals, timeout) => {
  let controller = new AbortController();

  let aborted;

  const onabort = function (cancel) {
    if (!aborted) {
      aborted = true;
      unsubscribe();
      const err = cancel instanceof Error ? cancel : this.reason;
      controller.abort(err instanceof core_AxiosError ? err : new cancel_CanceledError(err instanceof Error ? err.message : err));
    }
  }

  let timer = timeout && setTimeout(() => {
    onabort(new core_AxiosError(`timeout ${timeout} of ms exceeded`, core_AxiosError.ETIMEDOUT))
  }, timeout)

  const unsubscribe = () => {
    if (signals) {
      timer && clearTimeout(timer);
      timer = null;
      signals.forEach(signal => {
        signal &&
        (signal.removeEventListener ? signal.removeEventListener('abort', onabort) : signal.unsubscribe(onabort));
      });
      signals = null;
    }
  }

  signals.forEach((signal) => signal && signal.addEventListener && signal.addEventListener('abort', onabort));

  const {signal} = controller;

  signal.unsubscribe = unsubscribe;

  return [signal, () => {
    timer && clearTimeout(timer);
    timer = null;
  }];
}

/* harmony default export */ const helpers_composeSignals = (composeSignals);

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/trackStream.js


const streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;

  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }

  let pos = 0;
  let end;

  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
}

const readBytes = async function* (iterable, chunkSize, encode) {
  for await (const chunk of iterable) {
    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : (await encode(String(chunk))), chunkSize);
  }
}

const trackStream = (stream, chunkSize, onProgress, onFinish, encode) => {
  const iterator = readBytes(stream, chunkSize, encode);

  let bytes = 0;

  return new ReadableStream({
    type: 'bytes',

    async pull(controller) {
      const {done, value} = await iterator.next();

      if (done) {
        controller.close();
        onFinish();
        return;
      }

      let len = value.byteLength;
      onProgress && onProgress(bytes += len);
      controller.enqueue(new Uint8Array(value));
    },
    cancel(reason) {
      onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  })
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/fetch.js










const fetchProgressDecorator = (total, fn) => {
  const lengthComputable = total != null;
  return (loaded) => setTimeout(() => fn({
    lengthComputable,
    total,
    loaded
  }));
}

const isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';
const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';

// used only inside the fetch adapter
const encodeText = isFetchSupported && (typeof TextEncoder === 'function' ?
    ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) :
    async (str) => new Uint8Array(await new Response(str).arrayBuffer())
);

const supportsRequestStream = isReadableStreamSupported && (() => {
  let duplexAccessed = false;

  const hasContentType = new Request(platform.origin, {
    body: new ReadableStream(),
    method: 'POST',
    get duplex() {
      duplexAccessed = true;
      return 'half';
    },
  }).headers.has('Content-Type');

  return duplexAccessed && !hasContentType;
})();

const DEFAULT_CHUNK_SIZE = 64 * 1024;

const supportsResponseStream = isReadableStreamSupported && !!(()=> {
  try {
    return utils.isReadableStream(new Response('').body);
  } catch(err) {
    // return undefined
  }
})();

const resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};

isFetchSupported && (((res) => {
  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {
    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? (res) => res[type]() :
      (_, config) => {
        throw new core_AxiosError(`Response type '${type}' is not supported`, core_AxiosError.ERR_NOT_SUPPORT, config);
      })
  });
})(new Response));

const getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }

  if(utils.isBlob(body)) {
    return body.size;
  }

  if(utils.isSpecCompliantForm(body)) {
    return (await new Request(body).arrayBuffer()).byteLength;
  }

  if(utils.isArrayBufferView(body)) {
    return body.byteLength;
  }

  if(utils.isURLSearchParams(body)) {
    body = body + '';
  }

  if(utils.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
}

const resolveBodyLength = async (headers, body) => {
  const length = utils.toFiniteNumber(headers.getContentLength());

  return length == null ? getBodyLength(body) : length;
}

/* harmony default export */ const adapters_fetch = (isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = 'same-origin',
    fetchOptions
  } = resolveConfig(config);

  responseType = responseType ? (responseType + '').toLowerCase() : 'text';

  let [composedSignal, stopTimeout] = (signal || cancelToken || timeout) ?
    helpers_composeSignals([signal, cancelToken], timeout) : [];

  let finished, request;

  const onFinish = () => {
    !finished && setTimeout(() => {
      composedSignal && composedSignal.unsubscribe();
    });

    finished = true;
  }

  let requestContentLength;

  try {
    if (
      onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' &&
      (requestContentLength = await resolveBodyLength(headers, data)) !== 0
    ) {
      let _request = new Request(url, {
        method: 'POST',
        body: data,
        duplex: "half"
      });

      let contentTypeHeader;

      if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {
        headers.setContentType(contentTypeHeader)
      }

      if (_request.body) {
        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, fetchProgressDecorator(
          requestContentLength,
          progressEventReducer(onUploadProgress)
        ), null, encodeText);
      }
    }

    if (!utils.isString(withCredentials)) {
      withCredentials = withCredentials ? 'cors' : 'omit';
    }

    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      withCredentials
    });

    let response = await fetch(request);

    const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');

    if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {
      const options = {};

      ['status', 'statusText', 'headers'].forEach(prop => {
        options[prop] = response[prop];
      });

      const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));

      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onDownloadProgress && fetchProgressDecorator(
          responseContentLength,
          progressEventReducer(onDownloadProgress, true)
        ), isStreamResponse && onFinish, encodeText),
        options
      );
    }

    responseType = responseType || 'text';

    let responseData = await resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);

    !isStreamResponse && onFinish();

    stopTimeout && stopTimeout();

    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: core_AxiosHeaders.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      })
    })
  } catch (err) {
    onFinish();

    if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {
      throw Object.assign(
        new core_AxiosError('Network Error', core_AxiosError.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      )
    }

    throw core_AxiosError.from(err, err && err.code, config, request);
  }
}));



;// CONCATENATED MODULE: ./node_modules/axios/lib/adapters/adapters.js






const knownAdapters = {
  http: helpers_null,
  xhr: xhr,
  fetch: adapters_fetch
}

utils.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;

/* harmony default export */ const adapters = ({
  getAdapter: (adapters) => {
    adapters = utils.isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new core_AxiosError(`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new core_AxiosError(
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
});

;// CONCATENATED MODULE: ./node_modules/axios/lib/core/dispatchRequest.js









/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new cancel_CanceledError(null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = core_AxiosHeaders.from(config.headers);

  // Transform request data
  config.data = transformData.call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = adapters.getAdapter(config.adapter || lib_defaults.adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );

    response.headers = core_AxiosHeaders.from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = core_AxiosHeaders.from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/env/data.js
const VERSION = "1.7.2";
;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/validator.js





const validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new core_AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        core_AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new core_AxiosError('options must be an object', core_AxiosError.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new core_AxiosError('option ' + opt + ' must be ' + result, core_AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new core_AxiosError('Unknown option ' + opt, core_AxiosError.ERR_BAD_OPTION);
    }
  }
}

/* harmony default export */ const validator = ({
  assertOptions,
  validators
});

;// CONCATENATED MODULE: ./node_modules/axios/lib/core/Axios.js











const Axios_validators = validator.validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new core_InterceptorManager(),
      response: new core_InterceptorManager()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;

        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';
        try {
          if (!err.stack) {
            err.stack = stack;
            // match without the 2 top stack lines
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
            err.stack += '\n' + stack
          }
        } catch (e) {
          // ignore the case where "stack" is an un-writable property
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = mergeConfig(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: Axios_validators.transitional(Axios_validators.boolean),
        forcedJSONParsing: Axios_validators.transitional(Axios_validators.boolean),
        clarifyTimeoutError: Axios_validators.transitional(Axios_validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (utils.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        }
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: Axios_validators.function,
          serialize: Axios_validators.function
        }, true);
      }
    }

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && utils.merge(
      headers.common,
      headers[config.method]
    );

    headers && utils.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = core_AxiosHeaders.concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

/* harmony default export */ const core_Axios = (Axios);

;// CONCATENATED MODULE: ./node_modules/axios/lib/cancel/CancelToken.js




/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new cancel_CanceledError(message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

/* harmony default export */ const cancel_CancelToken = (CancelToken);

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/spread.js


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/isAxiosError.js




/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
}

;// CONCATENATED MODULE: ./node_modules/axios/lib/helpers/HttpStatusCode.js
const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});

/* harmony default export */ const helpers_HttpStatusCode = (HttpStatusCode);

;// CONCATENATED MODULE: ./node_modules/axios/lib/axios.js




















/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new core_Axios(defaultConfig);
  const instance = bind(core_Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, core_Axios.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  utils.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(lib_defaults);

// Expose Axios class to allow class inheritance
axios.Axios = core_Axios;

// Expose Cancel & CancelToken
axios.CanceledError = cancel_CanceledError;
axios.CancelToken = cancel_CancelToken;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = helpers_toFormData;

// Expose AxiosError class
axios.AxiosError = core_AxiosError;

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = spread;

// Expose isAxiosError
axios.isAxiosError = isAxiosError;

// Expose mergeConfig
axios.mergeConfig = mergeConfig;

axios.AxiosHeaders = core_AxiosHeaders;

axios.formToJSON = thing => helpers_formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = adapters.getAdapter;

axios.HttpStatusCode = helpers_HttpStatusCode;

axios.default = axios;

// this module should only have a default export
/* harmony default export */ const lib_axios = (axios);


/***/ }),

/***/ 3716:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isoName: 'de-DE',
  nativeName: 'Deutsch (DE)',
  label: {
    clear: 'Leeren',
    ok: 'Ok',
    cancel: 'Abbrechen',
    close: 'Schließen',
    set: 'Setzen',
    select: 'Auswählen',
    reset: 'Zurücksetzen',
    remove: 'Löschen',
    update: 'Aktualisieren',
    create: 'Erstellen',
    search: 'Suche',
    filter: 'Filter',
    refresh: 'Aktualisieren',
    expand: label => label ? `Erweitern Sie "${label}"` : 'Erweitern',
    collapse: label => label ? `"${label}" minimieren` : 'Zusammenbruch'
  },
  date: {
    days: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
    daysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort: 'Jan_Feb_März_Apr_Mai_Jun_Jul_Aug_Sep_Okt_Nov_Dez'.split('_'),
    firstDayOfWeek: 1,
    // 0-6, 0 - Sunday, 1 Monday, ...
    format24h: true,
    pluralDay: 'Tage'
  },
  table: {
    noData: 'Keine Daten vorhanden.',
    noResults: 'Keine Einträge gefunden',
    loading: 'Lade...',
    selectedRecords: rows => rows > 1 ? rows + ' ausgewählte Zeilen' : (rows === 0 ? 'Keine' : '1') + ' ausgewählt.',
    recordsPerPage: 'Zeilen pro Seite',
    allRows: 'Alle',
    pagination: (start, end, total) => start + '-' + end + ' von ' + total,
    columns: 'Spalten'
  },
  editor: {
    url: 'URL',
    bold: 'Fett',
    italic: 'Kursiv',
    strikethrough: 'Durchgestrichen',
    underline: 'Unterstrichen',
    unorderedList: 'Ungeordnete Liste',
    orderedList: 'Geordnete Liste',
    subscript: 'tiefgestellt',
    superscript: 'hochgestellt',
    hyperlink: 'Link',
    toggleFullscreen: 'Vollbild umschalten',
    quote: 'Zitat',
    left: 'linksbündig',
    center: 'zentriert',
    right: 'rechtsbündig',
    justify: 'Ausrichten',
    print: 'Drucken',
    outdent: 'ausrücken',
    indent: 'einrücken',
    removeFormat: 'Entferne Formatierung',
    formatting: 'Formatiere',
    fontSize: 'Schriftgröße',
    align: 'Ausrichten',
    hr: 'Horizontale Linie einfügen',
    undo: 'Rückgänging',
    redo: 'Wiederherstellen',
    heading1: 'Überschrift 1',
    heading2: 'Überschrift 2',
    heading3: 'Überschrift 3',
    heading4: 'Überschrift 4',
    heading5: 'Überschrift 5',
    heading6: 'Überschrift 6',
    paragraph: 'Absatz',
    code: 'Code',
    size1: 'Sehr klein',
    size2: 'klein',
    size3: 'Normal',
    size4: 'Groß',
    size5: 'Größer',
    size6: 'Sehr groß',
    size7: 'Maximum',
    defaultFont: 'Standard Schrift',
    viewSource: 'Quelltext anzeigen'
  },
  tree: {
    noNodes: 'Keine Knoten verfügbar',
    noResults: 'Keine passenden Knoten gefunden'
  }
});

/***/ }),

/***/ 3952:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1758);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(492);
/* harmony import */ var _composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1906);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5139);





/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__/* .createComponent */ .a0)({
  name: 'QAvatar',
  props: {
    ..._composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_1__/* .useSizeProps */ .x_,
    fontSize: String,
    color: String,
    textColor: String,
    icon: String,
    square: Boolean,
    rounded: Boolean
  },
  setup(props, {
    slots
  }) {
    const sizeStyle = (0,_composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Ay)(props);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => 'q-avatar' + (props.color ? ` bg-${props.color}` : '') + (props.textColor ? ` text-${props.textColor} q-chip--colored` : '') + (props.square === true ? ' q-avatar--square' : props.rounded === true ? ' rounded-borders' : ''));
    const contentStyle = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => props.fontSize ? {
      fontSize: props.fontSize
    } : null);
    return () => {
      const icon = props.icon !== void 0 ? [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A, {
        name: props.icon
      })] : void 0;
      return (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
        class: classes.value,
        style: sizeStyle.value
      }, [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
        class: 'q-avatar__content row flex-center overflow-hidden',
        style: contentStyle.value
      }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_4__/* .hMergeSlotSafely */ .bG)(slots.default, icon))]);
    };
  }
}));

/***/ }),

/***/ 3954:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5139);



const alignValues = ['top', 'middle', 'bottom'];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QBadge',
  props: {
    color: String,
    textColor: String,
    floating: Boolean,
    transparent: Boolean,
    multiLine: Boolean,
    outline: Boolean,
    rounded: Boolean,
    label: [Number, String],
    align: {
      type: String,
      validator: v => alignValues.includes(v)
    }
  },
  setup(props, {
    slots
  }) {
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => {
      return props.align !== void 0 ? {
        verticalAlign: props.align
      } : null;
    });
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => {
      const text = props.outline === true ? props.color || props.textColor : props.textColor;
      return 'q-badge flex inline items-center no-wrap' + ` q-badge--${props.multiLine === true ? 'multi' : 'single'}-line` + (props.outline === true ? ' q-badge--outline' : props.color !== void 0 ? ` bg-${props.color}` : '') + (text !== void 0 ? ` text-${text}` : '') + (props.floating === true ? ' q-badge--floating' : '') + (props.rounded === true ? ' q-badge--rounded' : '') + (props.transparent === true ? ' q-badge--transparent' : '');
    });
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('div', {
      class: classes.value,
      style: style.value,
      role: 'status',
      'aria-label': props.label
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__/* .hMergeSlot */ .Hp)(slots.default, props.label !== void 0 ? [props.label] : []));
  }
}));

/***/ }),

/***/ 6868:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9467);
/* harmony import */ var _composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6372);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5139);





/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__/* .createComponent */ .a0)({
  name: 'QBanner',
  props: {
    ..._composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_1__/* .useDarkProps */ .C,
    inlineActions: Boolean,
    dense: Boolean,
    rounded: Boolean
  },
  setup(props, {
    slots
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .getCurrentInstance */ .nI)();
    const isDark = (0,_composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A)(props, $q);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => 'q-banner row items-center' + (props.dense === true ? ' q-banner--dense' : '') + (isDark.value === true ? ' q-banner--dark q-dark' : '') + (props.rounded === true ? ' rounded-borders' : ''));
    const actionClass = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => 'q-banner__actions row items-center justify-end' + ` col-${props.inlineActions === true ? 'auto' : 'all'}`);
    return () => {
      const child = [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
        class: 'q-banner__avatar col-auto row items-center self-start'
      }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_4__/* .hSlot */ .zm)(slots.avatar)), (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
        class: 'q-banner__content col text-body2'
      }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_4__/* .hSlot */ .zm)(slots.default))];
      const actions = (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_4__/* .hSlot */ .zm)(slots.action);
      actions !== void 0 && child.push((0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
        class: actionClass.value
      }, actions));
      return (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
        class: classes.value + (props.inlineActions === false && actions !== void 0 ? ' q-banner--top-padding' : ''),
        role: 'alert'
      }, child);
    };
  }
}));

/***/ }),

/***/ 6939:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ QBtnToggle)
});

// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/btn/QBtn.js
var QBtn = __webpack_require__(6384);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.render/render.js
var render = __webpack_require__(5139);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/btn-group/QBtnGroup.js



/* harmony default export */ const QBtnGroup = ((0,create/* createComponent */.a0)({
  name: 'QBtnGroup',
  props: {
    unelevated: Boolean,
    outline: Boolean,
    flat: Boolean,
    rounded: Boolean,
    square: Boolean,
    push: Boolean,
    stretch: Boolean,
    glossy: Boolean,
    spread: Boolean
  },
  setup(props, {
    slots
  }) {
    const classes = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const cls = ['unelevated', 'outline', 'flat', 'rounded', 'square', 'push', 'stretch', 'glossy'].filter(t => props[t] === true).map(t => `q-btn-group--${t}`).join(' ');
      return `q-btn-group row no-wrap${cls.length !== 0 ? ' ' + cls : ''}` + (props.spread === true ? ' q-btn-group--spread' : ' inline');
    });
    return () => (0,runtime_core_esm_bundler.h)('div', {
      class: classes.value
    }, (0,render/* hSlot */.zm)(slots.default));
  }
}));
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/use-form/private.use-form.js
var private_use_form = __webpack_require__(2510);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/btn/use-btn.js
var use_btn = __webpack_require__(3495);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/btn-toggle/QBtnToggle.js







/* harmony default export */ const QBtnToggle = ((0,create/* createComponent */.a0)({
  name: 'QBtnToggle',
  props: {
    ...private_use_form/* useFormProps */.Sc,
    modelValue: {
      required: true
    },
    options: {
      type: Array,
      required: true,
      validator: v => v.every(opt => ('label' in opt || 'icon' in opt || 'slot' in opt) && 'value' in opt)
    },
    // To avoid seeing the active raise shadow through
    // the transparent button, give it a color (even white)
    color: String,
    textColor: String,
    toggleColor: {
      type: String,
      default: 'primary'
    },
    toggleTextColor: String,
    outline: Boolean,
    flat: Boolean,
    unelevated: Boolean,
    rounded: Boolean,
    push: Boolean,
    glossy: Boolean,
    size: String,
    padding: String,
    noCaps: Boolean,
    noWrap: Boolean,
    dense: Boolean,
    readonly: Boolean,
    disable: Boolean,
    stack: Boolean,
    stretch: Boolean,
    spread: Boolean,
    clearable: Boolean,
    ripple: {
      type: [Boolean, Object],
      default: true
    }
  },
  emits: ['update:modelValue', 'clear', 'click'],
  setup(props, {
    slots,
    emit
  }) {
    const hasActiveValue = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.options.find(opt => opt.value === props.modelValue) !== void 0);
    const formAttrs = (0,runtime_core_esm_bundler/* computed */.EW)(() => ({
      type: 'hidden',
      name: props.name,
      value: props.modelValue
    }));
    const injectFormInput = (0,private_use_form/* useFormInject */.vq)(formAttrs);
    const btnDesignAttr = (0,runtime_core_esm_bundler/* computed */.EW)(() => (0,use_btn/* getBtnDesignAttr */.cv)(props));
    const btnOptionDesign = (0,runtime_core_esm_bundler/* computed */.EW)(() => ({
      rounded: props.rounded,
      dense: props.dense,
      ...btnDesignAttr.value
    }));
    const btnOptions = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.options.map((item, i) => {
      const {
        attrs,
        value,
        slot,
        ...opt
      } = item;
      return {
        slot,
        props: {
          key: i,
          'aria-pressed': value === props.modelValue ? 'true' : 'false',
          ...attrs,
          ...opt,
          ...btnOptionDesign.value,
          disable: props.disable === true || opt.disable === true,
          // Options that come from the button specific options first, then from general props
          color: value === props.modelValue ? mergeOpt(opt, 'toggleColor') : mergeOpt(opt, 'color'),
          textColor: value === props.modelValue ? mergeOpt(opt, 'toggleTextColor') : mergeOpt(opt, 'textColor'),
          noCaps: mergeOpt(opt, 'noCaps') === true,
          noWrap: mergeOpt(opt, 'noWrap') === true,
          size: mergeOpt(opt, 'size'),
          padding: mergeOpt(opt, 'padding'),
          ripple: mergeOpt(opt, 'ripple'),
          stack: mergeOpt(opt, 'stack') === true,
          stretch: mergeOpt(opt, 'stretch') === true,
          onClick(e) {
            set(value, item, e);
          }
        }
      };
    }));
    function set(value, opt, e) {
      if (props.readonly !== true) {
        if (props.modelValue === value) {
          if (props.clearable === true) {
            emit('update:modelValue', null, null);
            emit('clear');
          }
        } else {
          emit('update:modelValue', value, opt);
        }
        emit('click', e);
      }
    }
    function mergeOpt(opt, key) {
      return opt[key] === void 0 ? props[key] : opt[key];
    }
    function getContent() {
      const child = btnOptions.value.map(opt => {
        return (0,runtime_core_esm_bundler.h)(QBtn/* default */.A, opt.props, opt.slot !== void 0 ? slots[opt.slot] : void 0);
      });
      if (props.name !== void 0 && props.disable !== true && hasActiveValue.value === true) {
        injectFormInput(child, 'push');
      }
      return (0,render/* hMergeSlot */.Hp)(slots.default, child);
    }
    return () => (0,runtime_core_esm_bundler.h)(QBtnGroup, {
      class: 'q-btn-toggle',
      ...btnDesignAttr.value,
      rounded: props.rounded,
      stretch: props.stretch,
      glossy: props.glossy,
      spread: props.spread
    }, getContent);
  }
}));

/***/ }),

/***/ 6384:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8734);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(9104);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(492);
/* harmony import */ var _spinner_QSpinner_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8210);
/* harmony import */ var _directives_ripple_Ripple_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9626);
/* harmony import */ var _use_btn_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3495);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(5139);
/* harmony import */ var _utils_event_event_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2500);
/* harmony import */ var _utils_private_keyboard_key_composition_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(2906);










const {
  passiveCapture
} = _utils_event_event_js__WEBPACK_IMPORTED_MODULE_5__/* .listenOpts */ .mG;
let touchTarget = null,
  keyboardTarget = null,
  mouseTarget = null;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_6__/* .createComponent */ .a0)({
  name: 'QBtn',
  props: {
    ..._use_btn_js__WEBPACK_IMPORTED_MODULE_4__/* .useBtnProps */ .Y6,
    percentage: Number,
    darkPercentage: Boolean,
    onTouchstart: [Function, Array]
  },
  emits: ['click', 'keydown', 'mousedown', 'keyup'],
  setup(props, {
    slots,
    emit
  }) {
    const {
      proxy
    } = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .getCurrentInstance */ .nI)();
    const {
      classes,
      style,
      innerClasses,
      attributes,
      hasLink,
      linkTag,
      navigateOnClick,
      isActionable
    } = (0,_use_btn_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay)(props);
    const rootRef = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(null);
    const blurTargetRef = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(null);
    let localTouchTargetEl = null,
      avoidMouseRipple,
      mouseTimer = null;
    const hasLabel = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => props.label !== void 0 && props.label !== null && props.label !== '');
    const ripple = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => props.disable === true || props.ripple === false ? false : {
      keyCodes: hasLink.value === true ? [13, 32] : [13],
      ...(props.ripple === true ? {} : props.ripple)
    });
    const rippleProps = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => ({
      center: props.round
    }));
    const percentageStyle = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => {
      const val = Math.max(0, Math.min(100, props.percentage));
      return val > 0 ? {
        transition: 'transform 0.6s',
        transform: `translateX(${val - 100}%)`
      } : {};
    });
    const onEvents = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => {
      if (props.loading === true) {
        return {
          onMousedown: onLoadingEvt,
          onTouchstart: onLoadingEvt,
          onClick: onLoadingEvt,
          onKeydown: onLoadingEvt,
          onKeyup: onLoadingEvt
        };
      }
      if (isActionable.value === true) {
        const acc = {
          onClick,
          onKeydown,
          onMousedown
        };
        if (proxy.$q.platform.has.touch === true) {
          const suffix = props.onTouchstart !== void 0 ? '' : 'Passive';
          acc[`onTouchstart${suffix}`] = onTouchstart;
        }
        return acc;
      }
      return {
        // needed; especially for disabled <a> tags
        onClick: _utils_event_event_js__WEBPACK_IMPORTED_MODULE_5__/* .stopAndPrevent */ .Gu
      };
    });
    const nodeProps = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => ({
      ref: rootRef,
      class: 'q-btn q-btn-item non-selectable no-outline ' + classes.value,
      style: style.value,
      ...attributes.value,
      ...onEvents.value
    }));
    function onClick(e) {
      // is it already destroyed?
      if (rootRef.value === null) return;
      if (e !== void 0) {
        if (e.defaultPrevented === true) {
          return;
        }
        const el = document.activeElement;
        // focus button if it came from ENTER on form
        // prevent the new submit (already done)
        if (props.type === 'submit' && el !== document.body && rootRef.value.contains(el) === false
        // required for iOS and desktop Safari
        && el.contains(rootRef.value) === false) {
          rootRef.value.focus();
          const onClickCleanup = () => {
            document.removeEventListener('keydown', _utils_event_event_js__WEBPACK_IMPORTED_MODULE_5__/* .stopAndPrevent */ .Gu, true);
            document.removeEventListener('keyup', onClickCleanup, passiveCapture);
            rootRef.value !== null && rootRef.value.removeEventListener('blur', onClickCleanup, passiveCapture);
          };
          document.addEventListener('keydown', _utils_event_event_js__WEBPACK_IMPORTED_MODULE_5__/* .stopAndPrevent */ .Gu, true);
          document.addEventListener('keyup', onClickCleanup, passiveCapture);
          rootRef.value.addEventListener('blur', onClickCleanup, passiveCapture);
        }
      }
      navigateOnClick(e);
    }
    function onKeydown(e) {
      // is it already destroyed?
      if (rootRef.value === null) return;
      emit('keydown', e);
      if ((0,_utils_private_keyboard_key_composition_js__WEBPACK_IMPORTED_MODULE_9__/* .isKeyCode */ .Dv)(e, [13, 32]) === true && keyboardTarget !== rootRef.value) {
        keyboardTarget !== null && cleanup();
        if (e.defaultPrevented !== true) {
          // focus external button if the focus helper was focused before
          rootRef.value.focus();
          keyboardTarget = rootRef.value;
          rootRef.value.classList.add('q-btn--active');
          document.addEventListener('keyup', onPressEnd, true);
          rootRef.value.addEventListener('blur', onPressEnd, passiveCapture);
        }
        (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_5__/* .stopAndPrevent */ .Gu)(e);
      }
    }
    function onTouchstart(e) {
      // is it already destroyed?
      if (rootRef.value === null) return;
      emit('touchstart', e);
      if (e.defaultPrevented === true) return;
      if (touchTarget !== rootRef.value) {
        touchTarget !== null && cleanup();
        touchTarget = rootRef.value;
        localTouchTargetEl = e.target;
        localTouchTargetEl.addEventListener('touchcancel', onPressEnd, passiveCapture);
        localTouchTargetEl.addEventListener('touchend', onPressEnd, passiveCapture);
      }

      // avoid duplicated mousedown event
      // triggering another early ripple
      avoidMouseRipple = true;
      mouseTimer !== null && clearTimeout(mouseTimer);
      mouseTimer = setTimeout(() => {
        mouseTimer = null;
        avoidMouseRipple = false;
      }, 200);
    }
    function onMousedown(e) {
      // is it already destroyed?
      if (rootRef.value === null) return;
      e.qSkipRipple = avoidMouseRipple === true;
      emit('mousedown', e);
      if (e.defaultPrevented !== true && mouseTarget !== rootRef.value) {
        mouseTarget !== null && cleanup();
        mouseTarget = rootRef.value;
        rootRef.value.classList.add('q-btn--active');
        document.addEventListener('mouseup', onPressEnd, passiveCapture);
      }
    }
    function onPressEnd(e) {
      // is it already destroyed?
      if (rootRef.value === null) return;

      // needed for IE (because it emits blur when focusing button from focus helper)
      if (e !== void 0 && e.type === 'blur' && document.activeElement === rootRef.value) {
        return;
      }
      if (e !== void 0 && e.type === 'keyup') {
        if (keyboardTarget === rootRef.value && (0,_utils_private_keyboard_key_composition_js__WEBPACK_IMPORTED_MODULE_9__/* .isKeyCode */ .Dv)(e, [13, 32]) === true) {
          // for click trigger
          const evt = new MouseEvent('click', e);
          evt.qKeyEvent = true;
          e.defaultPrevented === true && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_5__/* .prevent */ .F4)(evt);
          e.cancelBubble === true && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_5__/* .stop */ .ds)(evt);
          rootRef.value.dispatchEvent(evt);
          (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_5__/* .stopAndPrevent */ .Gu)(e);

          // for ripple
          e.qKeyEvent = true;
        }
        emit('keyup', e);
      }
      cleanup();
    }
    function cleanup(destroying) {
      const blurTarget = blurTargetRef.value;
      if (destroying !== true && (touchTarget === rootRef.value || mouseTarget === rootRef.value) && blurTarget !== null && blurTarget !== document.activeElement) {
        blurTarget.setAttribute('tabindex', -1);
        blurTarget.focus();
      }
      if (touchTarget === rootRef.value) {
        if (localTouchTargetEl !== null) {
          localTouchTargetEl.removeEventListener('touchcancel', onPressEnd, passiveCapture);
          localTouchTargetEl.removeEventListener('touchend', onPressEnd, passiveCapture);
        }
        touchTarget = localTouchTargetEl = null;
      }
      if (mouseTarget === rootRef.value) {
        document.removeEventListener('mouseup', onPressEnd, passiveCapture);
        mouseTarget = null;
      }
      if (keyboardTarget === rootRef.value) {
        document.removeEventListener('keyup', onPressEnd, true);
        rootRef.value !== null && rootRef.value.removeEventListener('blur', onPressEnd, passiveCapture);
        keyboardTarget = null;
      }
      rootRef.value !== null && rootRef.value.classList.remove('q-btn--active');
    }
    function onLoadingEvt(evt) {
      (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_5__/* .stopAndPrevent */ .Gu)(evt);
      evt.qSkipRipple = true;
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .onBeforeUnmount */ .xo)(() => {
      cleanup(true);
    });

    // expose public methods
    Object.assign(proxy, {
      click: e => {
        if (isActionable.value === true) {
          onClick(e);
        }
      }
    });
    return () => {
      let inner = [];
      props.icon !== void 0 && inner.push((0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
        name: props.icon,
        left: props.stack !== true && hasLabel.value === true,
        role: 'img',
        'aria-hidden': 'true'
      }));
      hasLabel.value === true && inner.push((0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('span', {
        class: 'block'
      }, [props.label]));
      inner = (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_10__/* .hMergeSlot */ .Hp)(slots.default, inner);
      if (props.iconRight !== void 0 && props.round === false) {
        inner.push((0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
          name: props.iconRight,
          right: props.stack !== true && hasLabel.value === true,
          role: 'img',
          'aria-hidden': 'true'
        }));
      }
      const child = [(0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('span', {
        class: 'q-focus-helper',
        ref: blurTargetRef
      })];
      if (props.loading === true && props.percentage !== void 0) {
        child.push((0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('span', {
          class: 'q-btn__progress absolute-full overflow-hidden' + (props.darkPercentage === true ? ' q-btn__progress--dark' : '')
        }, [(0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('span', {
          class: 'q-btn__progress-indicator fit block',
          style: percentageStyle.value
        })]));
      }
      child.push((0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('span', {
        class: 'q-btn__content text-center col items-center q-anchor--skip ' + innerClasses.value
      }, inner));
      props.loading !== null && child.push((0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(vue__WEBPACK_IMPORTED_MODULE_11__/* .Transition */ .eB, {
        name: 'q-transition--fade'
      }, () => props.loading === true ? [(0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('span', {
        key: 'loading',
        class: 'absolute-full flex flex-center'
      }, slots.loading !== void 0 ? slots.loading() : [(0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(_spinner_QSpinner_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A)])] : null));
      return (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .withDirectives */ .bo)((0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(linkTag.value, nodeProps.value, child), [[_directives_ripple_Ripple_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A, ripple.value, void 0, rippleProps.value]]);
    };
  }
}));

/***/ }),

/***/ 3495:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   Y6: () => (/* binding */ useBtnProps),
/* harmony export */   cv: () => (/* binding */ getBtnDesignAttr)
/* harmony export */ });
/* unused harmony exports btnPadding, defaultSizes, btnDesignOptions, getBtnDesign, nonRoundBtnProps */
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1758);
/* harmony import */ var _composables_private_use_align_use_align_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);
/* harmony import */ var _composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1906);
/* harmony import */ var _composables_private_use_router_link_use_router_link_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7502);





const btnPadding = {
  none: 0,
  xs: 4,
  sm: 8,
  md: 16,
  lg: 24,
  xl: 32
};
const defaultSizes = {
  xs: 8,
  sm: 10,
  md: 14,
  lg: 20,
  xl: 24
};
const formTypes = ['button', 'submit', 'reset'];
const mediaTypeRE = /[^\s]\/[^\s]/;
const btnDesignOptions = ['flat', 'outline', 'push', 'unelevated'];
function getBtnDesign(props, defaultValue) {
  if (props.flat === true) return 'flat';
  if (props.outline === true) return 'outline';
  if (props.push === true) return 'push';
  if (props.unelevated === true) return 'unelevated';
  return defaultValue;
}
function getBtnDesignAttr(props) {
  const design = getBtnDesign(props);
  return design !== void 0 ? {
    [design]: true
  } : {};
}
const nonRoundBtnProps = {
  ..._composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_2__/* .useSizeProps */ .x_,
  ..._composables_private_use_router_link_use_router_link_js__WEBPACK_IMPORTED_MODULE_3__/* .useRouterLinkNonMatchingProps */ .ni,
  type: {
    type: String,
    default: 'button'
  },
  label: [Number, String],
  icon: String,
  iconRight: String,
  ...btnDesignOptions.reduce((acc, val) => (acc[val] = Boolean) && acc, {}),
  square: Boolean,
  rounded: Boolean,
  glossy: Boolean,
  size: String,
  fab: Boolean,
  fabMini: Boolean,
  padding: String,
  color: String,
  textColor: String,
  noCaps: Boolean,
  noWrap: Boolean,
  dense: Boolean,
  tabindex: [Number, String],
  ripple: {
    type: [Boolean, Object],
    default: true
  },
  align: {
    ..._composables_private_use_align_use_align_js__WEBPACK_IMPORTED_MODULE_1__/* .useAlignProps */ .fR.align,
    default: 'center'
  },
  stack: Boolean,
  stretch: Boolean,
  loading: {
    type: Boolean,
    default: null
  },
  disable: Boolean
};
const useBtnProps = {
  ...nonRoundBtnProps,
  round: Boolean
};
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(props) {
  const sizeStyle = (0,_composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Ay)(props, defaultSizes);
  const alignClass = (0,_composables_private_use_align_use_align_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Ay)(props);
  const {
    hasRouterLink,
    hasLink,
    linkTag,
    linkAttrs,
    navigateOnClick
  } = (0,_composables_private_use_router_link_use_router_link_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay)({
    fallbackTag: 'button'
  });
  const style = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
    const obj = props.fab === false && props.fabMini === false ? sizeStyle.value : {};
    return props.padding !== void 0 ? Object.assign({}, obj, {
      padding: props.padding.split(/\s+/).map(v => v in btnPadding ? btnPadding[v] + 'px' : v).join(' '),
      minWidth: '0',
      minHeight: '0'
    }) : obj;
  });
  const isRounded = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => props.rounded === true || props.fab === true || props.fabMini === true);
  const isActionable = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => props.disable !== true && props.loading !== true);
  const tabIndex = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => isActionable.value === true ? props.tabindex || 0 : -1);
  const design = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => getBtnDesign(props, 'standard'));
  const attributes = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
    const acc = {
      tabindex: tabIndex.value
    };
    if (hasLink.value === true) {
      Object.assign(acc, linkAttrs.value);
    } else if (formTypes.includes(props.type) === true) {
      acc.type = props.type;
    }
    if (linkTag.value === 'a') {
      if (props.disable === true) {
        acc['aria-disabled'] = 'true';
      } else if (acc.href === void 0) {
        acc.role = 'button';
      }
      if (hasRouterLink.value !== true && mediaTypeRE.test(props.type) === true) {
        acc.type = props.type;
      }
    } else if (props.disable === true) {
      acc.disabled = '';
      acc['aria-disabled'] = 'true';
    }
    if (props.loading === true && props.percentage !== void 0) {
      Object.assign(acc, {
        role: 'progressbar',
        'aria-valuemin': 0,
        'aria-valuemax': 100,
        'aria-valuenow': props.percentage
      });
    }
    return acc;
  });
  const classes = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
    let colors;
    if (props.color !== void 0) {
      if (props.flat === true || props.outline === true) {
        colors = `text-${props.textColor || props.color}`;
      } else {
        colors = `bg-${props.color} text-${props.textColor || 'white'}`;
      }
    } else if (props.textColor) {
      colors = `text-${props.textColor}`;
    }
    const shape = props.round === true ? 'round' : `rectangle${isRounded.value === true ? ' q-btn--rounded' : props.square === true ? ' q-btn--square' : ''}`;
    return `q-btn--${design.value} q-btn--${shape}` + (colors !== void 0 ? ' ' + colors : '') + (isActionable.value === true ? ' q-btn--actionable q-focusable q-hoverable' : props.disable === true ? ' disabled' : '') + (props.fab === true ? ' q-btn--fab' : props.fabMini === true ? ' q-btn--fab-mini' : '') + (props.noCaps === true ? ' q-btn--no-uppercase' : '') + (props.dense === true ? ' q-btn--dense' : '') + (props.stretch === true ? ' no-border-radius self-stretch' : '') + (props.glossy === true ? ' glossy' : '') + (props.square ? ' q-btn--square' : '');
  });
  const innerClasses = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => alignClass.value + (props.stack === true ? ' column' : ' row') + (props.noWrap === true ? ' no-wrap text-no-wrap' : '') + (props.loading === true ? ' q-btn__content--hidden' : ''));
  return {
    classes,
    style,
    innerClasses,
    attributes,
    hasLink,
    linkTag,
    navigateOnClick,
    isActionable
  };
}

/***/ }),

/***/ 3316:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1758);
/* harmony import */ var _composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6372);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5139);




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__/* .createComponent */ .a0)({
  name: 'QCard',
  props: {
    ..._composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__/* .useDarkProps */ .C,
    tag: {
      type: String,
      default: 'div'
    },
    square: Boolean,
    flat: Boolean,
    bordered: Boolean
  },
  setup(props, {
    slots
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .getCurrentInstance */ .nI)();
    const isDark = (0,_composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(props, $q);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => 'q-card' + (isDark.value === true ? ' q-card--dark q-dark' : '') + (props.bordered === true ? ' q-card--bordered' : '') + (props.square === true ? ' q-card--square no-border-radius' : '') + (props.flat === true ? ' q-card--flat no-shadow' : ''));
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)(props.tag, {
      class: classes.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 2669:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1758);
/* harmony import */ var _composables_private_use_align_use_align_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5139);




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__/* .createComponent */ .a0)({
  name: 'QCardActions',
  props: {
    ..._composables_private_use_align_use_align_js__WEBPACK_IMPORTED_MODULE_0__/* .useAlignProps */ .fR,
    vertical: Boolean
  },
  setup(props, {
    slots
  }) {
    const alignClass = (0,_composables_private_use_align_use_align_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay)(props);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => `q-card__actions ${alignClass.value}` + ` q-card__actions--${props.vertical === true ? 'vert column' : 'horiz row'}`);
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('div', {
      class: classes.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 4189:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5139);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QCardSection',
  props: {
    tag: {
      type: String,
      default: 'div'
    },
    horizontal: Boolean
  },
  setup(props, {
    slots
  }) {
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => 'q-card__section' + ` q-card__section--${props.horizontal === true ? 'horiz row no-wrap' : 'vert'}`);
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)(props.tag, {
      class: classes.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 9652:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1758);
/* harmony import */ var _btn_QBtn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6384);
/* harmony import */ var _composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6372);
/* harmony import */ var _composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(447);
/* harmony import */ var _composables_private_use_fullscreen_use_fullscreen_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8450);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9467);
/* harmony import */ var _utils_is_is_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1054);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(5139);









const navigationPositionOptions = ['top', 'right', 'bottom', 'left'];
const controlTypeOptions = ['regular', 'flat', 'outline', 'push', 'unelevated'];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_6__/* .createComponent */ .a0)({
  name: 'QCarousel',
  props: {
    ..._composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_2__/* .useDarkProps */ .C,
    ..._composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_3__/* .usePanelProps */ .Qn,
    ..._composables_private_use_fullscreen_use_fullscreen_js__WEBPACK_IMPORTED_MODULE_4__/* .useFullscreenProps */ .xw,
    transitionPrev: {
      // usePanelParentProps override
      type: String,
      default: 'fade'
    },
    transitionNext: {
      // usePanelParentProps override
      type: String,
      default: 'fade'
    },
    height: String,
    padding: Boolean,
    controlColor: String,
    controlTextColor: String,
    controlType: {
      type: String,
      validator: v => controlTypeOptions.includes(v),
      default: 'flat'
    },
    autoplay: [Number, Boolean],
    arrows: Boolean,
    prevIcon: String,
    nextIcon: String,
    navigation: Boolean,
    navigationPosition: {
      type: String,
      validator: v => navigationPositionOptions.includes(v)
    },
    navigationIcon: String,
    navigationActiveIcon: String,
    thumbnails: Boolean
  },
  emits: [..._composables_private_use_fullscreen_use_fullscreen_js__WEBPACK_IMPORTED_MODULE_4__/* .useFullscreenEmits */ .b8, ..._composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_3__/* .usePanelEmits */ .g],
  setup(props, {
    slots
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .getCurrentInstance */ .nI)();
    const isDark = (0,_composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A)(props, $q);
    let timer = null,
      panelsLen;
    const {
      updatePanelsList,
      getPanelContent,
      panelDirectives,
      goToPanel,
      previousPanel,
      nextPanel,
      getEnabledPanels,
      panelIndex
    } = (0,_composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay)();
    const {
      inFullscreen
    } = (0,_composables_private_use_fullscreen_use_fullscreen_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .Ay)();
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => inFullscreen.value !== true && props.height !== void 0 ? {
      height: props.height
    } : {});
    const direction = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => props.vertical === true ? 'vertical' : 'horizontal');
    const navigationPosition = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => props.navigationPosition || (props.vertical === true ? 'right' : 'bottom'));
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => `q-carousel q-panel-parent q-carousel--with${props.padding === true ? '' : 'out'}-padding` + (inFullscreen.value === true ? ' fullscreen' : '') + (isDark.value === true ? ' q-carousel--dark q-dark' : '') + (props.arrows === true ? ` q-carousel--arrows-${direction.value}` : '') + (props.navigation === true ? ` q-carousel--navigation-${navigationPosition.value}` : ''));
    const arrowIcons = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => {
      const ico = [props.prevIcon || $q.iconSet.carousel[props.vertical === true ? 'up' : 'left'], props.nextIcon || $q.iconSet.carousel[props.vertical === true ? 'down' : 'right']];
      return props.vertical === false && $q.lang.rtl === true ? ico.reverse() : ico;
    });
    const navIcon = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => props.navigationIcon || $q.iconSet.carousel.navigationIcon);
    const navActiveIcon = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => props.navigationActiveIcon || navIcon.value);
    const controlProps = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => ({
      color: props.controlColor,
      textColor: props.controlTextColor,
      round: true,
      [props.controlType]: true,
      dense: true
    }));
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .watch */ .wB)(() => props.modelValue, () => {
      if (props.autoplay) {
        startTimer();
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .watch */ .wB)(() => props.autoplay, val => {
      if (val) {
        startTimer();
      } else if (timer !== null) {
        clearTimeout(timer);
        timer = null;
      }
    });
    function startTimer() {
      const duration = (0,_utils_is_is_js__WEBPACK_IMPORTED_MODULE_5__/* .isNumber */ .Et)(props.autoplay) === true ? Math.abs(props.autoplay) : 5000;
      timer !== null && clearTimeout(timer);
      timer = setTimeout(() => {
        timer = null;
        if (duration >= 0) {
          nextPanel();
        } else {
          previousPanel();
        }
      }, duration);
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .onMounted */ .sV)(() => {
      props.autoplay && startTimer();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .onBeforeUnmount */ .xo)(() => {
      timer !== null && clearTimeout(timer);
    });
    function getNavigationContainer(type, mapping) {
      return (0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('div', {
        class: 'q-carousel__control q-carousel__navigation no-wrap absolute flex' + ` q-carousel__navigation--${type} q-carousel__navigation--${navigationPosition.value}` + (props.controlColor !== void 0 ? ` text-${props.controlColor}` : '')
      }, [(0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('div', {
        class: 'q-carousel__navigation-inner flex flex-center no-wrap'
      }, getEnabledPanels().map(mapping))]);
    }
    function getContent() {
      const node = [];
      if (props.navigation === true) {
        const fn = slots['navigation-icon'] !== void 0 ? slots['navigation-icon'] : opts => (0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(_btn_QBtn_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
          key: 'nav' + opts.name,
          class: `q-carousel__navigation-icon q-carousel__navigation-icon--${opts.active === true ? '' : 'in'}active`,
          ...opts.btnProps,
          onClick: opts.onClick
        });
        const maxIndex = panelsLen - 1;
        node.push(getNavigationContainer('buttons', (panel, index) => {
          const name = panel.props.name;
          const active = panelIndex.value === index;
          return fn({
            index,
            maxIndex,
            name,
            active,
            btnProps: {
              icon: active === true ? navActiveIcon.value : navIcon.value,
              size: 'sm',
              ...controlProps.value
            },
            onClick: () => {
              goToPanel(name);
            }
          });
        }));
      } else if (props.thumbnails === true) {
        const color = props.controlColor !== void 0 ? ` text-${props.controlColor}` : '';
        node.push(getNavigationContainer('thumbnails', panel => {
          const slide = panel.props;
          return (0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('img', {
            key: 'tmb#' + slide.name,
            class: `q-carousel__thumbnail q-carousel__thumbnail--${slide.name === props.modelValue ? '' : 'in'}active` + color,
            src: slide.imgSrc || slide['img-src'],
            onClick: () => {
              goToPanel(slide.name);
            }
          });
        }));
      }
      if (props.arrows === true && panelIndex.value >= 0) {
        if (props.infinite === true || panelIndex.value > 0) {
          node.push((0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('div', {
            key: 'prev',
            class: `q-carousel__control q-carousel__arrow q-carousel__prev-arrow q-carousel__prev-arrow--${direction.value} absolute flex flex-center`
          }, [(0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(_btn_QBtn_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
            icon: arrowIcons.value[0],
            ...controlProps.value,
            onClick: previousPanel
          })]));
        }
        if (props.infinite === true || panelIndex.value < panelsLen - 1) {
          node.push((0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('div', {
            key: 'next',
            class: 'q-carousel__control q-carousel__arrow q-carousel__next-arrow' + ` q-carousel__next-arrow--${direction.value} absolute flex flex-center`
          }, [(0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(_btn_QBtn_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
            icon: arrowIcons.value[1],
            ...controlProps.value,
            onClick: nextPanel
          })]));
        }
      }
      return (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_8__/* .hMergeSlot */ .Hp)(slots.control, node);
    }
    return () => {
      panelsLen = updatePanelsList(slots);
      return (0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('div', {
        class: classes.value,
        style: style.value
      }, [(0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_8__/* .hDir */ .Kf)('div', {
        class: 'q-carousel__slides-container'
      }, getPanelContent(), 'sl-cont', props.swipeable, () => panelDirectives.value)].concat(getContent()));
    };
  }
}));

/***/ }),

/***/ 8951:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9467);
/* harmony import */ var _composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(447);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5139);




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__/* .createComponent */ .a0)({
  name: 'QCarouselSlide',
  props: {
    ..._composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_0__/* .usePanelChildProps */ .hb,
    imgSrc: String
  },
  setup(props, {
    slots
  }) {
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => props.imgSrc ? {
      backgroundImage: `url("${props.imgSrc}")`
    } : {});
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('div', {
      class: 'q-carousel__slide',
      style: style.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 460:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1758);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(492);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9467);
/* harmony import */ var _use_checkbox_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8018);




const bgNode = (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('div', {
  key: 'svg',
  class: 'q-checkbox__bg absolute'
}, [(0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('svg', {
  class: 'q-checkbox__svg fit absolute-full',
  viewBox: '0 0 24 24'
}, [(0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('path', {
  class: 'q-checkbox__truthy',
  fill: 'none',
  d: 'M1.73,12.91 8.1,19.28 22.79,4.59'
}), (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('path', {
  class: 'q-checkbox__indet',
  d: 'M4,14H20V10H4'
})])]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__/* .createComponent */ .a0)({
  name: 'QCheckbox',
  props: _use_checkbox_js__WEBPACK_IMPORTED_MODULE_1__/* .useCheckboxProps */ .jh,
  emits: _use_checkbox_js__WEBPACK_IMPORTED_MODULE_1__/* .useCheckboxEmits */ .LA,
  setup(props) {
    function getInner(isTrue, isIndeterminate) {
      const icon = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => (isTrue.value === true ? props.checkedIcon : isIndeterminate.value === true ? props.indeterminateIcon : props.uncheckedIcon) || null);
      return () => icon.value !== null ? [(0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('div', {
        key: 'icon',
        class: 'q-checkbox__icon-container absolute-full flex flex-center no-wrap'
      }, [(0,vue__WEBPACK_IMPORTED_MODULE_2__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A, {
        class: 'q-checkbox__icon',
        name: icon.value
      })])] : [bgNode];
    }
    return (0,_use_checkbox_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Ay)('checkbox', getInner);
  }
}));

/***/ }),

/***/ 8018:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Ay: () => (/* binding */ use_checkbox),
  LA: () => (/* binding */ useCheckboxEmits),
  jh: () => (/* binding */ useCheckboxProps)
});

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.push.js
var es_array_push = __webpack_require__(239);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(8734);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-dark/use-dark.js
var use_dark = __webpack_require__(6372);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-size/use-size.js
var use_size = __webpack_require__(1906);
;// CONCATENATED MODULE: ./node_modules/quasar/src/composables/private.use-refocus-target/use-refocus-target.js

/* harmony default export */ function use_refocus_target(props, rootRef) {
  const refocusRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
  const refocusTargetEl = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    if (props.disable === true) {
      return null;
    }
    return (0,runtime_core_esm_bundler.h)('span', {
      ref: refocusRef,
      class: 'no-outline',
      tabindex: -1
    });
  });
  function refocusTarget(e) {
    const root = rootRef.value;
    if (e !== void 0 && e.type.indexOf('key') === 0) {
      if (root !== null && document.activeElement !== root && root.contains(document.activeElement) === true) {
        root.focus();
      }
    } else if (refocusRef.value !== null && (e === void 0 || root !== null && root.contains(e.target) === true)) {
      refocusRef.value.focus();
    }
  }
  return {
    refocusTargetEl,
    refocusTarget
  };
}
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/use-form/private.use-form.js
var private_use_form = __webpack_require__(2510);
;// CONCATENATED MODULE: ./node_modules/quasar/src/utils/private.option-sizes/option-sizes.js
/* harmony default export */ const option_sizes = ({
  xs: 30,
  sm: 35,
  md: 40,
  lg: 50,
  xl: 60
});
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.render/render.js
var render = __webpack_require__(5139);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/checkbox/use-checkbox.js









const useCheckboxProps = {
  ...use_dark/* useDarkProps */.C,
  ...use_size/* useSizeProps */.x_,
  ...private_use_form/* useFormProps */.Sc,
  modelValue: {
    required: true,
    default: null
  },
  val: {},
  trueValue: {
    default: true
  },
  falseValue: {
    default: false
  },
  indeterminateValue: {
    default: null
  },
  checkedIcon: String,
  uncheckedIcon: String,
  indeterminateIcon: String,
  toggleOrder: {
    type: String,
    validator: v => v === 'tf' || v === 'ft'
  },
  toggleIndeterminate: Boolean,
  label: String,
  leftLabel: Boolean,
  color: String,
  keepColor: Boolean,
  dense: Boolean,
  disable: Boolean,
  tabindex: [String, Number]
};
const useCheckboxEmits = ['update:modelValue'];
/* harmony default export */ function use_checkbox(type, getInner) {
  const {
    props,
    slots,
    emit,
    proxy
  } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
  const {
    $q
  } = proxy;
  const isDark = (0,use_dark/* default */.A)(props, $q);
  const rootRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
  const {
    refocusTargetEl,
    refocusTarget
  } = use_refocus_target(props, rootRef);
  const sizeStyle = (0,use_size/* default */.Ay)(props, option_sizes);
  const modelIsArray = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.val !== void 0 && Array.isArray(props.modelValue));
  const index = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const val = (0,reactivity_esm_bundler/* toRaw */.ux)(props.val);
    return modelIsArray.value === true ? props.modelValue.findIndex(opt => (0,reactivity_esm_bundler/* toRaw */.ux)(opt) === val) : -1;
  });
  const isTrue = (0,runtime_core_esm_bundler/* computed */.EW)(() => modelIsArray.value === true ? index.value !== -1 : (0,reactivity_esm_bundler/* toRaw */.ux)(props.modelValue) === (0,reactivity_esm_bundler/* toRaw */.ux)(props.trueValue));
  const isFalse = (0,runtime_core_esm_bundler/* computed */.EW)(() => modelIsArray.value === true ? index.value === -1 : (0,reactivity_esm_bundler/* toRaw */.ux)(props.modelValue) === (0,reactivity_esm_bundler/* toRaw */.ux)(props.falseValue));
  const isIndeterminate = (0,runtime_core_esm_bundler/* computed */.EW)(() => isTrue.value === false && isFalse.value === false);
  const tabindex = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.disable === true ? -1 : props.tabindex || 0);
  const classes = (0,runtime_core_esm_bundler/* computed */.EW)(() => `q-${type} cursor-pointer no-outline row inline no-wrap items-center` + (props.disable === true ? ' disabled' : '') + (isDark.value === true ? ` q-${type}--dark` : '') + (props.dense === true ? ` q-${type}--dense` : '') + (props.leftLabel === true ? ' reverse' : ''));
  const innerClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const state = isTrue.value === true ? 'truthy' : isFalse.value === true ? 'falsy' : 'indet';
    const color = props.color !== void 0 && (props.keepColor === true || (type === 'toggle' ? isTrue.value === true : isFalse.value !== true)) ? ` text-${props.color}` : '';
    return `q-${type}__inner relative-position non-selectable q-${type}__inner--${state}${color}`;
  });
  const formAttrs = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const prop = {
      type: 'checkbox'
    };
    props.name !== void 0 && Object.assign(prop, {
      // see https://vuejs.org/guide/extras/render-function.html#creating-vnodes (.prop)
      '.checked': isTrue.value,
      '^checked': isTrue.value === true ? 'checked' : void 0,
      name: props.name,
      value: modelIsArray.value === true ? props.val : props.trueValue
    });
    return prop;
  });
  const injectFormInput = (0,private_use_form/* useFormInject */.vq)(formAttrs);
  const attributes = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const attrs = {
      tabindex: tabindex.value,
      role: type === 'toggle' ? 'switch' : 'checkbox',
      'aria-label': props.label,
      'aria-checked': isIndeterminate.value === true ? 'mixed' : isTrue.value === true ? 'true' : 'false'
    };
    if (props.disable === true) {
      attrs['aria-disabled'] = 'true';
    }
    return attrs;
  });
  function onClick(e) {
    if (e !== void 0) {
      (0,event_event/* stopAndPrevent */.Gu)(e);
      refocusTarget(e);
    }
    if (props.disable !== true) {
      emit('update:modelValue', getNextValue(), e);
    }
  }
  function getNextValue() {
    if (modelIsArray.value === true) {
      if (isTrue.value === true) {
        const val = props.modelValue.slice();
        val.splice(index.value, 1);
        return val;
      }
      return props.modelValue.concat([props.val]);
    }
    if (isTrue.value === true) {
      if (props.toggleOrder !== 'ft' || props.toggleIndeterminate === false) {
        return props.falseValue;
      }
    } else if (isFalse.value === true) {
      if (props.toggleOrder === 'ft' || props.toggleIndeterminate === false) {
        return props.trueValue;
      }
    } else {
      return props.toggleOrder !== 'ft' ? props.trueValue : props.falseValue;
    }
    return props.indeterminateValue;
  }
  function onKeydown(e) {
    if (e.keyCode === 13 || e.keyCode === 32) {
      (0,event_event/* stopAndPrevent */.Gu)(e);
    }
  }
  function onKeyup(e) {
    if (e.keyCode === 13 || e.keyCode === 32) {
      onClick(e);
    }
  }
  const getInnerContent = getInner(isTrue, isIndeterminate);

  // expose public methods
  Object.assign(proxy, {
    toggle: onClick
  });
  return () => {
    const inner = getInnerContent();
    props.disable !== true && injectFormInput(inner, 'unshift', ` q-${type}__native absolute q-ma-none q-pa-none`);
    const child = [(0,runtime_core_esm_bundler.h)('div', {
      class: innerClass.value,
      style: sizeStyle.value,
      'aria-hidden': 'true'
    }, inner)];
    if (refocusTargetEl.value !== null) {
      child.push(refocusTargetEl.value);
    }
    const label = props.label !== void 0 ? (0,render/* hMergeSlot */.Hp)(slots.default, [props.label]) : (0,render/* hSlot */.zm)(slots.default);
    label !== void 0 && child.push((0,runtime_core_esm_bundler.h)('div', {
      class: `q-${type}__label q-anchor--skip`
    }, label));
    return (0,runtime_core_esm_bundler.h)('div', {
      ref: rootRef,
      class: classes.value,
      ...attributes.value,
      onClick,
      onKeydown,
      onKeyup
    }, child);
  };
}

/***/ }),

/***/ 8670:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ QDate)
});

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.push.js
var es_array_push = __webpack_require__(239);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(8734);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js
var runtime_dom_esm_bundler = __webpack_require__(9104);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/btn/QBtn.js
var QBtn = __webpack_require__(6384);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-dark/use-dark.js
var use_dark = __webpack_require__(6372);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/use-render-cache/use-render-cache.js
var use_render_cache = __webpack_require__(3403);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/use-form/private.use-form.js
var private_use_form = __webpack_require__(2510);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/date/private.persian.js
var private_persian = __webpack_require__(9617);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/format/format.js
var format = __webpack_require__(2732);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/date/use-datetime.js




const calendars = ['gregorian', 'persian'];
const useDatetimeProps = {
  // should define modelValue in the target component

  mask: {
    type: String
  },
  locale: Object,
  calendar: {
    type: String,
    validator: v => calendars.includes(v),
    default: 'gregorian'
  },
  landscape: Boolean,
  color: String,
  textColor: String,
  square: Boolean,
  flat: Boolean,
  bordered: Boolean,
  readonly: Boolean,
  disable: Boolean
};
const useDatetimeEmits = ['update:modelValue'];
function getDayHash(date) {
  return date.year + '/' + (0,format/* pad */.eV)(date.month) + '/' + (0,format/* pad */.eV)(date.day);
}
/* harmony default export */ function use_datetime(props, $q) {
  const editable = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    return props.disable !== true && props.readonly !== true;
  });
  const tabindex = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    return editable.value === true ? 0 : -1;
  });
  const headerClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const cls = [];
    props.color !== void 0 && cls.push(`bg-${props.color}`);
    props.textColor !== void 0 && cls.push(`text-${props.textColor}`);
    return cls.join(' ');
  });
  function getLocale() {
    return props.locale !== void 0 ? {
      ...$q.lang.date,
      ...props.locale
    } : $q.lang.date;
  }
  function getCurrentDate(dateOnly) {
    const d = new Date();
    const timeFill = dateOnly === true ? null : 0;
    if (props.calendar === 'persian') {
      const jDate = (0,private_persian/* toJalaali */.q5)(d);
      return {
        year: jDate.jy,
        month: jDate.jm,
        day: jDate.jd
      };
    }
    return {
      year: d.getFullYear(),
      month: d.getMonth() + 1,
      day: d.getDate(),
      hour: timeFill,
      minute: timeFill,
      second: timeFill,
      millisecond: timeFill
    };
  }
  return {
    editable,
    tabindex,
    headerClass,
    getLocale,
    getCurrentDate
  };
}
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.render/render.js
var render = __webpack_require__(5139);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/date/date.js
var date_date = __webpack_require__(6246);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/is/is.js
var is = __webpack_require__(1054);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/date/QDate.js













const yearsInterval = 20;
const views = ['Calendar', 'Years', 'Months'];
const viewIsValid = v => views.includes(v);
const yearMonthValidator = v => /^-?[\d]+\/[0-1]\d$/.test(v);
const lineStr = ' \u2014 ';
function getMonthHash(date) {
  return date.year + '/' + (0,format/* pad */.eV)(date.month);
}
/* harmony default export */ const QDate = ((0,create/* createComponent */.a0)({
  name: 'QDate',
  props: {
    ...useDatetimeProps,
    ...private_use_form/* useFormProps */.Sc,
    ...use_dark/* useDarkProps */.C,
    modelValue: {
      required: true,
      validator: val => typeof val === 'string' || Array.isArray(val) === true || Object(val) === val || val === null
    },
    multiple: Boolean,
    range: Boolean,
    title: String,
    subtitle: String,
    mask: {
      ...useDatetimeProps.mask,
      // this mask is forced
      // when using persian calendar
      default: 'YYYY/MM/DD'
    },
    defaultYearMonth: {
      type: String,
      validator: yearMonthValidator
    },
    yearsInMonthView: Boolean,
    events: [Array, Function],
    eventColor: [String, Function],
    emitImmediately: Boolean,
    options: [Array, Function],
    navigationMinYearMonth: {
      type: String,
      validator: yearMonthValidator
    },
    navigationMaxYearMonth: {
      type: String,
      validator: yearMonthValidator
    },
    noUnset: Boolean,
    firstDayOfWeek: [String, Number],
    todayBtn: Boolean,
    minimal: Boolean,
    defaultView: {
      type: String,
      default: 'Calendar',
      validator: viewIsValid
    }
  },
  emits: [...useDatetimeEmits, 'rangeStart', 'rangeEnd', 'navigation'],
  setup(props, {
    slots,
    emit
  }) {
    const {
      proxy
    } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
    const {
      $q
    } = proxy;
    const isDark = (0,use_dark/* default */.A)(props, $q);
    const {
      getCache
    } = (0,use_render_cache/* default */.A)();
    const {
      tabindex,
      headerClass,
      getLocale,
      getCurrentDate
    } = use_datetime(props, $q);
    let lastEmitValue;
    const formAttrs = (0,private_use_form/* useFormAttrs */.mj)(props);
    const injectFormInput = (0,private_use_form/* useFormInject */.vq)(formAttrs);
    const blurTargetRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const innerMask = (0,reactivity_esm_bundler/* ref */.KR)(getMask());
    const innerLocale = (0,reactivity_esm_bundler/* ref */.KR)(getLocale());
    const mask = (0,runtime_core_esm_bundler/* computed */.EW)(() => getMask());
    const locale = (0,runtime_core_esm_bundler/* computed */.EW)(() => getLocale());
    const today = (0,runtime_core_esm_bundler/* computed */.EW)(() => getCurrentDate());

    // model of current calendar view:
    const viewModel = (0,reactivity_esm_bundler/* ref */.KR)(getViewModel(innerMask.value, innerLocale.value));
    const view = (0,reactivity_esm_bundler/* ref */.KR)(props.defaultView);
    const direction = (0,runtime_core_esm_bundler/* computed */.EW)(() => $q.lang.rtl === true ? 'right' : 'left');
    const monthDirection = (0,reactivity_esm_bundler/* ref */.KR)(direction.value);
    const yearDirection = (0,reactivity_esm_bundler/* ref */.KR)(direction.value);
    const year = viewModel.value.year;
    const startYear = (0,reactivity_esm_bundler/* ref */.KR)(year - year % yearsInterval - (year < 0 ? yearsInterval : 0));
    const editRange = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const classes = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const type = props.landscape === true ? 'landscape' : 'portrait';
      return `q-date q-date--${type} q-date--${type}-${props.minimal === true ? 'minimal' : 'standard'}` + (isDark.value === true ? ' q-date--dark q-dark' : '') + (props.bordered === true ? ' q-date--bordered' : '') + (props.square === true ? ' q-date--square no-border-radius' : '') + (props.flat === true ? ' q-date--flat no-shadow' : '') + (props.disable === true ? ' disabled' : props.readonly === true ? ' q-date--readonly' : '');
    });
    const computedColor = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      return props.color || 'primary';
    });
    const computedTextColor = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      return props.textColor || 'white';
    });
    const isImmediate = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.emitImmediately === true && props.multiple !== true && props.range !== true);
    const normalizedModel = (0,runtime_core_esm_bundler/* computed */.EW)(() => Array.isArray(props.modelValue) === true ? props.modelValue : props.modelValue !== null && props.modelValue !== void 0 ? [props.modelValue] : []);
    const daysModel = (0,runtime_core_esm_bundler/* computed */.EW)(() => normalizedModel.value.filter(date => typeof date === 'string').map(date => decodeString(date, innerMask.value, innerLocale.value)).filter(date => date.dateHash !== null && date.day !== null && date.month !== null && date.year !== null));
    const rangeModel = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const fn = date => decodeString(date, innerMask.value, innerLocale.value);
      return normalizedModel.value.filter(date => (0,is/* isObject */.Gv)(date) === true && date.from !== void 0 && date.to !== void 0).map(range => ({
        from: fn(range.from),
        to: fn(range.to)
      })).filter(range => range.from.dateHash !== null && range.to.dateHash !== null && range.from.dateHash < range.to.dateHash);
    });
    const getNativeDateFn = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.calendar !== 'persian' ? model => new Date(model.year, model.month - 1, model.day) : model => {
      const gDate = (0,private_persian/* toGregorian */.m6)(model.year, model.month, model.day);
      return new Date(gDate.gy, gDate.gm - 1, gDate.gd);
    });
    const encodeObjectFn = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.calendar === 'persian' ? getDayHash : (date, mask, locale) => (0,date_date/* formatDate */.Yq)(new Date(date.year, date.month - 1, date.day, date.hour, date.minute, date.second, date.millisecond), mask === void 0 ? innerMask.value : mask, locale === void 0 ? innerLocale.value : locale, date.year, date.timezoneOffset));
    const daysInModel = (0,runtime_core_esm_bundler/* computed */.EW)(() => daysModel.value.length + rangeModel.value.reduce((acc, range) => acc + 1 + (0,date_date/* getDateDiff */.ie)(getNativeDateFn.value(range.to), getNativeDateFn.value(range.from)), 0));
    const headerTitle = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      if (props.title !== void 0 && props.title !== null && props.title.length !== 0) {
        return props.title;
      }
      if (editRange.value !== null) {
        const model = editRange.value.init;
        const date = getNativeDateFn.value(model);
        return innerLocale.value.daysShort[date.getDay()] + ', ' + innerLocale.value.monthsShort[model.month - 1] + ' ' + model.day + lineStr + '?';
      }
      if (daysInModel.value === 0) {
        return lineStr;
      }
      if (daysInModel.value > 1) {
        return `${daysInModel.value} ${innerLocale.value.pluralDay}`;
      }
      const model = daysModel.value[0];
      const date = getNativeDateFn.value(model);
      if (isNaN(date.valueOf()) === true) {
        return lineStr;
      }
      if (innerLocale.value.headerTitle !== void 0) {
        return innerLocale.value.headerTitle(date, model);
      }
      return innerLocale.value.daysShort[date.getDay()] + ', ' + innerLocale.value.monthsShort[model.month - 1] + ' ' + model.day;
    });
    const minSelectedModel = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const model = daysModel.value.concat(rangeModel.value.map(range => range.from)).sort((a, b) => a.year - b.year || a.month - b.month);
      return model[0];
    });
    const maxSelectedModel = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const model = daysModel.value.concat(rangeModel.value.map(range => range.to)).sort((a, b) => b.year - a.year || b.month - a.month);
      return model[0];
    });
    const headerSubtitle = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      if (props.subtitle !== void 0 && props.subtitle !== null && props.subtitle.length !== 0) {
        return props.subtitle;
      }
      if (daysInModel.value === 0) {
        return lineStr;
      }
      if (daysInModel.value > 1) {
        const from = minSelectedModel.value;
        const to = maxSelectedModel.value;
        const month = innerLocale.value.monthsShort;
        return month[from.month - 1] + (from.year !== to.year ? ' ' + from.year + lineStr + month[to.month - 1] + ' ' : from.month !== to.month ? lineStr + month[to.month - 1] : '') + ' ' + to.year;
      }
      return daysModel.value[0].year;
    });
    const dateArrow = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const val = [$q.iconSet.datetime.arrowLeft, $q.iconSet.datetime.arrowRight];
      return $q.lang.rtl === true ? val.reverse() : val;
    });
    const computedFirstDayOfWeek = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.firstDayOfWeek !== void 0 ? Number(props.firstDayOfWeek) : innerLocale.value.firstDayOfWeek);
    const daysOfWeek = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const days = innerLocale.value.daysShort,
        first = computedFirstDayOfWeek.value;
      return first > 0 ? days.slice(first, 7).concat(days.slice(0, first)) : days;
    });
    const daysInMonth = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const date = viewModel.value;
      return props.calendar !== 'persian' ? new Date(date.year, date.month, 0).getDate() : (0,private_persian/* jalaaliMonthLength */.fB)(date.year, date.month);
    });
    const evtColor = (0,runtime_core_esm_bundler/* computed */.EW)(() => typeof props.eventColor === 'function' ? props.eventColor : () => props.eventColor);
    const minNav = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      if (props.navigationMinYearMonth === void 0) {
        return null;
      }
      const data = props.navigationMinYearMonth.split('/');
      return {
        year: parseInt(data[0], 10),
        month: parseInt(data[1], 10)
      };
    });
    const maxNav = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      if (props.navigationMaxYearMonth === void 0) {
        return null;
      }
      const data = props.navigationMaxYearMonth.split('/');
      return {
        year: parseInt(data[0], 10),
        month: parseInt(data[1], 10)
      };
    });
    const navBoundaries = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const data = {
        month: {
          prev: true,
          next: true
        },
        year: {
          prev: true,
          next: true
        }
      };
      if (minNav.value !== null && minNav.value.year >= viewModel.value.year) {
        data.year.prev = false;
        if (minNav.value.year === viewModel.value.year && minNav.value.month >= viewModel.value.month) {
          data.month.prev = false;
        }
      }
      if (maxNav.value !== null && maxNav.value.year <= viewModel.value.year) {
        data.year.next = false;
        if (maxNav.value.year === viewModel.value.year && maxNav.value.month <= viewModel.value.month) {
          data.month.next = false;
        }
      }
      return data;
    });
    const daysMap = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const map = {};
      daysModel.value.forEach(entry => {
        const hash = getMonthHash(entry);
        if (map[hash] === void 0) {
          map[hash] = [];
        }
        map[hash].push(entry.day);
      });
      return map;
    });
    const rangeMap = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const map = {};
      rangeModel.value.forEach(entry => {
        const hashFrom = getMonthHash(entry.from);
        const hashTo = getMonthHash(entry.to);
        if (map[hashFrom] === void 0) {
          map[hashFrom] = [];
        }
        map[hashFrom].push({
          from: entry.from.day,
          to: hashFrom === hashTo ? entry.to.day : void 0,
          range: entry
        });
        if (hashFrom < hashTo) {
          let hash;
          const {
            year,
            month
          } = entry.from;
          const cur = month < 12 ? {
            year,
            month: month + 1
          } : {
            year: year + 1,
            month: 1
          };
          while ((hash = getMonthHash(cur)) <= hashTo) {
            if (map[hash] === void 0) {
              map[hash] = [];
            }
            map[hash].push({
              from: void 0,
              to: hash === hashTo ? entry.to.day : void 0,
              range: entry
            });
            cur.month++;
            if (cur.month > 12) {
              cur.year++;
              cur.month = 1;
            }
          }
        }
      });
      return map;
    });
    const rangeView = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      if (editRange.value === null) {
        return;
      }
      const {
        init,
        initHash,
        final,
        finalHash
      } = editRange.value;
      const [from, to] = initHash <= finalHash ? [init, final] : [final, init];
      const fromHash = getMonthHash(from);
      const toHash = getMonthHash(to);
      if (fromHash !== viewMonthHash.value && toHash !== viewMonthHash.value) {
        return;
      }
      const view = {};
      if (fromHash === viewMonthHash.value) {
        view.from = from.day;
        view.includeFrom = true;
      } else {
        view.from = 1;
      }
      if (toHash === viewMonthHash.value) {
        view.to = to.day;
        view.includeTo = true;
      } else {
        view.to = daysInMonth.value;
      }
      return view;
    });
    const viewMonthHash = (0,runtime_core_esm_bundler/* computed */.EW)(() => getMonthHash(viewModel.value));
    const selectionDaysMap = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const map = {};
      if (props.options === void 0) {
        for (let i = 1; i <= daysInMonth.value; i++) {
          map[i] = true;
        }
        return map;
      }
      const fn = typeof props.options === 'function' ? props.options : date => props.options.includes(date);
      for (let i = 1; i <= daysInMonth.value; i++) {
        const dayHash = viewMonthHash.value + '/' + (0,format/* pad */.eV)(i);
        map[i] = fn(dayHash);
      }
      return map;
    });
    const eventDaysMap = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const map = {};
      if (props.events === void 0) {
        for (let i = 1; i <= daysInMonth.value; i++) {
          map[i] = false;
        }
      } else {
        const fn = typeof props.events === 'function' ? props.events : date => props.events.includes(date);
        for (let i = 1; i <= daysInMonth.value; i++) {
          const dayHash = viewMonthHash.value + '/' + (0,format/* pad */.eV)(i);
          map[i] = fn(dayHash) === true && evtColor.value(dayHash);
        }
      }
      return map;
    });
    const viewDays = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      let date, endDay;
      const {
        year,
        month
      } = viewModel.value;
      if (props.calendar !== 'persian') {
        date = new Date(year, month - 1, 1);
        endDay = new Date(year, month - 1, 0).getDate();
      } else {
        const gDate = (0,private_persian/* toGregorian */.m6)(year, month, 1);
        date = new Date(gDate.gy, gDate.gm - 1, gDate.gd);
        let prevJM = month - 1;
        let prevJY = year;
        if (prevJM === 0) {
          prevJM = 12;
          prevJY--;
        }
        endDay = (0,private_persian/* jalaaliMonthLength */.fB)(prevJY, prevJM);
      }
      return {
        days: date.getDay() - computedFirstDayOfWeek.value - 1,
        endDay
      };
    });
    const days = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const res = [];
      const {
        days,
        endDay
      } = viewDays.value;
      const len = days < 0 ? days + 7 : days;
      if (len < 6) {
        for (let i = endDay - len; i <= endDay; i++) {
          res.push({
            i,
            fill: true
          });
        }
      }
      const index = res.length;
      for (let i = 1; i <= daysInMonth.value; i++) {
        const day = {
          i,
          event: eventDaysMap.value[i],
          classes: []
        };
        if (selectionDaysMap.value[i] === true) {
          day.in = true;
          day.flat = true;
        }
        res.push(day);
      }

      // if current view has days in model
      if (daysMap.value[viewMonthHash.value] !== void 0) {
        daysMap.value[viewMonthHash.value].forEach(day => {
          const i = index + day - 1;
          Object.assign(res[i], {
            selected: true,
            unelevated: true,
            flat: false,
            color: computedColor.value,
            textColor: computedTextColor.value
          });
        });
      }

      // if current view has ranges in model
      if (rangeMap.value[viewMonthHash.value] !== void 0) {
        rangeMap.value[viewMonthHash.value].forEach(entry => {
          if (entry.from !== void 0) {
            const from = index + entry.from - 1;
            const to = index + (entry.to || daysInMonth.value) - 1;
            for (let day = from; day <= to; day++) {
              Object.assign(res[day], {
                range: entry.range,
                unelevated: true,
                color: computedColor.value,
                textColor: computedTextColor.value
              });
            }
            Object.assign(res[from], {
              rangeFrom: true,
              flat: false
            });
            entry.to !== void 0 && Object.assign(res[to], {
              rangeTo: true,
              flat: false
            });
          } else if (entry.to !== void 0) {
            const to = index + entry.to - 1;
            for (let day = index; day <= to; day++) {
              Object.assign(res[day], {
                range: entry.range,
                unelevated: true,
                color: computedColor.value,
                textColor: computedTextColor.value
              });
            }
            Object.assign(res[to], {
              flat: false,
              rangeTo: true
            });
          } else {
            const to = index + daysInMonth.value - 1;
            for (let day = index; day <= to; day++) {
              Object.assign(res[day], {
                range: entry.range,
                unelevated: true,
                color: computedColor.value,
                textColor: computedTextColor.value
              });
            }
          }
        });
      }
      if (rangeView.value !== void 0) {
        const from = index + rangeView.value.from - 1;
        const to = index + rangeView.value.to - 1;
        for (let day = from; day <= to; day++) {
          res[day].color = computedColor.value;
          res[day].editRange = true;
        }
        if (rangeView.value.includeFrom === true) {
          res[from].editRangeFrom = true;
        }
        if (rangeView.value.includeTo === true) {
          res[to].editRangeTo = true;
        }
      }
      if (viewModel.value.year === today.value.year && viewModel.value.month === today.value.month) {
        res[index + today.value.day - 1].today = true;
      }
      const left = res.length % 7;
      if (left > 0) {
        const afterDays = 7 - left;
        for (let i = 1; i <= afterDays; i++) {
          res.push({
            i,
            fill: true
          });
        }
      }
      res.forEach(day => {
        let cls = 'q-date__calendar-item ';
        if (day.fill === true) {
          cls += 'q-date__calendar-item--fill';
        } else {
          cls += `q-date__calendar-item--${day.in === true ? 'in' : 'out'}`;
          if (day.range !== void 0) {
            cls += ` q-date__range${day.rangeTo === true ? '-to' : day.rangeFrom === true ? '-from' : ''}`;
          }
          if (day.editRange === true) {
            cls += ` q-date__edit-range${day.editRangeFrom === true ? '-from' : ''}${day.editRangeTo === true ? '-to' : ''}`;
          }
          if (day.range !== void 0 || day.editRange === true) {
            cls += ` text-${day.color}`;
          }
        }
        day.classes = cls;
      });
      return res;
    });
    const attributes = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.disable === true ? {
      'aria-disabled': 'true'
    } : {});
    (0,runtime_core_esm_bundler/* watch */.wB)(() => props.modelValue, v => {
      if (lastEmitValue === v) {
        lastEmitValue = 0;
      } else {
        const model = getViewModel(innerMask.value, innerLocale.value);
        updateViewModel(model.year, model.month, model);
      }
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(view, () => {
      if (blurTargetRef.value !== null && proxy.$el.contains(document.activeElement) === true) {
        blurTargetRef.value.focus();
      }
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(() => viewModel.value.year + '|' + viewModel.value.month, () => {
      emit('navigation', {
        year: viewModel.value.year,
        month: viewModel.value.month
      });
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(mask, val => {
      updateValue(val, innerLocale.value, 'mask');
      innerMask.value = val;
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(locale, val => {
      updateValue(innerMask.value, val, 'locale');
      innerLocale.value = val;
    });
    function setToday() {
      const {
        year,
        month,
        day
      } = today.value;
      const date = {
        // contains more props than needed (hour, minute, second, millisecond)
        // but those aren't used in the processing of this "date" variable
        ...viewModel.value,
        // overwriting with today's date
        year,
        month,
        day
      };
      const monthMap = daysMap.value[getMonthHash(date)];
      if (monthMap === void 0 || monthMap.includes(date.day) === false) {
        addToModel(date);
      }
      setCalendarTo(date.year, date.month);
    }
    function setView(viewMode) {
      if (viewIsValid(viewMode) === true) {
        view.value = viewMode;
      }
    }
    function offsetCalendar(type, descending) {
      if (['month', 'year'].includes(type)) {
        const fn = type === 'month' ? goToMonth : goToYear;
        fn(descending === true ? -1 : 1);
      }
    }
    function setCalendarTo(year, month) {
      view.value = 'Calendar';
      updateViewModel(year, month);
    }
    function setEditingRange(from, to) {
      if (props.range === false || !from) {
        editRange.value = null;
        return;
      }
      const init = Object.assign({
        ...viewModel.value
      }, from);
      const final = to !== void 0 ? Object.assign({
        ...viewModel.value
      }, to) : init;
      editRange.value = {
        init,
        initHash: getDayHash(init),
        final,
        finalHash: getDayHash(final)
      };
      setCalendarTo(init.year, init.month);
    }
    function getMask() {
      return props.calendar === 'persian' ? 'YYYY/MM/DD' : props.mask;
    }
    function decodeString(date, mask, locale) {
      return (0,date_date/* __splitDate */.F)(date, mask, locale, props.calendar, {
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0
      });
    }
    function getViewModel(mask, locale) {
      const model = Array.isArray(props.modelValue) === true ? props.modelValue : props.modelValue ? [props.modelValue] : [];
      if (model.length === 0) {
        return getDefaultViewModel();
      }
      const target = model[model.length - 1];
      const decoded = decodeString(target.from !== void 0 ? target.from : target, mask, locale);
      return decoded.dateHash === null ? getDefaultViewModel() : decoded;
    }
    function getDefaultViewModel() {
      let year, month;
      if (props.defaultYearMonth !== void 0) {
        const d = props.defaultYearMonth.split('/');
        year = parseInt(d[0], 10);
        month = parseInt(d[1], 10);
      } else {
        // may come from data() where computed
        // props are not yet available
        const d = today.value !== void 0 ? today.value : getCurrentDate();
        year = d.year;
        month = d.month;
      }
      return {
        year,
        month,
        day: 1,
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0,
        dateHash: year + '/' + (0,format/* pad */.eV)(month) + '/01'
      };
    }
    function goToMonth(offset) {
      let year = viewModel.value.year;
      let month = Number(viewModel.value.month) + offset;
      if (month === 13) {
        month = 1;
        year++;
      } else if (month === 0) {
        month = 12;
        year--;
      }
      updateViewModel(year, month);
      isImmediate.value === true && emitImmediately('month');
    }
    function goToYear(offset) {
      const year = Number(viewModel.value.year) + offset;
      updateViewModel(year, viewModel.value.month);
      isImmediate.value === true && emitImmediately('year');
    }
    function setYear(year) {
      updateViewModel(year, viewModel.value.month);
      view.value = props.defaultView === 'Years' ? 'Months' : 'Calendar';
      isImmediate.value === true && emitImmediately('year');
    }
    function setMonth(month) {
      updateViewModel(viewModel.value.year, month);
      view.value = 'Calendar';
      isImmediate.value === true && emitImmediately('month');
    }
    function toggleDate(date, monthHash) {
      const month = daysMap.value[monthHash];
      const fn = month !== void 0 && month.includes(date.day) === true ? removeFromModel : addToModel;
      fn(date);
    }
    function getShortDate(date) {
      return {
        year: date.year,
        month: date.month,
        day: date.day
      };
    }
    function updateViewModel(year, month, time) {
      if (minNav.value !== null && year <= minNav.value.year) {
        if (month < minNav.value.month || year < minNav.value.year) {
          month = minNav.value.month;
        }
        year = minNav.value.year;
      }
      if (maxNav.value !== null && year >= maxNav.value.year) {
        if (month > maxNav.value.month || year > maxNav.value.year) {
          month = maxNav.value.month;
        }
        year = maxNav.value.year;
      }
      if (time !== void 0) {
        const {
          hour,
          minute,
          second,
          millisecond,
          timezoneOffset,
          timeHash
        } = time;
        Object.assign(viewModel.value, {
          hour,
          minute,
          second,
          millisecond,
          timezoneOffset,
          timeHash
        });
      }
      const newHash = year + '/' + (0,format/* pad */.eV)(month) + '/01';
      if (newHash !== viewModel.value.dateHash) {
        monthDirection.value = viewModel.value.dateHash < newHash === ($q.lang.rtl !== true) ? 'left' : 'right';
        if (year !== viewModel.value.year) {
          yearDirection.value = monthDirection.value;
        }
        (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
          startYear.value = year - year % yearsInterval - (year < 0 ? yearsInterval : 0);
          Object.assign(viewModel.value, {
            year,
            month,
            day: 1,
            dateHash: newHash
          });
        });
      }
    }
    function emitValue(val, action, date) {
      const value = val !== null && val.length === 1 && props.multiple === false ? val[0] : val;
      lastEmitValue = value;
      const {
        reason,
        details
      } = getEmitParams(action, date);
      emit('update:modelValue', value, reason, details);
    }
    function emitImmediately(reason) {
      const date = daysModel.value[0] !== void 0 && daysModel.value[0].dateHash !== null ? {
        ...daysModel.value[0]
      } : {
        ...viewModel.value
      }; // inherit day, hours, minutes, milliseconds...

      // nextTick required because of animation delay in viewModel
      (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
        date.year = viewModel.value.year;
        date.month = viewModel.value.month;
        const maxDay = props.calendar !== 'persian' ? new Date(date.year, date.month, 0).getDate() : (0,private_persian/* jalaaliMonthLength */.fB)(date.year, date.month);
        date.day = Math.min(Math.max(1, date.day), maxDay);
        const value = encodeEntry(date);
        lastEmitValue = value;
        const {
          details
        } = getEmitParams('', date);
        emit('update:modelValue', value, reason, details);
      });
    }
    function getEmitParams(action, date) {
      return date.from !== void 0 ? {
        reason: `${action}-range`,
        details: {
          ...getShortDate(date.target),
          from: getShortDate(date.from),
          to: getShortDate(date.to)
        }
      } : {
        reason: `${action}-day`,
        details: getShortDate(date)
      };
    }
    function encodeEntry(date, mask, locale) {
      return date.from !== void 0 ? {
        from: encodeObjectFn.value(date.from, mask, locale),
        to: encodeObjectFn.value(date.to, mask, locale)
      } : encodeObjectFn.value(date, mask, locale);
    }
    function addToModel(date) {
      let value;
      if (props.multiple === true) {
        if (date.from !== void 0) {
          // we also need to filter out intersections

          const fromHash = getDayHash(date.from);
          const toHash = getDayHash(date.to);
          const days = daysModel.value.filter(day => day.dateHash < fromHash || day.dateHash > toHash);
          const ranges = rangeModel.value.filter(({
            from,
            to
          }) => to.dateHash < fromHash || from.dateHash > toHash);
          value = days.concat(ranges).concat(date).map(entry => encodeEntry(entry));
        } else {
          const model = normalizedModel.value.slice();
          model.push(encodeEntry(date));
          value = model;
        }
      } else {
        value = encodeEntry(date);
      }
      emitValue(value, 'add', date);
    }
    function removeFromModel(date) {
      if (props.noUnset === true) {
        return;
      }
      let model = null;
      if (props.multiple === true && Array.isArray(props.modelValue) === true) {
        const val = encodeEntry(date);
        if (date.from !== void 0) {
          model = props.modelValue.filter(date => date.from !== void 0 ? date.from !== val.from && date.to !== val.to : true);
        } else {
          model = props.modelValue.filter(date => date !== val);
        }
        if (model.length === 0) {
          model = null;
        }
      }
      emitValue(model, 'remove', date);
    }
    function updateValue(mask, locale, reason) {
      const model = daysModel.value.concat(rangeModel.value).map(entry => encodeEntry(entry, mask, locale)).filter(entry => {
        return entry.from !== void 0 ? entry.from.dateHash !== null && entry.to.dateHash !== null : entry.dateHash !== null;
      });
      emit('update:modelValue', (props.multiple === true ? model : model[0]) || null, reason);
    }
    function getHeader() {
      if (props.minimal === true) return;
      return (0,runtime_core_esm_bundler.h)('div', {
        class: 'q-date__header ' + headerClass.value
      }, [(0,runtime_core_esm_bundler.h)('div', {
        class: 'relative-position'
      }, [(0,runtime_core_esm_bundler.h)(runtime_dom_esm_bundler/* Transition */.eB, {
        name: 'q-transition--fade'
      }, () => (0,runtime_core_esm_bundler.h)('div', {
        key: 'h-yr-' + headerSubtitle.value,
        class: 'q-date__header-subtitle q-date__header-link ' + (view.value === 'Years' ? 'q-date__header-link--active' : 'cursor-pointer'),
        tabindex: tabindex.value,
        ...getCache('vY', {
          onClick() {
            view.value = 'Years';
          },
          onKeyup(e) {
            e.keyCode === 13 && (view.value = 'Years');
          }
        })
      }, [headerSubtitle.value]))]), (0,runtime_core_esm_bundler.h)('div', {
        class: 'q-date__header-title relative-position flex no-wrap'
      }, [(0,runtime_core_esm_bundler.h)('div', {
        class: 'relative-position col'
      }, [(0,runtime_core_esm_bundler.h)(runtime_dom_esm_bundler/* Transition */.eB, {
        name: 'q-transition--fade'
      }, () => (0,runtime_core_esm_bundler.h)('div', {
        key: 'h-sub' + headerTitle.value,
        class: 'q-date__header-title-label q-date__header-link ' + (view.value === 'Calendar' ? 'q-date__header-link--active' : 'cursor-pointer'),
        tabindex: tabindex.value,
        ...getCache('vC', {
          onClick() {
            view.value = 'Calendar';
          },
          onKeyup(e) {
            e.keyCode === 13 && (view.value = 'Calendar');
          }
        })
      }, [headerTitle.value]))]), props.todayBtn === true ? (0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
        class: 'q-date__header-today self-start',
        icon: $q.iconSet.datetime.today,
        flat: true,
        size: 'sm',
        round: true,
        tabindex: tabindex.value,
        onClick: setToday
      }) : null])]);
    }
    function getNavigation({
      label,
      type,
      key,
      dir,
      goTo,
      boundaries,
      cls
    }) {
      return [(0,runtime_core_esm_bundler.h)('div', {
        class: 'row items-center q-date__arrow'
      }, [(0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
        round: true,
        dense: true,
        size: 'sm',
        flat: true,
        icon: dateArrow.value[0],
        tabindex: tabindex.value,
        disable: boundaries.prev === false,
        ...getCache('go-#' + type, {
          onClick() {
            goTo(-1);
          }
        })
      })]), (0,runtime_core_esm_bundler.h)('div', {
        class: 'relative-position overflow-hidden flex flex-center' + cls
      }, [(0,runtime_core_esm_bundler.h)(runtime_dom_esm_bundler/* Transition */.eB, {
        name: 'q-transition--jump-' + dir
      }, () => (0,runtime_core_esm_bundler.h)('div', {
        key
      }, [(0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
        flat: true,
        dense: true,
        noCaps: true,
        label,
        tabindex: tabindex.value,
        ...getCache('view#' + type, {
          onClick: () => {
            view.value = type;
          }
        })
      })]))]), (0,runtime_core_esm_bundler.h)('div', {
        class: 'row items-center q-date__arrow'
      }, [(0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
        round: true,
        dense: true,
        size: 'sm',
        flat: true,
        icon: dateArrow.value[1],
        tabindex: tabindex.value,
        disable: boundaries.next === false,
        ...getCache('go+#' + type, {
          onClick() {
            goTo(1);
          }
        })
      })])];
    }
    const renderViews = {
      Calendar: () => [(0,runtime_core_esm_bundler.h)('div', {
        key: 'calendar-view',
        class: 'q-date__view q-date__calendar'
      }, [(0,runtime_core_esm_bundler.h)('div', {
        class: 'q-date__navigation row items-center no-wrap'
      }, getNavigation({
        label: innerLocale.value.months[viewModel.value.month - 1],
        type: 'Months',
        key: viewModel.value.month,
        dir: monthDirection.value,
        goTo: goToMonth,
        boundaries: navBoundaries.value.month,
        cls: ' col'
      }).concat(getNavigation({
        label: viewModel.value.year,
        type: 'Years',
        key: viewModel.value.year,
        dir: yearDirection.value,
        goTo: goToYear,
        boundaries: navBoundaries.value.year,
        cls: ''
      }))), (0,runtime_core_esm_bundler.h)('div', {
        class: 'q-date__calendar-weekdays row items-center no-wrap'
      }, daysOfWeek.value.map(day => (0,runtime_core_esm_bundler.h)('div', {
        class: 'q-date__calendar-item'
      }, [(0,runtime_core_esm_bundler.h)('div', day)]))), (0,runtime_core_esm_bundler.h)('div', {
        class: 'q-date__calendar-days-container relative-position overflow-hidden'
      }, [(0,runtime_core_esm_bundler.h)(runtime_dom_esm_bundler/* Transition */.eB, {
        name: 'q-transition--slide-' + monthDirection.value
      }, () => (0,runtime_core_esm_bundler.h)('div', {
        key: viewMonthHash.value,
        class: 'q-date__calendar-days fit'
      }, days.value.map(day => (0,runtime_core_esm_bundler.h)('div', {
        class: day.classes
      }, [day.in === true ? (0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
        class: day.today === true ? 'q-date__today' : '',
        dense: true,
        flat: day.flat,
        unelevated: day.unelevated,
        color: day.color,
        textColor: day.textColor,
        label: day.i,
        tabindex: tabindex.value,
        ...getCache('day#' + day.i, {
          onClick: () => {
            onDayClick(day.i);
          },
          onMouseover: () => {
            onDayMouseover(day.i);
          }
        })
      }, day.event !== false ? () => (0,runtime_core_esm_bundler.h)('div', {
        class: 'q-date__event bg-' + day.event
      }) : null) : (0,runtime_core_esm_bundler.h)('div', '' + day.i)]))))])])],
      Months() {
        const currentYear = viewModel.value.year === today.value.year;
        const isDisabled = month => {
          return minNav.value !== null && viewModel.value.year === minNav.value.year && minNav.value.month > month || maxNav.value !== null && viewModel.value.year === maxNav.value.year && maxNav.value.month < month;
        };
        const content = innerLocale.value.monthsShort.map((month, i) => {
          const active = viewModel.value.month === i + 1;
          return (0,runtime_core_esm_bundler.h)('div', {
            class: 'q-date__months-item flex flex-center'
          }, [(0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
            class: currentYear === true && today.value.month === i + 1 ? 'q-date__today' : null,
            flat: active !== true,
            label: month,
            unelevated: active,
            color: active === true ? computedColor.value : null,
            textColor: active === true ? computedTextColor.value : null,
            tabindex: tabindex.value,
            disable: isDisabled(i + 1),
            ...getCache('month#' + i, {
              onClick: () => {
                setMonth(i + 1);
              }
            })
          })]);
        });
        props.yearsInMonthView === true && content.unshift((0,runtime_core_esm_bundler.h)('div', {
          class: 'row no-wrap full-width'
        }, [getNavigation({
          label: viewModel.value.year,
          type: 'Years',
          key: viewModel.value.year,
          dir: yearDirection.value,
          goTo: goToYear,
          boundaries: navBoundaries.value.year,
          cls: ' col'
        })]));
        return (0,runtime_core_esm_bundler.h)('div', {
          key: 'months-view',
          class: 'q-date__view q-date__months flex flex-center'
        }, content);
      },
      Years() {
        const start = startYear.value,
          stop = start + yearsInterval,
          years = [];
        const isDisabled = year => {
          return minNav.value !== null && minNav.value.year > year || maxNav.value !== null && maxNav.value.year < year;
        };
        for (let i = start; i <= stop; i++) {
          const active = viewModel.value.year === i;
          years.push((0,runtime_core_esm_bundler.h)('div', {
            class: 'q-date__years-item flex flex-center'
          }, [(0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
            key: 'yr' + i,
            class: today.value.year === i ? 'q-date__today' : null,
            flat: !active,
            label: i,
            dense: true,
            unelevated: active,
            color: active === true ? computedColor.value : null,
            textColor: active === true ? computedTextColor.value : null,
            tabindex: tabindex.value,
            disable: isDisabled(i),
            ...getCache('yr#' + i, {
              onClick: () => {
                setYear(i);
              }
            })
          })]));
        }
        return (0,runtime_core_esm_bundler.h)('div', {
          class: 'q-date__view q-date__years flex flex-center'
        }, [(0,runtime_core_esm_bundler.h)('div', {
          class: 'col-auto'
        }, [(0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
          round: true,
          dense: true,
          flat: true,
          icon: dateArrow.value[0],
          tabindex: tabindex.value,
          disable: isDisabled(start),
          ...getCache('y-', {
            onClick: () => {
              startYear.value -= yearsInterval;
            }
          })
        })]), (0,runtime_core_esm_bundler.h)('div', {
          class: 'q-date__years-content col self-stretch row items-center'
        }, years), (0,runtime_core_esm_bundler.h)('div', {
          class: 'col-auto'
        }, [(0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
          round: true,
          dense: true,
          flat: true,
          icon: dateArrow.value[1],
          tabindex: tabindex.value,
          disable: isDisabled(stop),
          ...getCache('y+', {
            onClick: () => {
              startYear.value += yearsInterval;
            }
          })
        })])]);
      }
    };
    function onDayClick(dayIndex) {
      const day = {
        ...viewModel.value,
        day: dayIndex
      };
      if (props.range === false) {
        toggleDate(day, viewMonthHash.value);
        return;
      }
      if (editRange.value === null) {
        const dayProps = days.value.find(day => day.fill !== true && day.i === dayIndex);
        if (props.noUnset !== true && dayProps.range !== void 0) {
          removeFromModel({
            target: day,
            from: dayProps.range.from,
            to: dayProps.range.to
          });
          return;
        }
        if (dayProps.selected === true) {
          removeFromModel(day);
          return;
        }
        const initHash = getDayHash(day);
        editRange.value = {
          init: day,
          initHash,
          final: day,
          finalHash: initHash
        };
        emit('rangeStart', getShortDate(day));
      } else {
        const initHash = editRange.value.initHash,
          finalHash = getDayHash(day),
          payload = initHash <= finalHash ? {
            from: editRange.value.init,
            to: day
          } : {
            from: day,
            to: editRange.value.init
          };
        editRange.value = null;
        addToModel(initHash === finalHash ? day : {
          target: day,
          ...payload
        });
        emit('rangeEnd', {
          from: getShortDate(payload.from),
          to: getShortDate(payload.to)
        });
      }
    }
    function onDayMouseover(dayIndex) {
      if (editRange.value !== null) {
        const final = {
          ...viewModel.value,
          day: dayIndex
        };
        Object.assign(editRange.value, {
          final,
          finalHash: getDayHash(final)
        });
      }
    }

    // expose public methods
    Object.assign(proxy, {
      setToday,
      setView,
      offsetCalendar,
      setCalendarTo,
      setEditingRange
    });
    return () => {
      const content = [(0,runtime_core_esm_bundler.h)('div', {
        class: 'q-date__content col relative-position'
      }, [(0,runtime_core_esm_bundler.h)(runtime_dom_esm_bundler/* Transition */.eB, {
        name: 'q-transition--fade'
      }, renderViews[view.value])])];
      const def = (0,render/* hSlot */.zm)(slots.default);
      def !== void 0 && content.push((0,runtime_core_esm_bundler.h)('div', {
        class: 'q-date__actions'
      }, def));
      if (props.name !== void 0 && props.disable !== true) {
        injectFormInput(content, 'push');
      }
      return (0,runtime_core_esm_bundler.h)('div', {
        class: classes.value,
        ...attributes.value
      }, [getHeader(), (0,runtime_core_esm_bundler.h)('div', {
        ref: blurTargetRef,
        class: 'q-date__main col column',
        tabindex: -1
      }, content)]);
    };
  }
}));

/***/ }),

/***/ 2156:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(8734);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(9104);
/* harmony import */ var _composables_private_use_history_use_history_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(414);
/* harmony import */ var _composables_use_timeout_use_timeout_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4667);
/* harmony import */ var _composables_use_tick_use_tick_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6019);
/* harmony import */ var _composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2916);
/* harmony import */ var _composables_private_use_transition_use_transition_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(454);
/* harmony import */ var _composables_private_use_portal_use_portal_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2120);
/* harmony import */ var _composables_private_use_prevent_scroll_use_prevent_scroll_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(4970);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(9467);
/* harmony import */ var _utils_dom_dom_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7556);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(5139);
/* harmony import */ var _utils_private_keyboard_escape_key_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8773);
/* harmony import */ var _utils_private_focus_focusout_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(8173);
/* harmony import */ var _utils_private_focus_focus_manager_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(8983);














let maximizedModals = 0;
const positionClass = {
  standard: 'fixed-full flex-center',
  top: 'fixed-top justify-center',
  bottom: 'fixed-bottom justify-center',
  right: 'fixed-right items-center',
  left: 'fixed-left items-center'
};
const defaultTransitions = {
  standard: ['scale', 'scale'],
  top: ['slide-down', 'slide-up'],
  bottom: ['slide-up', 'slide-down'],
  right: ['slide-left', 'slide-right'],
  left: ['slide-right', 'slide-left']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_11__/* .createComponent */ .a0)({
  name: 'QDialog',
  inheritAttrs: false,
  props: {
    ..._composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_3__/* .useModelToggleProps */ .RI,
    ..._composables_private_use_transition_use_transition_js__WEBPACK_IMPORTED_MODULE_4__/* .useTransitionProps */ .d,
    transitionShow: String,
    // override useTransitionProps
    transitionHide: String,
    // override useTransitionProps

    persistent: Boolean,
    autoClose: Boolean,
    allowFocusOutside: Boolean,
    noEscDismiss: Boolean,
    noBackdropDismiss: Boolean,
    noRouteDismiss: Boolean,
    noRefocus: Boolean,
    noFocus: Boolean,
    noShake: Boolean,
    seamless: Boolean,
    maximized: Boolean,
    fullWidth: Boolean,
    fullHeight: Boolean,
    square: Boolean,
    backdropFilter: String,
    position: {
      type: String,
      default: 'standard',
      validator: val => ['standard', 'top', 'bottom', 'left', 'right'].includes(val)
    }
  },
  emits: [..._composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_3__/* .useModelToggleEmits */ .Jl, 'shake', 'click', 'escapeKey'],
  setup(props, {
    slots,
    emit,
    attrs
  }) {
    const vm = (0,vue__WEBPACK_IMPORTED_MODULE_12__/* .getCurrentInstance */ .nI)();
    const innerRef = (0,vue__WEBPACK_IMPORTED_MODULE_13__/* .ref */ .KR)(null);
    const showing = (0,vue__WEBPACK_IMPORTED_MODULE_13__/* .ref */ .KR)(false);
    const animating = (0,vue__WEBPACK_IMPORTED_MODULE_13__/* .ref */ .KR)(false);
    let shakeTimeout = null,
      refocusTarget = null,
      isMaximized,
      avoidAutoClose;
    const hideOnRouteChange = (0,vue__WEBPACK_IMPORTED_MODULE_12__/* .computed */ .EW)(() => props.persistent !== true && props.noRouteDismiss !== true && props.seamless !== true);
    const {
      preventBodyScroll
    } = (0,_composables_private_use_prevent_scroll_use_prevent_scroll_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A)();
    const {
      registerTimeout
    } = (0,_composables_use_timeout_use_timeout_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A)();
    const {
      registerTick,
      removeTick
    } = (0,_composables_use_tick_use_tick_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A)();
    const {
      transitionProps,
      transitionStyle
    } = (0,_composables_private_use_transition_use_transition_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A)(props, () => defaultTransitions[props.position][0], () => defaultTransitions[props.position][1]);
    const backdropStyle = (0,vue__WEBPACK_IMPORTED_MODULE_12__/* .computed */ .EW)(() => transitionStyle.value + (props.backdropFilter !== void 0
    // Safari requires the -webkit prefix
    ? `;backdrop-filter:${props.backdropFilter};-webkit-backdrop-filter:${props.backdropFilter}` : ''));
    const {
      showPortal,
      hidePortal,
      portalIsAccessible,
      renderPortal
    } = (0,_composables_private_use_portal_use_portal_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .A)(vm, innerRef, renderPortalContent, 'dialog');
    const {
      hide
    } = (0,_composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Ay)({
      showing,
      hideOnRouteChange,
      handleShow,
      handleHide,
      processOnMount: true
    });
    const {
      addToHistory,
      removeFromHistory
    } = (0,_composables_private_use_history_use_history_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(showing, hide, hideOnRouteChange);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_12__/* .computed */ .EW)(() => 'q-dialog__inner flex no-pointer-events' + ` q-dialog__inner--${props.maximized === true ? 'maximized' : 'minimized'}` + ` q-dialog__inner--${props.position} ${positionClass[props.position]}` + (animating.value === true ? ' q-dialog__inner--animating' : '') + (props.fullWidth === true ? ' q-dialog__inner--fullwidth' : '') + (props.fullHeight === true ? ' q-dialog__inner--fullheight' : '') + (props.square === true ? ' q-dialog__inner--square' : ''));
    const useBackdrop = (0,vue__WEBPACK_IMPORTED_MODULE_12__/* .computed */ .EW)(() => showing.value === true && props.seamless !== true);
    const onEvents = (0,vue__WEBPACK_IMPORTED_MODULE_12__/* .computed */ .EW)(() => props.autoClose === true ? {
      onClick: onAutoClose
    } : {});
    const rootClasses = (0,vue__WEBPACK_IMPORTED_MODULE_12__/* .computed */ .EW)(() => ['q-dialog fullscreen no-pointer-events ' + `q-dialog--${useBackdrop.value === true ? 'modal' : 'seamless'}`, attrs.class]);
    (0,vue__WEBPACK_IMPORTED_MODULE_12__/* .watch */ .wB)(() => props.maximized, state => {
      showing.value === true && updateMaximized(state);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_12__/* .watch */ .wB)(useBackdrop, val => {
      preventBodyScroll(val);
      if (val === true) {
        (0,_utils_private_focus_focusout_js__WEBPACK_IMPORTED_MODULE_9__/* .addFocusout */ .g)(onFocusChange);
        (0,_utils_private_keyboard_escape_key_js__WEBPACK_IMPORTED_MODULE_8__/* .addEscapeKey */ .I)(onEscapeKey);
      } else {
        (0,_utils_private_focus_focusout_js__WEBPACK_IMPORTED_MODULE_9__/* .removeFocusout */ .v)(onFocusChange);
        (0,_utils_private_keyboard_escape_key_js__WEBPACK_IMPORTED_MODULE_8__/* .removeEscapeKey */ .V)(onEscapeKey);
      }
    });
    function handleShow(evt) {
      addToHistory();
      refocusTarget = props.noRefocus === false && document.activeElement !== null ? document.activeElement : null;
      updateMaximized(props.maximized);
      showPortal();
      animating.value = true;
      if (props.noFocus !== true) {
        document.activeElement !== null && document.activeElement.blur();
        registerTick(focus);
      } else {
        removeTick();
      }

      // should removeTimeout() if this gets removed
      registerTimeout(() => {
        if (vm.proxy.$q.platform.is.ios === true) {
          if (props.seamless !== true && document.activeElement) {
            const {
                top,
                bottom
              } = document.activeElement.getBoundingClientRect(),
              {
                innerHeight
              } = window,
              height = window.visualViewport !== void 0 ? window.visualViewport.height : innerHeight;
            if (top > 0 && bottom > height / 2) {
              document.scrollingElement.scrollTop = Math.min(document.scrollingElement.scrollHeight - height, bottom >= innerHeight ? Infinity : Math.ceil(document.scrollingElement.scrollTop + bottom - height / 2));
            }
            document.activeElement.scrollIntoView();
          }

          // required in order to avoid the "double-tap needed" issue
          avoidAutoClose = true;
          innerRef.value.click();
          avoidAutoClose = false;
        }
        showPortal(true); // done showing portal
        animating.value = false;
        emit('show', evt);
      }, props.transitionDuration);
    }
    function handleHide(evt) {
      removeTick();
      removeFromHistory();
      cleanup(true);
      animating.value = true;
      hidePortal();
      if (refocusTarget !== null) {
        ((evt && evt.type.indexOf('key') === 0 ? refocusTarget.closest('[tabindex]:not([tabindex^="-"])') : void 0) || refocusTarget).focus();
        refocusTarget = null;
      }

      // should removeTimeout() if this gets removed
      registerTimeout(() => {
        hidePortal(true); // done hiding, now destroy
        animating.value = false;
        emit('hide', evt);
      }, props.transitionDuration);
    }
    function focus(selector) {
      (0,_utils_private_focus_focus_manager_js__WEBPACK_IMPORTED_MODULE_10__/* .addFocusFn */ .Gy)(() => {
        let node = innerRef.value;
        if (node === null) return;
        if (selector !== void 0) {
          const target = node.querySelector(selector);
          if (target !== null) {
            target.focus({
              preventScroll: true
            });
            return;
          }
        }
        if (node.contains(document.activeElement) !== true) {
          node = node.querySelector('[autofocus][tabindex], [data-autofocus][tabindex]') || node.querySelector('[autofocus] [tabindex], [data-autofocus] [tabindex]') || node.querySelector('[autofocus], [data-autofocus]') || node;
          node.focus({
            preventScroll: true
          });
        }
      });
    }
    function shake(focusTarget) {
      if (focusTarget && typeof focusTarget.focus === 'function') {
        focusTarget.focus({
          preventScroll: true
        });
      } else {
        focus();
      }
      emit('shake');
      const node = innerRef.value;
      if (node !== null) {
        node.classList.remove('q-animate--scale');
        node.classList.add('q-animate--scale');
        shakeTimeout !== null && clearTimeout(shakeTimeout);
        shakeTimeout = setTimeout(() => {
          shakeTimeout = null;
          if (innerRef.value !== null) {
            node.classList.remove('q-animate--scale');
            // some platforms (like desktop Chrome)
            // require calling focus() again
            focus();
          }
        }, 170);
      }
    }
    function onEscapeKey() {
      if (props.seamless !== true) {
        if (props.persistent === true || props.noEscDismiss === true) {
          props.maximized !== true && props.noShake !== true && shake();
        } else {
          emit('escapeKey');
          hide();
        }
      }
    }
    function cleanup(hiding) {
      if (shakeTimeout !== null) {
        clearTimeout(shakeTimeout);
        shakeTimeout = null;
      }
      if (hiding === true || showing.value === true) {
        updateMaximized(false);
        if (props.seamless !== true) {
          preventBodyScroll(false);
          (0,_utils_private_focus_focusout_js__WEBPACK_IMPORTED_MODULE_9__/* .removeFocusout */ .v)(onFocusChange);
          (0,_utils_private_keyboard_escape_key_js__WEBPACK_IMPORTED_MODULE_8__/* .removeEscapeKey */ .V)(onEscapeKey);
        }
      }
      if (hiding !== true) {
        refocusTarget = null;
      }
    }
    function updateMaximized(active) {
      if (active === true) {
        if (isMaximized !== true) {
          maximizedModals < 1 && document.body.classList.add('q-body--dialog');
          maximizedModals++;
          isMaximized = true;
        }
      } else if (isMaximized === true) {
        if (maximizedModals < 2) {
          document.body.classList.remove('q-body--dialog');
        }
        maximizedModals--;
        isMaximized = false;
      }
    }
    function onAutoClose(e) {
      if (avoidAutoClose !== true) {
        hide(e);
        emit('click', e);
      }
    }
    function onBackdropClick(e) {
      if (props.persistent !== true && props.noBackdropDismiss !== true) {
        hide(e);
      } else if (props.noShake !== true) {
        shake();
      }
    }
    function onFocusChange(evt) {
      // the focus is not in a vue child component
      if (props.allowFocusOutside !== true && portalIsAccessible.value === true && (0,_utils_dom_dom_js__WEBPACK_IMPORTED_MODULE_7__/* .childHasFocus */ .$J)(innerRef.value, evt.target) !== true) {
        focus('[tabindex]:not([tabindex="-1"])');
      }
    }
    Object.assign(vm.proxy, {
      // expose public methods
      focus,
      shake,
      // private but needed by QSelect
      __updateRefocusTarget(target) {
        refocusTarget = target || null;
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_12__/* .onBeforeUnmount */ .xo)(cleanup);
    function renderPortalContent() {
      return (0,vue__WEBPACK_IMPORTED_MODULE_12__.h)('div', {
        role: 'dialog',
        'aria-modal': useBackdrop.value === true ? 'true' : 'false',
        ...attrs,
        class: rootClasses.value
      }, [(0,vue__WEBPACK_IMPORTED_MODULE_12__.h)(vue__WEBPACK_IMPORTED_MODULE_14__/* .Transition */ .eB, {
        name: 'q-transition--fade',
        appear: true
      }, () => useBackdrop.value === true ? (0,vue__WEBPACK_IMPORTED_MODULE_12__.h)('div', {
        class: 'q-dialog__backdrop fixed-full',
        style: backdropStyle.value,
        'aria-hidden': 'true',
        tabindex: -1,
        onClick: onBackdropClick
      }) : null), (0,vue__WEBPACK_IMPORTED_MODULE_12__.h)(vue__WEBPACK_IMPORTED_MODULE_14__/* .Transition */ .eB, transitionProps.value, () => showing.value === true ? (0,vue__WEBPACK_IMPORTED_MODULE_12__.h)('div', {
        ref: innerRef,
        class: classes.value,
        style: transitionStyle.value,
        tabindex: -1,
        ...onEvents.value
      }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_15__/* .hSlot */ .zm)(slots.default)) : null)]);
    }
    return renderPortal;
  }
}));

/***/ }),

/***/ 6056:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(8734);
/* harmony import */ var _composables_private_use_history_use_history_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(414);
/* harmony import */ var _composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2916);
/* harmony import */ var _composables_private_use_prevent_scroll_use_prevent_scroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4970);
/* harmony import */ var _composables_use_timeout_use_timeout_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4667);
/* harmony import */ var _composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6372);
/* harmony import */ var _directives_touch_pan_TouchPan_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9390);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(9467);
/* harmony import */ var _utils_format_format_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(2732);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(5139);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(7973);












const duration = 150;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_8__/* .createComponent */ .a0)({
  name: 'QDrawer',
  inheritAttrs: false,
  props: {
    ..._composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_2__/* .useModelToggleProps */ .RI,
    ..._composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_5__/* .useDarkProps */ .C,
    side: {
      type: String,
      default: 'left',
      validator: v => ['left', 'right'].includes(v)
    },
    width: {
      type: Number,
      default: 300
    },
    mini: Boolean,
    miniToOverlay: Boolean,
    miniWidth: {
      type: Number,
      default: 57
    },
    noMiniAnimation: Boolean,
    breakpoint: {
      type: Number,
      default: 1023
    },
    showIfAbove: Boolean,
    behavior: {
      type: String,
      validator: v => ['default', 'desktop', 'mobile'].includes(v),
      default: 'default'
    },
    bordered: Boolean,
    elevated: Boolean,
    overlay: Boolean,
    persistent: Boolean,
    noSwipeOpen: Boolean,
    noSwipeClose: Boolean,
    noSwipeBackdrop: Boolean
  },
  emits: [..._composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_2__/* .useModelToggleEmits */ .Jl, 'onLayout', 'miniState'],
  setup(props, {
    slots,
    emit,
    attrs
  }) {
    const vm = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .getCurrentInstance */ .nI)();
    const {
      proxy: {
        $q
      }
    } = vm;
    const isDark = (0,_composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .A)(props, $q);
    const {
      preventBodyScroll
    } = (0,_composables_private_use_prevent_scroll_use_prevent_scroll_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A)();
    const {
      registerTimeout,
      removeTimeout
    } = (0,_composables_use_timeout_use_timeout_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A)();
    const $layout = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .inject */ .WQ)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_10__/* .layoutKey */ .ON, _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_10__/* .emptyRenderFn */ .U_);
    if ($layout === _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_10__/* .emptyRenderFn */ .U_) {
      console.error('QDrawer needs to be child of QLayout');
      return _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_10__/* .emptyRenderFn */ .U_;
    }
    let lastDesktopState,
      timerMini = null,
      layoutTotalWidthWatcher;
    const belowBreakpoint = (0,vue__WEBPACK_IMPORTED_MODULE_11__/* .ref */ .KR)(props.behavior === 'mobile' || props.behavior !== 'desktop' && $layout.totalWidth.value <= props.breakpoint);
    const isMini = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => props.mini === true && belowBreakpoint.value !== true);
    const size = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => isMini.value === true ? props.miniWidth : props.width);
    const showing = (0,vue__WEBPACK_IMPORTED_MODULE_11__/* .ref */ .KR)(props.showIfAbove === true && belowBreakpoint.value === false ? true : props.modelValue === true);
    const hideOnRouteChange = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => props.persistent !== true && (belowBreakpoint.value === true || onScreenOverlay.value === true));
    function handleShow(evt, noEvent) {
      addToHistory();
      evt !== false && $layout.animate();
      applyPosition(0);
      if (belowBreakpoint.value === true) {
        const otherInstance = $layout.instances[otherSide.value];
        if (otherInstance !== void 0 && otherInstance.belowBreakpoint === true) {
          otherInstance.hide(false);
        }
        applyBackdrop(1);
        $layout.isContainer.value !== true && preventBodyScroll(true);
      } else {
        applyBackdrop(0);
        evt !== false && setScrollable(false);
      }
      registerTimeout(() => {
        evt !== false && setScrollable(true);
        noEvent !== true && emit('show', evt);
      }, duration);
    }
    function handleHide(evt, noEvent) {
      removeFromHistory();
      evt !== false && $layout.animate();
      applyBackdrop(0);
      applyPosition(stateDirection.value * size.value);
      cleanup();
      if (noEvent !== true) {
        registerTimeout(() => {
          emit('hide', evt);
        }, duration);
      } else {
        removeTimeout();
      }
    }
    const {
      show,
      hide
    } = (0,_composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Ay)({
      showing,
      hideOnRouteChange,
      handleShow,
      handleHide
    });
    const {
      addToHistory,
      removeFromHistory
    } = (0,_composables_private_use_history_use_history_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A)(showing, hide, hideOnRouteChange);
    const instance = {
      belowBreakpoint,
      hide
    };
    const rightSide = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => props.side === 'right');
    const stateDirection = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => ($q.lang.rtl === true ? -1 : 1) * (rightSide.value === true ? 1 : -1));
    const flagBackdropBg = (0,vue__WEBPACK_IMPORTED_MODULE_11__/* .ref */ .KR)(0);
    const flagPanning = (0,vue__WEBPACK_IMPORTED_MODULE_11__/* .ref */ .KR)(false);
    const flagMiniAnimate = (0,vue__WEBPACK_IMPORTED_MODULE_11__/* .ref */ .KR)(false);
    const flagContentPosition = (0,vue__WEBPACK_IMPORTED_MODULE_11__/* .ref */ .KR)(
    // starting with "hidden" for SSR
    size.value * stateDirection.value);
    const otherSide = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => rightSide.value === true ? 'left' : 'right');
    const offset = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => showing.value === true && belowBreakpoint.value === false && props.overlay === false ? props.miniToOverlay === true ? props.miniWidth : size.value : 0);
    const fixed = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => props.overlay === true || props.miniToOverlay === true || $layout.view.value.indexOf(rightSide.value ? 'R' : 'L') !== -1 || $q.platform.is.ios === true && $layout.isContainer.value === true);
    const onLayout = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => props.overlay === false && showing.value === true && belowBreakpoint.value === false);
    const onScreenOverlay = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => props.overlay === true && showing.value === true && belowBreakpoint.value === false);
    const backdropClass = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => 'fullscreen q-drawer__backdrop' + (showing.value === false && flagPanning.value === false ? ' hidden' : ''));
    const backdropStyle = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => ({
      backgroundColor: `rgba(0,0,0,${flagBackdropBg.value * 0.4})`
    }));
    const headerSlot = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => rightSide.value === true ? $layout.rows.value.top[2] === 'r' : $layout.rows.value.top[0] === 'l');
    const footerSlot = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => rightSide.value === true ? $layout.rows.value.bottom[2] === 'r' : $layout.rows.value.bottom[0] === 'l');
    const aboveStyle = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => {
      const css = {};
      if ($layout.header.space === true && headerSlot.value === false) {
        if (fixed.value === true) {
          css.top = `${$layout.header.offset}px`;
        } else if ($layout.header.space === true) {
          css.top = `${$layout.header.size}px`;
        }
      }
      if ($layout.footer.space === true && footerSlot.value === false) {
        if (fixed.value === true) {
          css.bottom = `${$layout.footer.offset}px`;
        } else if ($layout.footer.space === true) {
          css.bottom = `${$layout.footer.size}px`;
        }
      }
      return css;
    });
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => {
      const style = {
        width: `${size.value}px`,
        transform: `translateX(${flagContentPosition.value}px)`
      };
      return belowBreakpoint.value === true ? style : Object.assign(style, aboveStyle.value);
    });
    const contentClass = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => 'q-drawer__content fit ' + ($layout.isContainer.value !== true ? 'scroll' : 'overflow-auto'));
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => `q-drawer q-drawer--${props.side}` + (flagMiniAnimate.value === true ? ' q-drawer--mini-animate' : '') + (props.bordered === true ? ' q-drawer--bordered' : '') + (isDark.value === true ? ' q-drawer--dark q-dark' : '') + (flagPanning.value === true ? ' no-transition' : showing.value === true ? '' : ' q-layout--prevent-focus') + (belowBreakpoint.value === true ? ' fixed q-drawer--on-top q-drawer--mobile q-drawer--top-padding' : ` q-drawer--${isMini.value === true ? 'mini' : 'standard'}` + (fixed.value === true || onLayout.value !== true ? ' fixed' : '') + (props.overlay === true || props.miniToOverlay === true ? ' q-drawer--on-top' : '') + (headerSlot.value === true ? ' q-drawer--top-padding' : '')));
    const openDirective = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => {
      // if props.noSwipeOpen !== true
      const dir = $q.lang.rtl === true ? props.side : otherSide.value;
      return [[_directives_touch_pan_TouchPan_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A, onOpenPan, void 0, {
        [dir]: true,
        mouse: true
      }]];
    });
    const contentCloseDirective = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => {
      // if belowBreakpoint.value === true && props.noSwipeClose !== true
      const dir = $q.lang.rtl === true ? otherSide.value : props.side;
      return [[_directives_touch_pan_TouchPan_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A, onClosePan, void 0, {
        [dir]: true,
        mouse: true
      }]];
    });
    const backdropCloseDirective = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .computed */ .EW)(() => {
      // if showing.value === true && props.noSwipeBackdrop !== true
      const dir = $q.lang.rtl === true ? otherSide.value : props.side;
      return [[_directives_touch_pan_TouchPan_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A, onClosePan, void 0, {
        [dir]: true,
        mouse: true,
        mouseAllDir: true
      }]];
    });
    function updateBelowBreakpoint() {
      updateLocal(belowBreakpoint, props.behavior === 'mobile' || props.behavior !== 'desktop' && $layout.totalWidth.value <= props.breakpoint);
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)(belowBreakpoint, val => {
      if (val === true) {
        // from lg to xs
        lastDesktopState = showing.value;
        showing.value === true && hide(false);
      } else if (props.overlay === false && props.behavior !== 'mobile' && lastDesktopState !== false) {
        // from xs to lg
        if (showing.value === true) {
          applyPosition(0);
          applyBackdrop(0);
          cleanup();
        } else {
          show(false);
        }
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)(() => props.side, (newSide, oldSide) => {
      if ($layout.instances[oldSide] === instance) {
        $layout.instances[oldSide] = void 0;
        $layout[oldSide].space = false;
        $layout[oldSide].offset = 0;
      }
      $layout.instances[newSide] = instance;
      $layout[newSide].size = size.value;
      $layout[newSide].space = onLayout.value;
      $layout[newSide].offset = offset.value;
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)($layout.totalWidth, () => {
      if ($layout.isContainer.value === true || document.qScrollPrevented !== true) {
        updateBelowBreakpoint();
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)(() => props.behavior + props.breakpoint, updateBelowBreakpoint);
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)($layout.isContainer, val => {
      showing.value === true && preventBodyScroll(val !== true);
      val === true && updateBelowBreakpoint();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)($layout.scrollbarWidth, () => {
      applyPosition(showing.value === true ? 0 : void 0);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)(offset, val => {
      updateLayout('offset', val);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)(onLayout, val => {
      emit('onLayout', val);
      updateLayout('space', val);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)(rightSide, () => {
      applyPosition();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)(size, val => {
      applyPosition();
      updateSizeOnLayout(props.miniToOverlay, val);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)(() => props.miniToOverlay, val => {
      updateSizeOnLayout(val, size.value);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)(() => $q.lang.rtl, () => {
      applyPosition();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)(() => props.mini, () => {
      if (props.noMiniAnimation) return;
      if (props.modelValue === true) {
        animateMini();
        $layout.animate();
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)(isMini, val => {
      emit('miniState', val);
    });
    function applyPosition(position) {
      if (position === void 0) {
        (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .nextTick */ .dY)(() => {
          position = showing.value === true ? 0 : size.value;
          applyPosition(stateDirection.value * position);
        });
      } else {
        if ($layout.isContainer.value === true && rightSide.value === true && (belowBreakpoint.value === true || Math.abs(position) === size.value)) {
          position += stateDirection.value * $layout.scrollbarWidth.value;
        }
        flagContentPosition.value = position;
      }
    }
    function applyBackdrop(x) {
      flagBackdropBg.value = x;
    }
    function setScrollable(v) {
      const action = v === true ? 'remove' : $layout.isContainer.value !== true ? 'add' : '';
      action !== '' && document.body.classList[action]('q-body--drawer-toggle');
    }
    function animateMini() {
      timerMini !== null && clearTimeout(timerMini);
      if (vm.proxy && vm.proxy.$el) {
        // need to speed it up and apply it immediately,
        // even faster than Vue's nextTick!
        vm.proxy.$el.classList.add('q-drawer--mini-animate');
      }
      flagMiniAnimate.value = true;
      timerMini = setTimeout(() => {
        timerMini = null;
        flagMiniAnimate.value = false;
        if (vm && vm.proxy && vm.proxy.$el) {
          vm.proxy.$el.classList.remove('q-drawer--mini-animate');
        }
      }, 150);
    }
    function onOpenPan(evt) {
      if (showing.value !== false) {
        // some browsers might capture and trigger this
        // even if Drawer has just been opened (but animation is still pending)
        return;
      }
      const width = size.value,
        position = (0,_utils_format_format_js__WEBPACK_IMPORTED_MODULE_7__/* .between */ .Tq)(evt.distance.x, 0, width);
      if (evt.isFinal === true) {
        const opened = position >= Math.min(75, width);
        if (opened === true) {
          show();
        } else {
          $layout.animate();
          applyBackdrop(0);
          applyPosition(stateDirection.value * width);
        }
        flagPanning.value = false;
        return;
      }
      applyPosition(($q.lang.rtl === true ? rightSide.value !== true : rightSide.value) ? Math.max(width - position, 0) : Math.min(0, position - width));
      applyBackdrop((0,_utils_format_format_js__WEBPACK_IMPORTED_MODULE_7__/* .between */ .Tq)(position / width, 0, 1));
      if (evt.isFirst === true) {
        flagPanning.value = true;
      }
    }
    function onClosePan(evt) {
      if (showing.value !== true) {
        // some browsers might capture and trigger this
        // even if Drawer has just been closed (but animation is still pending)
        return;
      }
      const width = size.value,
        dir = evt.direction === props.side,
        position = ($q.lang.rtl === true ? dir !== true : dir) ? (0,_utils_format_format_js__WEBPACK_IMPORTED_MODULE_7__/* .between */ .Tq)(evt.distance.x, 0, width) : 0;
      if (evt.isFinal === true) {
        const opened = Math.abs(position) < Math.min(75, width);
        if (opened === true) {
          $layout.animate();
          applyBackdrop(1);
          applyPosition(0);
        } else {
          hide();
        }
        flagPanning.value = false;
        return;
      }
      applyPosition(stateDirection.value * position);
      applyBackdrop((0,_utils_format_format_js__WEBPACK_IMPORTED_MODULE_7__/* .between */ .Tq)(1 - position / width, 0, 1));
      if (evt.isFirst === true) {
        flagPanning.value = true;
      }
    }
    function cleanup() {
      preventBodyScroll(false);
      setScrollable(true);
    }
    function updateLayout(prop, val) {
      $layout.update(props.side, prop, val);
    }
    function updateLocal(prop, val) {
      if (prop.value !== val) {
        prop.value = val;
      }
    }
    function updateSizeOnLayout(miniToOverlay, size) {
      updateLayout('size', miniToOverlay === true ? props.miniWidth : size);
    }
    $layout.instances[props.side] = instance;
    updateSizeOnLayout(props.miniToOverlay, size.value);
    updateLayout('space', onLayout.value);
    updateLayout('offset', offset.value);
    if (props.showIfAbove === true && props.modelValue !== true && showing.value === true && props['onUpdate:modelValue'] !== void 0) {
      emit('update:modelValue', true);
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .onMounted */ .sV)(() => {
      emit('onLayout', onLayout.value);
      emit('miniState', isMini.value);
      lastDesktopState = props.showIfAbove === true;
      const fn = () => {
        const action = showing.value === true ? handleShow : handleHide;
        action(false, true);
      };
      if ($layout.totalWidth.value !== 0) {
        // make sure that all computed properties
        // have been updated before calling handleShow/handleHide()
        (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .nextTick */ .dY)(fn);
        return;
      }
      layoutTotalWidthWatcher = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .watch */ .wB)($layout.totalWidth, () => {
        layoutTotalWidthWatcher();
        layoutTotalWidthWatcher = void 0;
        if (showing.value === false && props.showIfAbove === true && belowBreakpoint.value === false) {
          show(false);
        } else {
          fn();
        }
      });
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .onBeforeUnmount */ .xo)(() => {
      layoutTotalWidthWatcher !== void 0 && layoutTotalWidthWatcher();
      if (timerMini !== null) {
        clearTimeout(timerMini);
        timerMini = null;
      }
      showing.value === true && cleanup();
      if ($layout.instances[props.side] === instance) {
        $layout.instances[props.side] = void 0;
        updateLayout('size', 0);
        updateLayout('offset', 0);
        updateLayout('space', false);
      }
    });
    return () => {
      const child = [];
      if (belowBreakpoint.value === true) {
        props.noSwipeOpen === false && child.push((0,vue__WEBPACK_IMPORTED_MODULE_9__/* .withDirectives */ .bo)((0,vue__WEBPACK_IMPORTED_MODULE_9__.h)('div', {
          key: 'open',
          class: `q-drawer__opener fixed-${props.side}`,
          'aria-hidden': 'true'
        }), openDirective.value));
        child.push((0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_12__/* .hDir */ .Kf)('div', {
          ref: 'backdrop',
          class: backdropClass.value,
          style: backdropStyle.value,
          'aria-hidden': 'true',
          onClick: hide
        }, void 0, 'backdrop', props.noSwipeBackdrop !== true && showing.value === true, () => backdropCloseDirective.value));
      }
      const mini = isMini.value === true && slots.mini !== void 0;
      const content = [(0,vue__WEBPACK_IMPORTED_MODULE_9__.h)('div', {
        ...attrs,
        key: '' + mini,
        // required otherwise Vue will not diff correctly
        class: [contentClass.value, attrs.class]
      }, mini === true ? slots.mini() : (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_12__/* .hSlot */ .zm)(slots.default))];
      if (props.elevated === true && showing.value === true) {
        content.push((0,vue__WEBPACK_IMPORTED_MODULE_9__.h)('div', {
          class: 'q-layout__shadow absolute-full overflow-hidden no-pointer-events'
        }));
      }
      child.push((0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_12__/* .hDir */ .Kf)('aside', {
        ref: 'content',
        class: classes.value,
        style: style.value
      }, content, 'contentclose', props.noSwipeClose !== true && belowBreakpoint.value === true, () => contentCloseDirective.value));
      return (0,vue__WEBPACK_IMPORTED_MODULE_9__.h)('div', {
        class: 'q-drawer-container'
      }, child);
    };
  }
}));

/***/ }),

/***/ 8841:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(8734);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(9104);
/* harmony import */ var _item_QItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(124);
/* harmony import */ var _item_QItemSection_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5173);
/* harmony import */ var _item_QItemLabel_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3796);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(492);
/* harmony import */ var _slide_transition_QSlideTransition_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3605);
/* harmony import */ var _separator_QSeparator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(386);
/* harmony import */ var _composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6372);
/* harmony import */ var _composables_use_id_use_id_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(4915);
/* harmony import */ var _composables_private_use_router_link_use_router_link_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(7502);
/* harmony import */ var _composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(2916);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(9467);
/* harmony import */ var _utils_event_event_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(2500);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(5139);
/* harmony import */ var _utils_uid_uid_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(5192);
















const itemGroups = (0,vue__WEBPACK_IMPORTED_MODULE_13__/* .shallowReactive */ .Gc)({});
const LINK_PROPS = Object.keys(_composables_private_use_router_link_use_router_link_js__WEBPACK_IMPORTED_MODULE_9__/* .useRouterLinkProps */ .Ji);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_14__/* .createComponent */ .a0)({
  name: 'QExpansionItem',
  props: {
    ..._composables_private_use_router_link_use_router_link_js__WEBPACK_IMPORTED_MODULE_9__/* .useRouterLinkProps */ .Ji,
    ..._composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_10__/* .useModelToggleProps */ .RI,
    ..._composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_7__/* .useDarkProps */ .C,
    icon: String,
    label: String,
    labelLines: [Number, String],
    caption: String,
    captionLines: [Number, String],
    dense: Boolean,
    toggleAriaLabel: String,
    expandIcon: String,
    expandedIcon: String,
    expandIconClass: [Array, String, Object],
    duration: {},
    headerInsetLevel: Number,
    contentInsetLevel: Number,
    expandSeparator: Boolean,
    defaultOpened: Boolean,
    hideExpandIcon: Boolean,
    expandIconToggle: Boolean,
    switchToggleSide: Boolean,
    denseToggle: Boolean,
    group: String,
    popup: Boolean,
    headerStyle: [Array, String, Object],
    headerClass: [Array, String, Object]
  },
  emits: [..._composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_10__/* .useModelToggleEmits */ .Jl, 'click', 'afterShow', 'afterHide'],
  setup(props, {
    slots,
    emit
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .getCurrentInstance */ .nI)();
    const isDark = (0,_composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .A)(props, $q);
    const showing = (0,vue__WEBPACK_IMPORTED_MODULE_13__/* .ref */ .KR)(props.modelValue !== null ? props.modelValue : props.defaultOpened);
    const blurTargetRef = (0,vue__WEBPACK_IMPORTED_MODULE_13__/* .ref */ .KR)(null);
    const targetUid = (0,_composables_use_id_use_id_js__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .A)();
    const {
      show,
      hide,
      toggle
    } = (0,_composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .Ay)({
      showing
    });
    let uniqueId, exitGroup;
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .computed */ .EW)(() => 'q-expansion-item q-item-type' + ` q-expansion-item--${showing.value === true ? 'expanded' : 'collapsed'}` + ` q-expansion-item--${props.popup === true ? 'popup' : 'standard'}`);
    const contentStyle = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .computed */ .EW)(() => {
      if (props.contentInsetLevel === void 0) {
        return null;
      }
      const dir = $q.lang.rtl === true ? 'Right' : 'Left';
      return {
        ['padding' + dir]: props.contentInsetLevel * 56 + 'px'
      };
    });
    const hasLink = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .computed */ .EW)(() => props.disable !== true && (props.href !== void 0 || props.to !== void 0 && props.to !== null && props.to !== ''));
    const linkProps = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .computed */ .EW)(() => {
      const acc = {};
      LINK_PROPS.forEach(key => {
        acc[key] = props[key];
      });
      return acc;
    });
    const isClickable = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .computed */ .EW)(() => hasLink.value === true || props.expandIconToggle !== true);
    const expansionIcon = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .computed */ .EW)(() => props.expandedIcon !== void 0 && showing.value === true ? props.expandedIcon : props.expandIcon || $q.iconSet.expansionItem[props.denseToggle === true ? 'denseIcon' : 'icon']);
    const activeToggleIcon = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .computed */ .EW)(() => props.disable !== true && (hasLink.value === true || props.expandIconToggle === true));
    const headerSlotScope = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .computed */ .EW)(() => ({
      expanded: showing.value === true,
      detailsId: targetUid.value,
      toggle,
      show,
      hide
    }));
    const toggleAriaAttrs = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .computed */ .EW)(() => {
      const toggleAriaLabel = props.toggleAriaLabel !== void 0 ? props.toggleAriaLabel : $q.lang.label[showing.value === true ? 'collapse' : 'expand'](props.label);
      return {
        role: 'button',
        'aria-expanded': showing.value === true ? 'true' : 'false',
        'aria-controls': targetUid.value,
        'aria-label': toggleAriaLabel
      };
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .watch */ .wB)(() => props.group, name => {
      exitGroup !== void 0 && exitGroup();
      name !== void 0 && enterGroup();
    });
    function onHeaderClick(e) {
      hasLink.value !== true && toggle(e);
      emit('click', e);
    }
    function toggleIconKeyboard(e) {
      e.keyCode === 13 && toggleIcon(e, true);
    }
    function toggleIcon(e, keyboard) {
      keyboard !== true && blurTargetRef.value !== null && blurTargetRef.value.focus();
      toggle(e);
      (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_11__/* .stopAndPrevent */ .Gu)(e);
    }
    function onShow() {
      emit('afterShow');
    }
    function onHide() {
      emit('afterHide');
    }
    function enterGroup() {
      if (uniqueId === void 0) {
        uniqueId = (0,_utils_uid_uid_js__WEBPACK_IMPORTED_MODULE_12__/* ["default"] */ .A)();
      }
      if (showing.value === true) {
        itemGroups[props.group] = uniqueId;
      }
      const show = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .watch */ .wB)(showing, val => {
        if (val === true) {
          itemGroups[props.group] = uniqueId;
        } else if (itemGroups[props.group] === uniqueId) {
          delete itemGroups[props.group];
        }
      });
      const group = (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .watch */ .wB)(() => itemGroups[props.group], (val, oldVal) => {
        if (oldVal === uniqueId && val !== void 0 && val !== uniqueId) {
          hide();
        }
      });
      exitGroup = () => {
        show();
        group();
        if (itemGroups[props.group] === uniqueId) {
          delete itemGroups[props.group];
        }
        exitGroup = void 0;
      };
    }
    function getToggleIcon() {
      const data = {
        class: ['q-focusable relative-position cursor-pointer' + `${props.denseToggle === true && props.switchToggleSide === true ? ' items-end' : ''}`, props.expandIconClass],
        side: props.switchToggleSide !== true,
        avatar: props.switchToggleSide
      };
      const child = [(0,vue__WEBPACK_IMPORTED_MODULE_15__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A, {
        class: 'q-expansion-item__toggle-icon' + (props.expandedIcon === void 0 && showing.value === true ? ' q-expansion-item__toggle-icon--rotated' : ''),
        name: expansionIcon.value
      })];
      if (activeToggleIcon.value === true) {
        Object.assign(data, {
          tabindex: 0,
          ...toggleAriaAttrs.value,
          onClick: toggleIcon,
          onKeyup: toggleIconKeyboard
        });
        child.unshift((0,vue__WEBPACK_IMPORTED_MODULE_15__.h)('div', {
          ref: blurTargetRef,
          class: 'q-expansion-item__toggle-focus q-icon q-focus-helper q-focus-helper--rounded',
          tabindex: -1
        }));
      }
      return (0,vue__WEBPACK_IMPORTED_MODULE_15__.h)(_item_QItemSection_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, data, () => child);
    }
    function getHeaderChild() {
      let child;
      if (slots.header !== void 0) {
        child = [].concat(slots.header(headerSlotScope.value));
      } else {
        child = [(0,vue__WEBPACK_IMPORTED_MODULE_15__.h)(_item_QItemSection_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, () => [(0,vue__WEBPACK_IMPORTED_MODULE_15__.h)(_item_QItemLabel_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A, {
          lines: props.labelLines
        }, () => props.label || ''), props.caption ? (0,vue__WEBPACK_IMPORTED_MODULE_15__.h)(_item_QItemLabel_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A, {
          lines: props.captionLines,
          caption: true
        }, () => props.caption) : null])];
        props.icon && child[props.switchToggleSide === true ? 'push' : 'unshift']((0,vue__WEBPACK_IMPORTED_MODULE_15__.h)(_item_QItemSection_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, {
          side: props.switchToggleSide === true,
          avatar: props.switchToggleSide !== true
        }, () => (0,vue__WEBPACK_IMPORTED_MODULE_15__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A, {
          name: props.icon
        })));
      }
      if (props.disable !== true && props.hideExpandIcon !== true) {
        child[props.switchToggleSide === true ? 'unshift' : 'push'](getToggleIcon());
      }
      return child;
    }
    function getHeader() {
      const data = {
        ref: 'item',
        style: props.headerStyle,
        class: props.headerClass,
        dark: isDark.value,
        disable: props.disable,
        dense: props.dense,
        insetLevel: props.headerInsetLevel
      };
      if (isClickable.value === true) {
        data.clickable = true;
        data.onClick = onHeaderClick;
        Object.assign(data, hasLink.value === true ? linkProps.value : toggleAriaAttrs.value);
      }
      return (0,vue__WEBPACK_IMPORTED_MODULE_15__.h)(_item_QItem_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, data, getHeaderChild);
    }
    function getTransitionChild() {
      return (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .withDirectives */ .bo)((0,vue__WEBPACK_IMPORTED_MODULE_15__.h)('div', {
        key: 'e-content',
        class: 'q-expansion-item__content relative-position',
        style: contentStyle.value,
        id: targetUid.value
      }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_16__/* .hSlot */ .zm)(slots.default)), [[vue__WEBPACK_IMPORTED_MODULE_17__/* .vShow */ .aG, showing.value]]);
    }
    function getContent() {
      const node = [getHeader(), (0,vue__WEBPACK_IMPORTED_MODULE_15__.h)(_slide_transition_QSlideTransition_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .A, {
        duration: props.duration,
        onShow,
        onHide
      }, getTransitionChild)];
      if (props.expandSeparator === true) {
        node.push((0,vue__WEBPACK_IMPORTED_MODULE_15__.h)(_separator_QSeparator_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A, {
          class: 'q-expansion-item__border q-expansion-item__border--top absolute-top',
          dark: isDark.value
        }), (0,vue__WEBPACK_IMPORTED_MODULE_15__.h)(_separator_QSeparator_js__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A, {
          class: 'q-expansion-item__border q-expansion-item__border--bottom absolute-bottom',
          dark: isDark.value
        }));
      }
      return node;
    }
    props.group !== void 0 && enterGroup();
    (0,vue__WEBPACK_IMPORTED_MODULE_15__/* .onBeforeUnmount */ .xo)(() => {
      exitGroup !== void 0 && exitGroup();
    });
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_15__.h)('div', {
      class: classes.value
    }, [(0,vue__WEBPACK_IMPORTED_MODULE_15__.h)('div', {
      class: 'q-expansion-item__container relative-position'
    }, getContent())]);
  }
}));

/***/ }),

/***/ 4782:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8734);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(1758);
/* harmony import */ var _btn_QBtn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6384);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(492);
/* harmony import */ var _use_fab_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1263);
/* harmony import */ var _composables_use_id_use_id_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4915);
/* harmony import */ var _composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2916);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(5139);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(7973);










const directions = ['up', 'right', 'down', 'left'];
const alignValues = ['left', 'center', 'right'];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_6__/* .createComponent */ .a0)({
  name: 'QFab',
  props: {
    ..._use_fab_js__WEBPACK_IMPORTED_MODULE_3__/* .useFabProps */ .$,
    ..._composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_5__/* .useModelToggleProps */ .RI,
    icon: String,
    activeIcon: String,
    hideIcon: Boolean,
    hideLabel: {
      ..._use_fab_js__WEBPACK_IMPORTED_MODULE_3__/* .useFabProps */ .$.hideLabel,
      default: null
    },
    direction: {
      type: String,
      default: 'right',
      validator: v => directions.includes(v)
    },
    persistent: Boolean,
    verticalActionsAlign: {
      type: String,
      default: 'center',
      validator: v => alignValues.includes(v)
    }
  },
  emits: _composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_5__/* .useModelToggleEmits */ .Jl,
  setup(props, {
    slots
  }) {
    const triggerRef = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(null);
    const showing = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(props.modelValue === true);
    const targetUid = (0,_composables_use_id_use_id_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A)();
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .getCurrentInstance */ .nI)();
    const {
      formClass,
      labelProps
    } = (0,_use_fab_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A)(props, showing);
    const hideOnRouteChange = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => props.persistent !== true);
    const {
      hide,
      toggle
    } = (0,_composables_private_use_model_toggle_use_model_toggle_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Ay)({
      showing,
      hideOnRouteChange
    });
    const slotScope = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => ({
      opened: showing.value
    }));
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => 'q-fab z-fab row inline justify-center' + ` q-fab--align-${props.verticalActionsAlign} ${formClass.value}` + (showing.value === true ? ' q-fab--opened' : ' q-fab--closed'));
    const actionClass = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => 'q-fab__actions flex no-wrap inline' + ` q-fab__actions--${props.direction}` + ` q-fab__actions--${showing.value === true ? 'opened' : 'closed'}`);
    const actionAttrs = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => {
      const attrs = {
        id: targetUid.value,
        role: 'menu'
      };
      if (showing.value !== true) {
        attrs['aria-hidden'] = 'true';
      }
      return attrs;
    });
    const iconHolderClass = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => 'q-fab__icon-holder ' + ` q-fab__icon-holder--${showing.value === true ? 'opened' : 'closed'}`);
    function getIcon(kebab, camel) {
      const slotFn = slots[kebab];
      const classes = `q-fab__${kebab} absolute-full`;
      return slotFn === void 0 ? (0,vue__WEBPACK_IMPORTED_MODULE_8__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, {
        class: classes,
        name: props[camel] || $q.iconSet.fab[camel]
      }) : (0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', {
        class: classes
      }, slotFn(slotScope.value));
    }
    function getTriggerContent() {
      const child = [];
      props.hideIcon !== true && child.push((0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', {
        class: iconHolderClass.value
      }, [getIcon('icon', 'icon'), getIcon('active-icon', 'activeIcon')]));
      if (props.label !== '' || slots.label !== void 0) {
        child[labelProps.value.action]((0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', labelProps.value.data, slots.label !== void 0 ? slots.label(slotScope.value) : [props.label]));
      }
      return (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_9__/* .hMergeSlot */ .Hp)(slots.tooltip, child);
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .provide */ .Gt)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_10__/* .fabKey */ .BE, {
      showing,
      onChildClick(evt) {
        hide(evt);
        if (triggerRef.value !== null) {
          triggerRef.value.$el.focus();
        }
      }
    });
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', {
      class: classes.value
    }, [(0,vue__WEBPACK_IMPORTED_MODULE_8__.h)(_btn_QBtn_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
      ref: triggerRef,
      class: formClass.value,
      ...props,
      noWrap: true,
      stack: props.stacked,
      align: void 0,
      icon: void 0,
      label: void 0,
      noCaps: true,
      fab: true,
      'aria-expanded': showing.value === true ? 'true' : 'false',
      'aria-haspopup': 'true',
      'aria-controls': targetUid.value,
      onClick: toggle
    }, getTriggerContent), (0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', {
      class: actionClass.value,
      ...actionAttrs.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_9__/* .hSlot */ .zm)(slots.default))]);
  }
}));

/***/ }),

/***/ 284:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1758);
/* harmony import */ var _btn_QBtn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6384);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(492);
/* harmony import */ var _use_fab_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1263);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7973);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(5139);
/* harmony import */ var _utils_event_event_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2500);









const anchorMap = {
  start: 'self-end',
  center: 'self-center',
  end: 'self-start'
};
const anchorValues = Object.keys(anchorMap);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_5__/* .createComponent */ .a0)({
  name: 'QFabAction',
  props: {
    ..._use_fab_js__WEBPACK_IMPORTED_MODULE_3__/* .useFabProps */ .$,
    icon: {
      type: String,
      default: ''
    },
    anchor: {
      type: String,
      validator: v => anchorValues.includes(v)
    },
    to: [String, Object],
    replace: Boolean
  },
  emits: ['click'],
  setup(props, {
    slots,
    emit
  }) {
    const $fab = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .inject */ .WQ)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_7__/* .fabKey */ .BE, () => ({
      showing: {
        value: true
      },
      onChildClick: _utils_event_event_js__WEBPACK_IMPORTED_MODULE_4__/* .noop */ .lQ
    }));
    const {
      formClass,
      labelProps
    } = (0,_use_fab_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A)(props, $fab.showing);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .computed */ .EW)(() => {
      const align = anchorMap[props.anchor];
      return formClass.value + (align !== void 0 ? ` ${align}` : '');
    });
    const isDisabled = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .computed */ .EW)(() => props.disable === true || $fab.showing.value !== true);
    function click(e) {
      $fab.onChildClick(e);
      emit('click', e);
    }
    function getContent() {
      const child = [];
      if (slots.icon !== void 0) {
        child.push(slots.icon());
      } else if (props.icon !== '') {
        child.push((0,vue__WEBPACK_IMPORTED_MODULE_6__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, {
          name: props.icon
        }));
      }
      if (props.label !== '' || slots.label !== void 0) {
        child[labelProps.value.action]((0,vue__WEBPACK_IMPORTED_MODULE_6__.h)('div', labelProps.value.data, slots.label !== void 0 ? slots.label() : [props.label]));
      }
      return (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_8__/* .hMergeSlot */ .Hp)(slots.default, child);
    }

    // expose public methods
    const vm = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .getCurrentInstance */ .nI)();
    Object.assign(vm.proxy, {
      click
    });
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_6__.h)(_btn_QBtn_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
      class: classes.value,
      ...props,
      noWrap: true,
      stack: props.stacked,
      icon: void 0,
      label: void 0,
      noCaps: true,
      fabMini: true,
      disable: isDisabled.value,
      onClick: click
    }, getContent);
  }
}));

/***/ }),

/***/ 1263:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ useFabProps),
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1758);

const labelPositions = ['top', 'right', 'bottom', 'left'];
const useFabProps = {
  type: {
    type: String,
    default: 'a'
  },
  outline: Boolean,
  push: Boolean,
  flat: Boolean,
  unelevated: Boolean,
  color: String,
  textColor: String,
  glossy: Boolean,
  square: Boolean,
  padding: String,
  label: {
    type: [String, Number],
    default: ''
  },
  labelPosition: {
    type: String,
    default: 'right',
    validator: v => labelPositions.includes(v)
  },
  externalLabel: Boolean,
  hideLabel: {
    type: Boolean
  },
  labelClass: [Array, String, Object],
  labelStyle: [Array, String, Object],
  disable: Boolean,
  tabindex: [Number, String]
};
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(props, showing) {
  return {
    formClass: (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => `q-fab--form-${props.square === true ? 'square' : 'rounded'}`),
    stacked: (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => props.externalLabel === false && ['top', 'bottom'].includes(props.labelPosition)),
    labelProps: (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => {
      if (props.externalLabel === true) {
        const hideLabel = props.hideLabel === null ? showing.value === false : props.hideLabel;
        return {
          action: 'push',
          data: {
            class: [props.labelClass, 'q-fab__label q-tooltip--style q-fab__label--external' + ` q-fab__label--external-${props.labelPosition}` + (hideLabel === true ? ' q-fab__label--external-hidden' : '')],
            style: props.labelStyle
          }
        };
      }
      return {
        action: ['left', 'top'].includes(props.labelPosition) ? 'unshift' : 'push',
        data: {
          class: [props.labelClass, `q-fab__label q-fab__label--internal q-fab__label--internal-${props.labelPosition}` + (props.hideLabel === true ? ' q-fab__label--internal-hidden' : '')],
          style: props.labelStyle
        }
      };
    })
  };
}

/***/ }),

/***/ 7092:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8734);
/* harmony import */ var _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1597);
/* harmony import */ var _resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1096);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5139);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7973);







/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__/* .createComponent */ .a0)({
  name: 'QFooter',
  props: {
    modelValue: {
      type: Boolean,
      default: true
    },
    reveal: Boolean,
    bordered: Boolean,
    elevated: Boolean,
    heightHint: {
      type: [String, Number],
      default: 50
    }
  },
  emits: ['reveal', 'focusin'],
  setup(props, {
    slots,
    emit
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .getCurrentInstance */ .nI)();
    const $layout = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .inject */ .WQ)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_5__/* .layoutKey */ .ON, _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_5__/* .emptyRenderFn */ .U_);
    if ($layout === _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_5__/* .emptyRenderFn */ .U_) {
      console.error('QFooter needs to be child of QLayout');
      return _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_5__/* .emptyRenderFn */ .U_;
    }
    const size = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)(parseInt(props.heightHint, 10));
    const revealed = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)(true);
    const windowHeight = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)(_plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_1__/* .isRuntimeSsrPreHydration */ .ot.value === true || $layout.isContainer.value === true ? 0 : window.innerHeight);
    const fixed = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => props.reveal === true || $layout.view.value.indexOf('F') !== -1 || $q.platform.is.ios && $layout.isContainer.value === true);
    const containerHeight = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => $layout.isContainer.value === true ? $layout.containerHeight.value : windowHeight.value);
    const offset = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
      if (props.modelValue !== true) {
        return 0;
      }
      if (fixed.value === true) {
        return revealed.value === true ? size.value : 0;
      }
      const offset = $layout.scroll.value.position + containerHeight.value + size.value - $layout.height.value;
      return offset > 0 ? offset : 0;
    });
    const hidden = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => props.modelValue !== true || fixed.value === true && revealed.value !== true);
    const revealOnFocus = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => props.modelValue === true && hidden.value === true && props.reveal === true);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => 'q-footer q-layout__section--marginal ' + (fixed.value === true ? 'fixed' : 'absolute') + '-bottom' + (props.bordered === true ? ' q-footer--bordered' : '') + (hidden.value === true ? ' q-footer--hidden' : '') + (props.modelValue !== true ? ' q-layout--prevent-focus' + (fixed.value !== true ? ' hidden' : '') : ''));
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
      const view = $layout.rows.value.bottom,
        css = {};
      if (view[0] === 'l' && $layout.left.space === true) {
        css[$q.lang.rtl === true ? 'right' : 'left'] = `${$layout.left.size}px`;
      }
      if (view[2] === 'r' && $layout.right.space === true) {
        css[$q.lang.rtl === true ? 'left' : 'right'] = `${$layout.right.size}px`;
      }
      return css;
    });
    function updateLayout(prop, val) {
      $layout.update('footer', prop, val);
    }
    function updateLocal(prop, val) {
      if (prop.value !== val) {
        prop.value = val;
      }
    }
    function onResize({
      height
    }) {
      updateLocal(size, height);
      updateLayout('size', height);
    }
    function updateRevealed() {
      if (props.reveal !== true) return;
      const {
        direction,
        position,
        inflectionPoint
      } = $layout.scroll.value;
      updateLocal(revealed, direction === 'up' || position - inflectionPoint < 100 || $layout.height.value - containerHeight.value - position - size.value < 300);
    }
    function onFocusin(evt) {
      if (revealOnFocus.value === true) {
        updateLocal(revealed, true);
      }
      emit('focusin', evt);
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .watch */ .wB)(() => props.modelValue, val => {
      updateLayout('space', val);
      updateLocal(revealed, true);
      $layout.animate();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .watch */ .wB)(offset, val => {
      updateLayout('offset', val);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .watch */ .wB)(() => props.reveal, val => {
      val === false && updateLocal(revealed, props.modelValue);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .watch */ .wB)(revealed, val => {
      $layout.animate();
      emit('reveal', val);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .watch */ .wB)([size, $layout.scroll, $layout.height], updateRevealed);
    (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .watch */ .wB)(() => $q.screen.height, val => {
      $layout.isContainer.value !== true && updateLocal(windowHeight, val);
    });
    const instance = {};
    $layout.instances.footer = instance;
    props.modelValue === true && updateLayout('size', size.value);
    updateLayout('space', props.modelValue);
    updateLayout('offset', offset.value);
    (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .onBeforeUnmount */ .xo)(() => {
      if ($layout.instances.footer === instance) {
        $layout.instances.footer = void 0;
        updateLayout('size', 0);
        updateLayout('offset', 0);
        updateLayout('space', false);
      }
    });
    return () => {
      const child = (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_7__/* .hMergeSlot */ .Hp)(slots.default, [(0,vue__WEBPACK_IMPORTED_MODULE_4__.h)(_resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, {
        debounce: 0,
        onResize
      })]);
      props.elevated === true && child.push((0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
        class: 'q-layout__shadow absolute-full overflow-hidden no-pointer-events'
      }));
      return (0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('footer', {
        class: classes.value,
        style: style.value,
        onFocusin
      }, child);
    };
  }
}));

/***/ }),

/***/ 9200:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8734);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9467);
/* harmony import */ var _utils_event_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2500);
/* harmony import */ var _utils_private_focus_focus_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8983);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(5139);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7973);
/* harmony import */ var _utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5157);








/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_4__/* .createComponent */ .a0)({
  name: 'QForm',
  props: {
    autofocus: Boolean,
    noErrorFocus: Boolean,
    noResetFocus: Boolean,
    greedy: Boolean,
    onSubmit: Function
  },
  emits: ['reset', 'validationSuccess', 'validationError'],
  setup(props, {
    slots,
    emit
  }) {
    const vm = (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .getCurrentInstance */ .nI)();
    const rootRef = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)(null);
    let validateIndex = 0;
    const registeredComponents = [];
    function validate(shouldFocus) {
      const focus = typeof shouldFocus === 'boolean' ? shouldFocus : props.noErrorFocus !== true;
      const index = ++validateIndex;
      const emitEvent = (res, ref) => {
        emit(`validation${res === true ? 'Success' : 'Error'}`, ref);
      };
      const validateComponent = comp => {
        const valid = comp.validate();
        return typeof valid.then === 'function' ? valid.then(valid => ({
          valid,
          comp
        }), err => ({
          valid: false,
          comp,
          err
        })) : Promise.resolve({
          valid,
          comp
        });
      };
      const errorsPromise = props.greedy === true ? Promise.all(registeredComponents.map(validateComponent)).then(res => res.filter(r => r.valid !== true)) : registeredComponents.reduce((acc, comp) => acc.then(() => {
        return validateComponent(comp).then(r => {
          if (r.valid === false) {
            return Promise.reject(r);
          }
        });
      }), Promise.resolve()).catch(error => [error]);
      return errorsPromise.then(errors => {
        if (errors === void 0 || errors.length === 0) {
          index === validateIndex && emitEvent(true);
          return true;
        }

        // if not outdated already
        if (index === validateIndex) {
          const {
            comp,
            err
          } = errors[0];
          err !== void 0 && console.error(err);
          emitEvent(false, comp);
          if (focus === true) {
            // Try to focus first mounted and active component
            const activeError = errors.find(({
              comp
            }) => typeof comp.focus === 'function' && (0,_utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_3__/* .vmIsDestroyed */ .rU)(comp.$) === false);
            if (activeError !== void 0) {
              activeError.comp.focus();
            }
          }
        }
        return false;
      });
    }
    function resetValidation() {
      validateIndex++;
      registeredComponents.forEach(comp => {
        typeof comp.resetValidation === 'function' && comp.resetValidation();
      });
    }
    function submit(evt) {
      evt !== void 0 && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_1__/* .stopAndPrevent */ .Gu)(evt);
      const index = validateIndex + 1;
      validate().then(val => {
        // if not outdated && validation succeeded
        if (index === validateIndex && val === true) {
          if (props.onSubmit !== void 0) {
            emit('submit', evt);
          } else if (evt !== void 0 && evt.target !== void 0 && typeof evt.target.submit === 'function') {
            evt.target.submit();
          }
        }
      });
    }
    function reset(evt) {
      evt !== void 0 && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_1__/* .stopAndPrevent */ .Gu)(evt);
      emit('reset');
      (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .nextTick */ .dY)(() => {
        // allow userland to reset values before
        resetValidation();
        if (props.autofocus === true && props.noResetFocus !== true) {
          focus();
        }
      });
    }
    function focus() {
      (0,_utils_private_focus_focus_manager_js__WEBPACK_IMPORTED_MODULE_2__/* .addFocusFn */ .Gy)(() => {
        if (rootRef.value === null) return;
        const target = rootRef.value.querySelector('[autofocus][tabindex], [data-autofocus][tabindex]') || rootRef.value.querySelector('[autofocus] [tabindex], [data-autofocus] [tabindex]') || rootRef.value.querySelector('[autofocus], [data-autofocus]') || Array.prototype.find.call(rootRef.value.querySelectorAll('[tabindex]'), el => el.tabIndex !== -1);
        target !== null && target !== void 0 && target.focus({
          preventScroll: true
        });
      });
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .provide */ .Gt)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_7__/* .formKey */ .q3, {
      bindComponent(vmProxy) {
        registeredComponents.push(vmProxy);
      },
      unbindComponent(vmProxy) {
        const index = registeredComponents.indexOf(vmProxy);
        if (index !== -1) {
          registeredComponents.splice(index, 1);
        }
      }
    });
    let shouldActivate = false;
    (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .onDeactivated */ .Y4)(() => {
      shouldActivate = true;
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .onActivated */ .n)(() => {
      shouldActivate === true && props.autofocus === true && focus();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .onMounted */ .sV)(() => {
      props.autofocus === true && focus();
    });

    // expose public methods
    Object.assign(vm.proxy, {
      validate,
      resetValidation,
      submit,
      reset,
      focus,
      getValidationComponents: () => registeredComponents
    });
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_5__.h)('form', {
      class: 'q-form',
      ref: rootRef,
      onSubmit: submit,
      onReset: reset
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_8__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 8416:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8734);
/* harmony import */ var _resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1096);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5139);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(7973);






/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__/* .createComponent */ .a0)({
  name: 'QHeader',
  props: {
    modelValue: {
      type: Boolean,
      default: true
    },
    reveal: Boolean,
    revealOffset: {
      type: Number,
      default: 250
    },
    bordered: Boolean,
    elevated: Boolean,
    heightHint: {
      type: [String, Number],
      default: 50
    }
  },
  emits: ['reveal', 'focusin'],
  setup(props, {
    slots,
    emit
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .getCurrentInstance */ .nI)();
    const $layout = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .inject */ .WQ)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_4__/* .layoutKey */ .ON, _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_4__/* .emptyRenderFn */ .U_);
    if ($layout === _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_4__/* .emptyRenderFn */ .U_) {
      console.error('QHeader needs to be child of QLayout');
      return _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_4__/* .emptyRenderFn */ .U_;
    }
    const size = (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .ref */ .KR)(parseInt(props.heightHint, 10));
    const revealed = (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .ref */ .KR)(true);
    const fixed = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => props.reveal === true || $layout.view.value.indexOf('H') !== -1 || $q.platform.is.ios && $layout.isContainer.value === true);
    const offset = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => {
      if (props.modelValue !== true) {
        return 0;
      }
      if (fixed.value === true) {
        return revealed.value === true ? size.value : 0;
      }
      const offset = size.value - $layout.scroll.value.position;
      return offset > 0 ? offset : 0;
    });
    const hidden = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => props.modelValue !== true || fixed.value === true && revealed.value !== true);
    const revealOnFocus = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => props.modelValue === true && hidden.value === true && props.reveal === true);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => 'q-header q-layout__section--marginal ' + (fixed.value === true ? 'fixed' : 'absolute') + '-top' + (props.bordered === true ? ' q-header--bordered' : '') + (hidden.value === true ? ' q-header--hidden' : '') + (props.modelValue !== true ? ' q-layout--prevent-focus' : ''));
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => {
      const view = $layout.rows.value.top,
        css = {};
      if (view[0] === 'l' && $layout.left.space === true) {
        css[$q.lang.rtl === true ? 'right' : 'left'] = `${$layout.left.size}px`;
      }
      if (view[2] === 'r' && $layout.right.space === true) {
        css[$q.lang.rtl === true ? 'left' : 'right'] = `${$layout.right.size}px`;
      }
      return css;
    });
    function updateLayout(prop, val) {
      $layout.update('header', prop, val);
    }
    function updateLocal(prop, val) {
      if (prop.value !== val) {
        prop.value = val;
      }
    }
    function onResize({
      height
    }) {
      updateLocal(size, height);
      updateLayout('size', height);
    }
    function onFocusin(evt) {
      if (revealOnFocus.value === true) {
        updateLocal(revealed, true);
      }
      emit('focusin', evt);
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .watch */ .wB)(() => props.modelValue, val => {
      updateLayout('space', val);
      updateLocal(revealed, true);
      $layout.animate();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .watch */ .wB)(offset, val => {
      updateLayout('offset', val);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .watch */ .wB)(() => props.reveal, val => {
      val === false && updateLocal(revealed, props.modelValue);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .watch */ .wB)(revealed, val => {
      $layout.animate();
      emit('reveal', val);
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .watch */ .wB)($layout.scroll, scroll => {
      props.reveal === true && updateLocal(revealed, scroll.direction === 'up' || scroll.position <= props.revealOffset || scroll.position - scroll.inflectionPoint < 100);
    });
    const instance = {};
    $layout.instances.header = instance;
    props.modelValue === true && updateLayout('size', size.value);
    updateLayout('space', props.modelValue);
    updateLayout('offset', offset.value);
    (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .onBeforeUnmount */ .xo)(() => {
      if ($layout.instances.header === instance) {
        $layout.instances.header = void 0;
        updateLayout('size', 0);
        updateLayout('offset', 0);
        updateLayout('space', false);
      }
    });
    return () => {
      const child = (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_6__/* .hUniqueSlot */ .Ij)(slots.default, []);
      props.elevated === true && child.push((0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
        class: 'q-layout__shadow absolute-full overflow-hidden no-pointer-events'
      }));
      child.push((0,vue__WEBPACK_IMPORTED_MODULE_3__.h)(_resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
        debounce: 0,
        onResize
      }));
      return (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('header', {
        class: classes.value,
        style: style.value,
        onFocusin
      }, child);
    };
  }
}));

/***/ }),

/***/ 492:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1758);
/* harmony import */ var _composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1906);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5139);




const defaultViewBox = '0 0 24 24';
const sameFn = i => i;
const ionFn = i => `ionicons ${i}`;
const libMap = {
  'mdi-': i => `mdi ${i}`,
  'icon-': sameFn,
  // fontawesome equiv
  'bt-': i => `bt ${i}`,
  'eva-': i => `eva ${i}`,
  'ion-md': ionFn,
  'ion-ios': ionFn,
  'ion-logo': ionFn,
  'iconfont ': sameFn,
  'ti-': i => `themify-icon ${i}`,
  'bi-': i => `bootstrap-icons ${i}`
};
const matMap = {
  o_: '-outlined',
  r_: '-round',
  s_: '-sharp'
};
const symMap = {
  sym_o_: '-outlined',
  sym_r_: '-rounded',
  sym_s_: '-sharp'
};
const libRE = new RegExp('^(' + Object.keys(libMap).join('|') + ')');
const matRE = new RegExp('^(' + Object.keys(matMap).join('|') + ')');
const symRE = new RegExp('^(' + Object.keys(symMap).join('|') + ')');
const mRE = /^[Mm]\s?[-+]?\.?\d/;
const imgRE = /^img:/;
const svgUseRE = /^svguse:/;
const ionRE = /^ion-/;
const faRE = /^(fa-(sharp|solid|regular|light|brands|duotone|thin)|[lf]a[srlbdk]?) /;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__/* .createComponent */ .a0)({
  name: 'QIcon',
  props: {
    ..._composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_0__/* .useSizeProps */ .x_,
    tag: {
      type: String,
      default: 'i'
    },
    name: String,
    color: String,
    left: Boolean,
    right: Boolean
  },
  setup(props, {
    slots
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .getCurrentInstance */ .nI)();
    const sizeStyle = (0,_composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay)(props);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => 'q-icon' + (props.left === true ? ' on-left' : '') // TODO Qv3: drop this
    + (props.right === true ? ' on-right' : '') + (props.color !== void 0 ? ` text-${props.color}` : ''));
    const type = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => {
      let cls;
      let icon = props.name;
      if (icon === 'none' || !icon) {
        return {
          none: true
        };
      }
      if ($q.iconMapFn !== null) {
        const res = $q.iconMapFn(icon);
        if (res !== void 0) {
          if (res.icon !== void 0) {
            icon = res.icon;
            if (icon === 'none' || !icon) {
              return {
                none: true
              };
            }
          } else {
            return {
              cls: res.cls,
              content: res.content !== void 0 ? res.content : ' '
            };
          }
        }
      }
      if (mRE.test(icon) === true) {
        const [def, viewBox = defaultViewBox] = icon.split('|');
        return {
          svg: true,
          viewBox,
          nodes: def.split('&&').map(path => {
            const [d, style, transform] = path.split('@@');
            return (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('path', {
              style,
              d,
              transform
            });
          })
        };
      }
      if (imgRE.test(icon) === true) {
        return {
          img: true,
          src: icon.substring(4)
        };
      }
      if (svgUseRE.test(icon) === true) {
        const [def, viewBox = defaultViewBox] = icon.split('|');
        return {
          svguse: true,
          src: def.substring(7),
          viewBox
        };
      }
      let content = ' ';
      const matches = icon.match(libRE);
      if (matches !== null) {
        cls = libMap[matches[1]](icon);
      } else if (faRE.test(icon) === true) {
        cls = icon;
      } else if (ionRE.test(icon) === true) {
        cls = `ionicons ion-${$q.platform.is.ios === true ? 'ios' : 'md'}${icon.substring(3)}`;
      } else if (symRE.test(icon) === true) {
        // "notranslate" class is for Google Translate
        // to avoid tampering with Material Symbols ligature font
        //
        // Caution: To be able to add suffix to the class name,
        // keep the 'material-symbols' at the end of the string.
        cls = 'notranslate material-symbols';
        const matches = icon.match(symRE);
        if (matches !== null) {
          icon = icon.substring(6);
          cls += symMap[matches[1]];
        }
        content = icon;
      } else {
        // "notranslate" class is for Google Translate
        // to avoid tampering with Material Icons ligature font
        //
        // Caution: To be able to add suffix to the class name,
        // keep the 'material-icons' at the end of the string.
        cls = 'notranslate material-icons';
        const matches = icon.match(matRE);
        if (matches !== null) {
          icon = icon.substring(2);
          cls += matMap[matches[1]];
        }
        content = icon;
      }
      return {
        cls,
        content
      };
    });
    return () => {
      const data = {
        class: classes.value,
        style: sizeStyle.value,
        'aria-hidden': 'true',
        role: 'presentation'
      };
      if (type.value.none === true) {
        return (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)(props.tag, data, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__/* .hSlot */ .zm)(slots.default));
      }
      if (type.value.img === true) {
        return (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)(props.tag, data, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__/* .hMergeSlot */ .Hp)(slots.default, [(0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('img', {
          src: type.value.src
        })]));
      }
      if (type.value.svg === true) {
        return (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)(props.tag, data, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__/* .hMergeSlot */ .Hp)(slots.default, [(0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('svg', {
          viewBox: type.value.viewBox || '0 0 24 24'
        }, type.value.nodes)]));
      }
      if (type.value.svguse === true) {
        return (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)(props.tag, data, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__/* .hMergeSlot */ .Hp)(slots.default, [(0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('svg', {
          viewBox: type.value.viewBox
        }, [(0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('use', {
          'xlink:href': type.value.src
        })])]));
      }
      if (type.value.cls !== void 0) {
        data.class += ' ' + type.value.cls;
      }
      return (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)(props.tag, data, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__/* .hMergeSlot */ .Hp)(slots.default, [type.value.content]));
    };
  }
}));

/***/ }),

/***/ 9270:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ QInput)
});

// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(8734);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-field/use-field.js + 4 modules
var use_field = __webpack_require__(7617);
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.push.js
var es_array_push = __webpack_require__(239);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.keyboard/key-composition.js
var key_composition = __webpack_require__(2906);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/input/use-mask.js




// leave NAMED_MASKS at top of file (code referenced from docs)
const NAMED_MASKS = {
  date: '####/##/##',
  datetime: '####/##/## ##:##',
  time: '##:##',
  fulltime: '##:##:##',
  phone: '(###) ### - ####',
  card: '#### #### #### ####'
};
const TOKENS = {
  '#': {
    pattern: '[\\d]',
    negate: '[^\\d]'
  },
  S: {
    pattern: '[a-zA-Z]',
    negate: '[^a-zA-Z]'
  },
  N: {
    pattern: '[0-9a-zA-Z]',
    negate: '[^0-9a-zA-Z]'
  },
  A: {
    pattern: '[a-zA-Z]',
    negate: '[^a-zA-Z]',
    transform: v => v.toLocaleUpperCase()
  },
  a: {
    pattern: '[a-zA-Z]',
    negate: '[^a-zA-Z]',
    transform: v => v.toLocaleLowerCase()
  },
  X: {
    pattern: '[0-9a-zA-Z]',
    negate: '[^0-9a-zA-Z]',
    transform: v => v.toLocaleUpperCase()
  },
  x: {
    pattern: '[0-9a-zA-Z]',
    negate: '[^0-9a-zA-Z]',
    transform: v => v.toLocaleLowerCase()
  }
};
const KEYS = Object.keys(TOKENS);
KEYS.forEach(key => {
  TOKENS[key].regex = new RegExp(TOKENS[key].pattern);
});
const tokenRegexMask = new RegExp('\\\\([^.*+?^${}()|([\\]])|([.*+?^${}()|[\\]])|([' + KEYS.join('') + '])|(.)', 'g'),
  escRegex = /[.*+?^${}()|[\]\\]/g;
const MARKER = String.fromCharCode(1);
const useMaskProps = {
  mask: String,
  reverseFillMask: Boolean,
  fillMask: [Boolean, String],
  unmaskedValue: Boolean
};
/* harmony default export */ function use_mask(props, emit, emitValue, inputRef) {
  let maskMarked, maskReplaced, computedMask, computedUnmask, pastedTextStart, selectionAnchor;
  const hasMask = (0,reactivity_esm_bundler/* ref */.KR)(null);
  const innerValue = (0,reactivity_esm_bundler/* ref */.KR)(getInitialMaskedValue());
  function getIsTypeText() {
    return props.autogrow === true || ['textarea', 'text', 'search', 'url', 'tel', 'password'].includes(props.type);
  }
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.type + props.autogrow, updateMaskInternals);
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.mask, v => {
    if (v !== void 0) {
      updateMaskValue(innerValue.value, true);
    } else {
      const val = unmaskValue(innerValue.value);
      updateMaskInternals();
      props.modelValue !== val && emit('update:modelValue', val);
    }
  });
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.fillMask + props.reverseFillMask, () => {
    hasMask.value === true && updateMaskValue(innerValue.value, true);
  });
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.unmaskedValue, () => {
    hasMask.value === true && updateMaskValue(innerValue.value);
  });
  function getInitialMaskedValue() {
    updateMaskInternals();
    if (hasMask.value === true) {
      const masked = maskValue(unmaskValue(props.modelValue));
      return props.fillMask !== false ? fillWithMask(masked) : masked;
    }
    return props.modelValue;
  }
  function getPaddedMaskMarked(size) {
    if (size < maskMarked.length) {
      return maskMarked.slice(-size);
    }
    let pad = '',
      localMaskMarked = maskMarked;
    const padPos = localMaskMarked.indexOf(MARKER);
    if (padPos !== -1) {
      for (let i = size - localMaskMarked.length; i > 0; i--) {
        pad += MARKER;
      }
      localMaskMarked = localMaskMarked.slice(0, padPos) + pad + localMaskMarked.slice(padPos);
    }
    return localMaskMarked;
  }
  function updateMaskInternals() {
    hasMask.value = props.mask !== void 0 && props.mask.length !== 0 && getIsTypeText();
    if (hasMask.value === false) {
      computedUnmask = void 0;
      maskMarked = '';
      maskReplaced = '';
      return;
    }
    const localComputedMask = NAMED_MASKS[props.mask] === void 0 ? props.mask : NAMED_MASKS[props.mask],
      fillChar = typeof props.fillMask === 'string' && props.fillMask.length !== 0 ? props.fillMask.slice(0, 1) : '_',
      fillCharEscaped = fillChar.replace(escRegex, '\\$&'),
      unmask = [],
      extract = [],
      mask = [];
    let firstMatch = props.reverseFillMask === true,
      unmaskChar = '',
      negateChar = '';
    localComputedMask.replace(tokenRegexMask, (_, char1, esc, token, char2) => {
      if (token !== void 0) {
        const c = TOKENS[token];
        mask.push(c);
        negateChar = c.negate;
        if (firstMatch === true) {
          extract.push('(?:' + negateChar + '+)?(' + c.pattern + '+)?(?:' + negateChar + '+)?(' + c.pattern + '+)?');
          firstMatch = false;
        }
        extract.push('(?:' + negateChar + '+)?(' + c.pattern + ')?');
      } else if (esc !== void 0) {
        unmaskChar = '\\' + (esc === '\\' ? '' : esc);
        mask.push(esc);
        unmask.push('([^' + unmaskChar + ']+)?' + unmaskChar + '?');
      } else {
        const c = char1 !== void 0 ? char1 : char2;
        unmaskChar = c === '\\' ? '\\\\\\\\' : c.replace(escRegex, '\\\\$&');
        mask.push(c);
        unmask.push('([^' + unmaskChar + ']+)?' + unmaskChar + '?');
      }
    });
    const unmaskMatcher = new RegExp('^' + unmask.join('') + '(' + (unmaskChar === '' ? '.' : '[^' + unmaskChar + ']') + '+)?' + (unmaskChar === '' ? '' : '[' + unmaskChar + ']*') + '$'),
      extractLast = extract.length - 1,
      extractMatcher = extract.map((re, index) => {
        if (index === 0 && props.reverseFillMask === true) {
          return new RegExp('^' + fillCharEscaped + '*' + re);
        } else if (index === extractLast) {
          return new RegExp('^' + re + '(' + (negateChar === '' ? '.' : negateChar) + '+)?' + (props.reverseFillMask === true ? '$' : fillCharEscaped + '*'));
        }
        return new RegExp('^' + re);
      });
    computedMask = mask;
    computedUnmask = val => {
      const unmaskMatch = unmaskMatcher.exec(props.reverseFillMask === true ? val : val.slice(0, mask.length + 1));
      if (unmaskMatch !== null) {
        val = unmaskMatch.slice(1).join('');
      }
      const extractMatch = [],
        extractMatcherLength = extractMatcher.length;
      for (let i = 0, str = val; i < extractMatcherLength; i++) {
        const m = extractMatcher[i].exec(str);
        if (m === null) {
          break;
        }
        str = str.slice(m.shift().length);
        extractMatch.push(...m);
      }
      if (extractMatch.length !== 0) {
        return extractMatch.join('');
      }
      return val;
    };
    maskMarked = mask.map(v => typeof v === 'string' ? v : MARKER).join('');
    maskReplaced = maskMarked.split(MARKER).join(fillChar);
  }
  function updateMaskValue(rawVal, updateMaskInternalsFlag, inputType) {
    const inp = inputRef.value,
      end = inp.selectionEnd,
      endReverse = inp.value.length - end,
      unmasked = unmaskValue(rawVal);

    // Update here so unmask uses the original fillChar
    updateMaskInternalsFlag === true && updateMaskInternals();
    const preMasked = maskValue(unmasked),
      masked = props.fillMask !== false ? fillWithMask(preMasked) : preMasked,
      changed = innerValue.value !== masked;

    // We want to avoid "flickering" so we set value immediately
    inp.value !== masked && (inp.value = masked);
    changed === true && (innerValue.value = masked);
    document.activeElement === inp && (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
      if (masked === maskReplaced) {
        const cursor = props.reverseFillMask === true ? maskReplaced.length : 0;
        inp.setSelectionRange(cursor, cursor, 'forward');
        return;
      }
      if (inputType === 'insertFromPaste' && props.reverseFillMask !== true) {
        const maxEnd = inp.selectionEnd;
        let cursor = end - 1;
        // each non-marker char means we move once to right
        for (let i = pastedTextStart; i <= cursor && i < maxEnd; i++) {
          if (maskMarked[i] !== MARKER) {
            cursor++;
          }
        }
        moveCursor.right(inp, cursor);
        return;
      }
      if (['deleteContentBackward', 'deleteContentForward'].indexOf(inputType) !== -1) {
        const cursor = props.reverseFillMask === true ? end === 0 ? masked.length > preMasked.length ? 1 : 0 : Math.max(0, masked.length - (masked === maskReplaced ? 0 : Math.min(preMasked.length, endReverse) + 1)) + 1 : end;
        inp.setSelectionRange(cursor, cursor, 'forward');
        return;
      }
      if (props.reverseFillMask === true) {
        if (changed === true) {
          const cursor = Math.max(0, masked.length - (masked === maskReplaced ? 0 : Math.min(preMasked.length, endReverse + 1)));
          if (cursor === 1 && end === 1) {
            inp.setSelectionRange(cursor, cursor, 'forward');
          } else {
            moveCursor.rightReverse(inp, cursor);
          }
        } else {
          const cursor = masked.length - endReverse;
          inp.setSelectionRange(cursor, cursor, 'backward');
        }
      } else {
        if (changed === true) {
          const cursor = Math.max(0, maskMarked.indexOf(MARKER), Math.min(preMasked.length, end) - 1);
          moveCursor.right(inp, cursor);
        } else {
          const cursor = end - 1;
          moveCursor.right(inp, cursor);
        }
      }
    });
    const val = props.unmaskedValue === true ? unmaskValue(masked) : masked;
    if (String(props.modelValue) !== val && (props.modelValue !== null || val !== '')) {
      emitValue(val, true);
    }
  }
  function moveCursorForPaste(inp, start, end) {
    const preMasked = maskValue(unmaskValue(inp.value));
    start = Math.max(0, maskMarked.indexOf(MARKER), Math.min(preMasked.length, start));
    pastedTextStart = start;
    inp.setSelectionRange(start, end, 'forward');
  }
  const moveCursor = {
    left(inp, cursor) {
      const noMarkBefore = maskMarked.slice(cursor - 1).indexOf(MARKER) === -1;
      let i = Math.max(0, cursor - 1);
      for (; i >= 0; i--) {
        if (maskMarked[i] === MARKER) {
          cursor = i;
          noMarkBefore === true && cursor++;
          break;
        }
      }
      if (i < 0 && maskMarked[cursor] !== void 0 && maskMarked[cursor] !== MARKER) {
        return moveCursor.right(inp, 0);
      }
      cursor >= 0 && inp.setSelectionRange(cursor, cursor, 'backward');
    },
    right(inp, cursor) {
      const limit = inp.value.length;
      let i = Math.min(limit, cursor + 1);
      for (; i <= limit; i++) {
        if (maskMarked[i] === MARKER) {
          cursor = i;
          break;
        } else if (maskMarked[i - 1] === MARKER) {
          cursor = i;
        }
      }
      if (i > limit && maskMarked[cursor - 1] !== void 0 && maskMarked[cursor - 1] !== MARKER) {
        return moveCursor.left(inp, limit);
      }
      inp.setSelectionRange(cursor, cursor, 'forward');
    },
    leftReverse(inp, cursor) {
      const localMaskMarked = getPaddedMaskMarked(inp.value.length);
      let i = Math.max(0, cursor - 1);
      for (; i >= 0; i--) {
        if (localMaskMarked[i - 1] === MARKER) {
          cursor = i;
          break;
        } else if (localMaskMarked[i] === MARKER) {
          cursor = i;
          if (i === 0) {
            break;
          }
        }
      }
      if (i < 0 && localMaskMarked[cursor] !== void 0 && localMaskMarked[cursor] !== MARKER) {
        return moveCursor.rightReverse(inp, 0);
      }
      cursor >= 0 && inp.setSelectionRange(cursor, cursor, 'backward');
    },
    rightReverse(inp, cursor) {
      const limit = inp.value.length,
        localMaskMarked = getPaddedMaskMarked(limit),
        noMarkBefore = localMaskMarked.slice(0, cursor + 1).indexOf(MARKER) === -1;
      let i = Math.min(limit, cursor + 1);
      for (; i <= limit; i++) {
        if (localMaskMarked[i - 1] === MARKER) {
          cursor = i;
          cursor > 0 && noMarkBefore === true && cursor--;
          break;
        }
      }
      if (i > limit && localMaskMarked[cursor - 1] !== void 0 && localMaskMarked[cursor - 1] !== MARKER) {
        return moveCursor.leftReverse(inp, limit);
      }
      inp.setSelectionRange(cursor, cursor, 'forward');
    }
  };
  function onMaskedClick(e) {
    emit('click', e);
    selectionAnchor = void 0;
  }
  function onMaskedKeydown(e) {
    emit('keydown', e);
    if ((0,key_composition/* shouldIgnoreKey */.JL)(e) === true || e.altKey === true // let browser handle these
    ) {
      return;
    }
    const inp = inputRef.value,
      start = inp.selectionStart,
      end = inp.selectionEnd;
    if (!e.shiftKey) {
      selectionAnchor = void 0;
    }
    if (e.keyCode === 37 || e.keyCode === 39) {
      // Left / Right
      if (e.shiftKey && selectionAnchor === void 0) {
        selectionAnchor = inp.selectionDirection === 'forward' ? start : end;
      }
      const fn = moveCursor[(e.keyCode === 39 ? 'right' : 'left') + (props.reverseFillMask === true ? 'Reverse' : '')];
      e.preventDefault();
      fn(inp, selectionAnchor === start ? end : start);
      if (e.shiftKey) {
        const cursor = inp.selectionStart;
        inp.setSelectionRange(Math.min(selectionAnchor, cursor), Math.max(selectionAnchor, cursor), 'forward');
      }
    } else if (e.keyCode === 8 // Backspace
    && props.reverseFillMask !== true && start === end) {
      moveCursor.left(inp, start);
      inp.setSelectionRange(inp.selectionStart, end, 'backward');
    } else if (e.keyCode === 46 // Delete
    && props.reverseFillMask === true && start === end) {
      moveCursor.rightReverse(inp, end);
      inp.setSelectionRange(start, inp.selectionEnd, 'forward');
    }
  }
  function maskValue(val) {
    if (val === void 0 || val === null || val === '') {
      return '';
    }
    if (props.reverseFillMask === true) {
      return maskValueReverse(val);
    }
    const mask = computedMask;
    let valIndex = 0,
      output = '';
    for (let maskIndex = 0; maskIndex < mask.length; maskIndex++) {
      const valChar = val[valIndex],
        maskDef = mask[maskIndex];
      if (typeof maskDef === 'string') {
        output += maskDef;
        valChar === maskDef && valIndex++;
      } else if (valChar !== void 0 && maskDef.regex.test(valChar)) {
        output += maskDef.transform !== void 0 ? maskDef.transform(valChar) : valChar;
        valIndex++;
      } else {
        return output;
      }
    }
    return output;
  }
  function maskValueReverse(val) {
    const mask = computedMask,
      firstTokenIndex = maskMarked.indexOf(MARKER);
    let valIndex = val.length - 1,
      output = '';
    for (let maskIndex = mask.length - 1; maskIndex >= 0 && valIndex !== -1; maskIndex--) {
      const maskDef = mask[maskIndex];
      let valChar = val[valIndex];
      if (typeof maskDef === 'string') {
        output = maskDef + output;
        valChar === maskDef && valIndex--;
      } else if (valChar !== void 0 && maskDef.regex.test(valChar)) {
        do {
          output = (maskDef.transform !== void 0 ? maskDef.transform(valChar) : valChar) + output;
          valIndex--;
          valChar = val[valIndex];
          // eslint-disable-next-line no-unmodified-loop-condition
        } while (firstTokenIndex === maskIndex && valChar !== void 0 && maskDef.regex.test(valChar));
      } else {
        return output;
      }
    }
    return output;
  }
  function unmaskValue(val) {
    return typeof val !== 'string' || computedUnmask === void 0 ? typeof val === 'number' ? computedUnmask('' + val) : val : computedUnmask(val);
  }
  function fillWithMask(val) {
    if (maskReplaced.length - val.length <= 0) {
      return val;
    }
    return props.reverseFillMask === true && val.length !== 0 ? maskReplaced.slice(0, -val.length) + val : val + maskReplaced.slice(val.length);
  }
  return {
    innerValue,
    hasMask,
    moveCursorForPaste,
    updateMaskValue,
    onMaskedKeydown,
    onMaskedClick
  };
}
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/use-form/private.use-form.js
var private_use_form = __webpack_require__(2510);
;// CONCATENATED MODULE: ./node_modules/quasar/src/composables/private.use-file/use-file-dom-props.js

/* harmony default export */ function use_file_dom_props(props, typeGuard) {
  function getFormDomProps() {
    const model = props.modelValue;
    try {
      const dt = 'DataTransfer' in window ? new DataTransfer() : 'ClipboardEvent' in window ? new ClipboardEvent('').clipboardData : void 0;
      if (Object(model) === model) {
        ('length' in model ? Array.from(model) : [model]).forEach(file => {
          dt.items.add(file);
        });
      }
      return {
        files: dt.files
      };
    } catch (e) {
      return {
        files: void 0
      };
    }
  }
  return typeGuard === true ? (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    if (props.type !== 'file') {
      return;
    }
    return getFormDomProps();
  }) : (0,runtime_core_esm_bundler/* computed */.EW)(getFormDomProps);
}
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-key-composition/use-key-composition.js
var use_key_composition = __webpack_require__(2342);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.focus/focus-manager.js
var focus_manager = __webpack_require__(8983);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.inject-obj-prop/inject-obj-prop.js
var inject_obj_prop = __webpack_require__(2453);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/input/QInput.js










/* harmony default export */ const QInput = ((0,create/* createComponent */.a0)({
  name: 'QInput',
  inheritAttrs: false,
  props: {
    ...use_field/* useFieldProps */.OJ,
    ...useMaskProps,
    ...private_use_form/* useFormProps */.Sc,
    // override of useFieldProps > modelValue
    modelValue:  false ? 0 // SSR does not know about FileList
    : [String, Number, FileList],
    shadowText: String,
    type: {
      type: String,
      default: 'text'
    },
    debounce: [String, Number],
    autogrow: Boolean,
    // makes a textarea

    inputClass: [Array, String, Object],
    inputStyle: [Array, String, Object]
  },
  emits: [...use_field/* useFieldEmits */.mU, 'paste', 'change', 'keydown', 'click', 'animationend'],
  setup(props, {
    emit,
    attrs
  }) {
    const {
      proxy
    } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
    const {
      $q
    } = proxy;
    const temp = {};
    let emitCachedValue = NaN,
      typedNumber,
      stopValueWatcher,
      emitTimer = null,
      emitValueFn;
    const inputRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const nameProp = (0,private_use_form/* useFormInputNameAttr */.M4)(props);
    const {
      innerValue,
      hasMask,
      moveCursorForPaste,
      updateMaskValue,
      onMaskedKeydown,
      onMaskedClick
    } = use_mask(props, emit, emitValue, inputRef);
    const formDomProps = use_file_dom_props(props, /* type guard */true);
    const hasValue = (0,runtime_core_esm_bundler/* computed */.EW)(() => (0,use_field/* fieldValueIsFilled */.o9)(innerValue.value));
    const onComposition = (0,use_key_composition/* default */.A)(onInput);
    const state = (0,use_field/* useFieldState */.$7)({
      changeEvent: true
    });
    const isTextarea = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.type === 'textarea' || props.autogrow === true);
    const isTypeText = (0,runtime_core_esm_bundler/* computed */.EW)(() => isTextarea.value === true || ['text', 'search', 'url', 'tel', 'password'].includes(props.type));
    const onEvents = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const evt = {
        ...state.splitAttrs.listeners.value,
        onInput,
        onPaste,
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        onChange,
        onBlur: onFinishEditing,
        onFocus: event_event/* stop */.ds
      };
      evt.onCompositionstart = evt.onCompositionupdate = evt.onCompositionend = onComposition;
      if (hasMask.value === true) {
        evt.onKeydown = onMaskedKeydown;
        // reset selection anchor on pointer selection
        evt.onClick = onMaskedClick;
      }
      if (props.autogrow === true) {
        evt.onAnimationend = onAnimationend;
      }
      return evt;
    });
    const inputAttrs = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const attrs = {
        tabindex: 0,
        'data-autofocus': props.autofocus === true || void 0,
        rows: props.type === 'textarea' ? 6 : void 0,
        'aria-label': props.label,
        name: nameProp.value,
        ...state.splitAttrs.attributes.value,
        id: state.targetUid.value,
        maxlength: props.maxlength,
        disabled: props.disable === true,
        readonly: props.readonly === true
      };
      if (isTextarea.value === false) {
        attrs.type = props.type;
      }
      if (props.autogrow === true) {
        attrs.rows = 1;
      }
      return attrs;
    });

    // some browsers lose the native input value
    // so we need to reattach it dynamically
    // (like type="password" <-> type="text"; see #12078)
    (0,runtime_core_esm_bundler/* watch */.wB)(() => props.type, () => {
      if (inputRef.value) {
        inputRef.value.value = props.modelValue;
      }
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(() => props.modelValue, v => {
      if (hasMask.value === true) {
        if (stopValueWatcher === true) {
          stopValueWatcher = false;
          if (String(v) === emitCachedValue) {
            return;
          }
        }
        updateMaskValue(v);
      } else if (innerValue.value !== v) {
        innerValue.value = v;
        if (props.type === 'number' && temp.hasOwnProperty('value') === true) {
          if (typedNumber === true) {
            typedNumber = false;
          } else {
            delete temp.value;
          }
        }
      }

      // textarea only
      props.autogrow === true && (0,runtime_core_esm_bundler/* nextTick */.dY)(adjustHeight);
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(() => props.autogrow, val => {
      // textarea only
      if (val === true) {
        (0,runtime_core_esm_bundler/* nextTick */.dY)(adjustHeight);
      }
      // if it has a number of rows set respect it
      else if (inputRef.value !== null && attrs.rows > 0) {
        inputRef.value.style.height = 'auto';
      }
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(() => props.dense, () => {
      props.autogrow === true && (0,runtime_core_esm_bundler/* nextTick */.dY)(adjustHeight);
    });
    function focus() {
      (0,focus_manager/* addFocusFn */.Gy)(() => {
        const el = document.activeElement;
        if (inputRef.value !== null && inputRef.value !== el && (el === null || el.id !== state.targetUid.value)) {
          inputRef.value.focus({
            preventScroll: true
          });
        }
      });
    }
    function select() {
      inputRef.value !== null && inputRef.value.select();
    }
    function onPaste(e) {
      if (hasMask.value === true && props.reverseFillMask !== true) {
        const inp = e.target;
        moveCursorForPaste(inp, inp.selectionStart, inp.selectionEnd);
      }
      emit('paste', e);
    }
    function onInput(e) {
      if (!e || !e.target) {
        return;
      }
      if (props.type === 'file') {
        emit('update:modelValue', e.target.files);
        return;
      }
      const val = e.target.value;
      if (e.target.qComposing === true) {
        temp.value = val;
        return;
      }
      if (hasMask.value === true) {
        updateMaskValue(val, false, e.inputType);
      } else {
        emitValue(val);
        if (isTypeText.value === true && e.target === document.activeElement) {
          const {
            selectionStart,
            selectionEnd
          } = e.target;
          if (selectionStart !== void 0 && selectionEnd !== void 0) {
            (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
              if (e.target === document.activeElement && val.indexOf(e.target.value) === 0) {
                e.target.setSelectionRange(selectionStart, selectionEnd);
              }
            });
          }
        }
      }

      // we need to trigger it immediately too,
      // to avoid "flickering"
      props.autogrow === true && adjustHeight();
    }
    function onAnimationend(e) {
      emit('animationend', e);
      adjustHeight();
    }
    function emitValue(val, stopWatcher) {
      emitValueFn = () => {
        emitTimer = null;
        if (props.type !== 'number' && temp.hasOwnProperty('value') === true) {
          delete temp.value;
        }
        if (props.modelValue !== val && emitCachedValue !== val) {
          emitCachedValue = val;
          stopWatcher === true && (stopValueWatcher = true);
          emit('update:modelValue', val);
          (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
            emitCachedValue === val && (emitCachedValue = NaN);
          });
        }
        emitValueFn = void 0;
      };
      if (props.type === 'number') {
        typedNumber = true;
        temp.value = val;
      }
      if (props.debounce !== void 0) {
        emitTimer !== null && clearTimeout(emitTimer);
        temp.value = val;
        emitTimer = setTimeout(emitValueFn, props.debounce);
      } else {
        emitValueFn();
      }
    }

    // textarea only
    function adjustHeight() {
      requestAnimationFrame(() => {
        const inp = inputRef.value;
        if (inp !== null) {
          const parentStyle = inp.parentNode.style;
          // chrome does not keep scroll #15498
          const {
            scrollTop
          } = inp;
          // chrome calculates a smaller scrollHeight when in a .column container
          const {
            overflowY,
            maxHeight
          } = $q.platform.is.firefox === true ? {} : window.getComputedStyle(inp);
          // on firefox or if overflowY is specified as scroll #14263, #14344
          // we don't touch overflow
          // firefox is not so bad in the end
          const changeOverflow = overflowY !== void 0 && overflowY !== 'scroll';

          // reset height of textarea to a small size to detect the real height
          // but keep the total control size the same
          changeOverflow === true && (inp.style.overflowY = 'hidden');
          parentStyle.marginBottom = inp.scrollHeight - 1 + 'px';
          inp.style.height = '1px';
          inp.style.height = inp.scrollHeight + 'px';
          // we should allow scrollbars only
          // if there is maxHeight and content is taller than maxHeight
          changeOverflow === true && (inp.style.overflowY = parseInt(maxHeight, 10) < inp.scrollHeight ? 'auto' : 'hidden');
          parentStyle.marginBottom = '';
          inp.scrollTop = scrollTop;
        }
      });
    }
    function onChange(e) {
      onComposition(e);
      if (emitTimer !== null) {
        clearTimeout(emitTimer);
        emitTimer = null;
      }
      emitValueFn !== void 0 && emitValueFn();
      emit('change', e.target.value);
    }
    function onFinishEditing(e) {
      e !== void 0 && (0,event_event/* stop */.ds)(e);
      if (emitTimer !== null) {
        clearTimeout(emitTimer);
        emitTimer = null;
      }
      emitValueFn !== void 0 && emitValueFn();
      typedNumber = false;
      stopValueWatcher = false;
      delete temp.value;

      // we need to use setTimeout instead of this.$nextTick
      // to avoid a bug where focusout is not emitted for type date/time/week/...
      props.type !== 'file' && setTimeout(() => {
        if (inputRef.value !== null) {
          inputRef.value.value = innerValue.value !== void 0 ? innerValue.value : '';
        }
      });
    }
    function getCurValue() {
      return temp.hasOwnProperty('value') === true ? temp.value : innerValue.value !== void 0 ? innerValue.value : '';
    }
    (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(() => {
      onFinishEditing();
    });
    (0,runtime_core_esm_bundler/* onMounted */.sV)(() => {
      // textarea only
      props.autogrow === true && adjustHeight();
    });
    Object.assign(state, {
      innerValue,
      fieldClass: (0,runtime_core_esm_bundler/* computed */.EW)(() => `q-${isTextarea.value === true ? 'textarea' : 'input'}` + (props.autogrow === true ? ' q-textarea--autogrow' : '')),
      hasShadow: (0,runtime_core_esm_bundler/* computed */.EW)(() => props.type !== 'file' && typeof props.shadowText === 'string' && props.shadowText.length !== 0),
      inputRef,
      emitValue,
      hasValue,
      floatingLabel: (0,runtime_core_esm_bundler/* computed */.EW)(() => hasValue.value === true && (props.type !== 'number' || isNaN(innerValue.value) === false) || (0,use_field/* fieldValueIsFilled */.o9)(props.displayValue)),
      getControl: () => {
        return (0,runtime_core_esm_bundler.h)(isTextarea.value === true ? 'textarea' : 'input', {
          ref: inputRef,
          class: ['q-field__native q-placeholder', props.inputClass],
          style: props.inputStyle,
          ...inputAttrs.value,
          ...onEvents.value,
          ...(props.type !== 'file' ? {
            value: getCurValue()
          } : formDomProps.value)
        });
      },
      getShadowControl: () => {
        return (0,runtime_core_esm_bundler.h)('div', {
          class: 'q-field__native q-field__shadow absolute-bottom no-pointer-events' + (isTextarea.value === true ? '' : ' text-no-wrap')
        }, [(0,runtime_core_esm_bundler.h)('span', {
          class: 'invisible'
        }, getCurValue()), (0,runtime_core_esm_bundler.h)('span', props.shadowText)]);
      }
    });
    const renderFn = (0,use_field/* default */.Ay)(state);

    // expose public methods
    Object.assign(proxy, {
      focus,
      select,
      getNativeElement: () => inputRef.value // deprecated
    });
    (0,inject_obj_prop/* injectProp */.$)(proxy, 'nativeEl', () => inputRef.value);
    return renderFn;
  }
}));

/***/ }),

/***/ 124:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8734);
/* harmony import */ var _composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6372);
/* harmony import */ var _composables_private_use_router_link_use_router_link_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7502);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5139);
/* harmony import */ var _utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2500);
/* harmony import */ var _utils_private_keyboard_key_composition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2906);







/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__/* .createComponent */ .a0)({
  name: 'QItem',
  props: {
    ..._composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__/* .useDarkProps */ .C,
    ..._composables_private_use_router_link_use_router_link_js__WEBPACK_IMPORTED_MODULE_1__/* .useRouterLinkProps */ .Ji,
    tag: {
      type: String,
      default: 'div'
    },
    active: {
      type: Boolean,
      default: null
    },
    clickable: Boolean,
    dense: Boolean,
    insetLevel: Number,
    tabindex: [String, Number],
    focused: Boolean,
    manualFocus: Boolean
  },
  emits: ['click', 'keyup'],
  setup(props, {
    slots,
    emit
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .getCurrentInstance */ .nI)();
    const isDark = (0,_composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(props, $q);
    const {
      hasLink,
      linkAttrs,
      linkClass,
      linkTag,
      navigateOnClick
    } = (0,_composables_private_use_router_link_use_router_link_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Ay)();
    const rootRef = (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .ref */ .KR)(null);
    const blurTargetRef = (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .ref */ .KR)(null);
    const isActionable = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => props.clickable === true || hasLink.value === true || props.tag === 'label');
    const isClickable = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => props.disable !== true && isActionable.value === true);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => 'q-item q-item-type row no-wrap' + (props.dense === true ? ' q-item--dense' : '') + (isDark.value === true ? ' q-item--dark' : '') + (hasLink.value === true && props.active === null ? linkClass.value : props.active === true ? ` q-item--active${props.activeClass !== void 0 ? ` ${props.activeClass}` : ''}` : '') + (props.disable === true ? ' disabled' : '') + (isClickable.value === true ? ' q-item--clickable q-link cursor-pointer ' + (props.manualFocus === true ? 'q-manual-focusable' : 'q-focusable q-hoverable') + (props.focused === true ? ' q-manual-focusable--focused' : '') : ''));
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
      if (props.insetLevel === void 0) {
        return null;
      }
      const dir = $q.lang.rtl === true ? 'Right' : 'Left';
      return {
        ['padding' + dir]: 16 + props.insetLevel * 56 + 'px'
      };
    });
    function onClick(e) {
      if (isClickable.value === true) {
        if (blurTargetRef.value !== null) {
          if (e.qKeyEvent !== true && document.activeElement === rootRef.value) {
            blurTargetRef.value.focus();
          } else if (document.activeElement === blurTargetRef.value) {
            rootRef.value.focus();
          }
        }
        navigateOnClick(e);
      }
    }
    function onKeyup(e) {
      if (isClickable.value === true && (0,_utils_private_keyboard_key_composition_js__WEBPACK_IMPORTED_MODULE_6__/* .isKeyCode */ .Dv)(e, [13, 32]) === true) {
        (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .stopAndPrevent */ .Gu)(e);

        // for ripple
        e.qKeyEvent = true;

        // for click trigger
        const evt = new MouseEvent('click', e);
        evt.qKeyEvent = true;
        rootRef.value.dispatchEvent(evt);
      }
      emit('keyup', e);
    }
    function getContent() {
      const child = (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_7__/* .hUniqueSlot */ .Ij)(slots.default, []);
      isClickable.value === true && child.unshift((0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
        class: 'q-focus-helper',
        tabindex: -1,
        ref: blurTargetRef
      }));
      return child;
    }
    return () => {
      const data = {
        ref: rootRef,
        class: classes.value,
        style: style.value,
        role: 'listitem',
        onClick,
        onKeyup
      };
      if (isClickable.value === true) {
        data.tabindex = props.tabindex || '0';
        Object.assign(data, linkAttrs.value);
      } else if (isActionable.value === true) {
        data['aria-disabled'] = 'true';
      }
      return (0,vue__WEBPACK_IMPORTED_MODULE_4__.h)(linkTag.value, data, getContent());
    };
  }
}));

/***/ }),

/***/ 3796:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5139);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QItemLabel',
  props: {
    overline: Boolean,
    caption: Boolean,
    header: Boolean,
    lines: [Number, String]
  },
  setup(props, {
    slots
  }) {
    const parsedLines = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => parseInt(props.lines, 10));
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => 'q-item__label' + (props.overline === true ? ' q-item__label--overline text-overline' : '') + (props.caption === true ? ' q-item__label--caption text-caption' : '') + (props.header === true ? ' q-item__label--header' : '') + (parsedLines.value === 1 ? ' ellipsis' : ''));
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => {
      return props.lines !== void 0 && parsedLines.value > 1 ? {
        overflow: 'hidden',
        display: '-webkit-box',
        '-webkit-box-orient': 'vertical',
        '-webkit-line-clamp': parsedLines.value
      } : null;
    });
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('div', {
      style: style.value,
      class: classes.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 5173:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5139);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QItemSection',
  props: {
    avatar: Boolean,
    thumbnail: Boolean,
    side: Boolean,
    top: Boolean,
    noWrap: Boolean
  },
  setup(props, {
    slots
  }) {
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => 'q-item__section column' + ` q-item__section--${props.avatar === true || props.side === true || props.thumbnail === true ? 'side' : 'main'}` + (props.top === true ? ' q-item__section--top justify-start' : ' justify-center') + (props.avatar === true ? ' q-item__section--avatar' : '') + (props.thumbnail === true ? ' q-item__section--thumbnail' : '') + (props.noWrap === true ? ' q-item__section--nowrap' : ''));
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('div', {
      class: classes.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 3999:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9467);
/* harmony import */ var _composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6372);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5139);




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__/* .createComponent */ .a0)({
  name: 'QList',
  props: {
    ..._composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__/* .useDarkProps */ .C,
    bordered: Boolean,
    dense: Boolean,
    separator: Boolean,
    padding: Boolean,
    tag: {
      type: String,
      default: 'div'
    }
  },
  setup(props, {
    slots
  }) {
    const vm = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .getCurrentInstance */ .nI)();
    const isDark = (0,_composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(props, vm.proxy.$q);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => 'q-list' + (props.bordered === true ? ' q-list--bordered' : '') + (props.dense === true ? ' q-list--dense' : '') + (props.separator === true ? ' q-list--separator' : '') + (isDark.value === true ? ' q-list--dark' : '') + (props.padding === true ? ' q-list--padding' : ''));
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)(props.tag, {
      class: classes.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 2008:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8734);
/* harmony import */ var _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1597);
/* harmony import */ var _scroll_observer_QScrollObserver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3163);
/* harmony import */ var _resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1096);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9467);
/* harmony import */ var _utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8336);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(5139);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7973);








/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_4__/* .createComponent */ .a0)({
  name: 'QLayout',
  props: {
    container: Boolean,
    view: {
      type: String,
      default: 'hhh lpr fff',
      validator: v => /^(h|l)h(h|r) lpr (f|l)f(f|r)$/.test(v.toLowerCase())
    },
    onScroll: Function,
    onScrollHeight: Function,
    onResize: Function
  },
  setup(props, {
    slots,
    emit
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .getCurrentInstance */ .nI)();
    const rootRef = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)(null);

    // page related
    const height = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)($q.screen.height);
    const width = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)(props.container === true ? 0 : $q.screen.width);
    const scroll = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)({
      position: 0,
      direction: 'down',
      inflectionPoint: 0
    });

    // container only prop
    const containerHeight = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)(0);
    const scrollbarWidth = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)(_plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__/* .isRuntimeSsrPreHydration */ .ot.value === true ? 0 : (0,_utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_3__/* .getScrollbarWidth */ .XJ)());
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .computed */ .EW)(() => 'q-layout q-layout--' + (props.container === true ? 'containerized' : 'standard'));
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .computed */ .EW)(() => props.container === false ? {
      minHeight: $q.screen.height + 'px'
    } : null);

    // used by container only
    const targetStyle = (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .computed */ .EW)(() => scrollbarWidth.value !== 0 ? {
      [$q.lang.rtl === true ? 'left' : 'right']: `${scrollbarWidth.value}px`
    } : null);
    const targetChildStyle = (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .computed */ .EW)(() => scrollbarWidth.value !== 0 ? {
      [$q.lang.rtl === true ? 'right' : 'left']: 0,
      [$q.lang.rtl === true ? 'left' : 'right']: `-${scrollbarWidth.value}px`,
      width: `calc(100% + ${scrollbarWidth.value}px)`
    } : null);
    function onPageScroll(data) {
      if (props.container === true || document.qScrollPrevented !== true) {
        const info = {
          position: data.position.top,
          direction: data.direction,
          directionChanged: data.directionChanged,
          inflectionPoint: data.inflectionPoint.top,
          delta: data.delta.top
        };
        scroll.value = info;
        props.onScroll !== void 0 && emit('scroll', info);
      }
    }
    function onPageResize(data) {
      const {
        height: newHeight,
        width: newWidth
      } = data;
      let resized = false;
      if (height.value !== newHeight) {
        resized = true;
        height.value = newHeight;
        props.onScrollHeight !== void 0 && emit('scrollHeight', newHeight);
        updateScrollbarWidth();
      }
      if (width.value !== newWidth) {
        resized = true;
        width.value = newWidth;
      }
      if (resized === true && props.onResize !== void 0) {
        emit('resize', data);
      }
    }
    function onContainerResize({
      height
    }) {
      if (containerHeight.value !== height) {
        containerHeight.value = height;
        updateScrollbarWidth();
      }
    }
    function updateScrollbarWidth() {
      if (props.container === true) {
        const width = height.value > containerHeight.value ? (0,_utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_3__/* .getScrollbarWidth */ .XJ)() : 0;
        if (scrollbarWidth.value !== width) {
          scrollbarWidth.value = width;
        }
      }
    }
    let animateTimer = null;
    const $layout = {
      instances: {},
      view: (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .computed */ .EW)(() => props.view),
      isContainer: (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .computed */ .EW)(() => props.container),
      rootRef,
      height,
      containerHeight,
      scrollbarWidth,
      totalWidth: (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .computed */ .EW)(() => width.value + scrollbarWidth.value),
      rows: (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .computed */ .EW)(() => {
        const rows = props.view.toLowerCase().split(' ');
        return {
          top: rows[0].split(''),
          middle: rows[1].split(''),
          bottom: rows[2].split('')
        };
      }),
      header: (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .reactive */ .Kh)({
        size: 0,
        offset: 0,
        space: false
      }),
      right: (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .reactive */ .Kh)({
        size: 300,
        offset: 0,
        space: false
      }),
      footer: (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .reactive */ .Kh)({
        size: 0,
        offset: 0,
        space: false
      }),
      left: (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .reactive */ .Kh)({
        size: 300,
        offset: 0,
        space: false
      }),
      scroll,
      animate() {
        if (animateTimer !== null) {
          clearTimeout(animateTimer);
        } else {
          document.body.classList.add('q-body--layout-animate');
        }
        animateTimer = setTimeout(() => {
          animateTimer = null;
          document.body.classList.remove('q-body--layout-animate');
        }, 155);
      },
      update(part, prop, val) {
        $layout[part][prop] = val;
      }
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .provide */ .Gt)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_7__/* .layoutKey */ .ON, $layout);

    // prevent scrollbar flicker while resizing window height
    // if no page scrollbar is already present
    if ( true && (0,_utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_3__/* .getScrollbarWidth */ .XJ)() > 0) {
      let timer = null;
      const el = document.body;
      function restoreScrollbar() {
        timer = null;
        el.classList.remove('hide-scrollbar');
      }
      function hideScrollbar() {
        if (timer === null) {
          // if it has no scrollbar then there's nothing to do

          if (el.scrollHeight > $q.screen.height) {
            return;
          }
          el.classList.add('hide-scrollbar');
        } else {
          clearTimeout(timer);
        }
        timer = setTimeout(restoreScrollbar, 300);
      }
      function updateScrollEvent(action) {
        if (timer !== null && action === 'remove') {
          clearTimeout(timer);
          restoreScrollbar();
        }
        window[`${action}EventListener`]('resize', hideScrollbar);
      }
      (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .watch */ .wB)(() => props.container !== true ? 'add' : 'remove', updateScrollEvent);
      props.container !== true && updateScrollEvent('add');
      (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .onUnmounted */ .hi)(() => {
        updateScrollEvent('remove');
      });
    }
    return () => {
      const content = (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_8__/* .hMergeSlot */ .Hp)(slots.default, [(0,vue__WEBPACK_IMPORTED_MODULE_5__.h)(_scroll_observer_QScrollObserver_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
        onScroll: onPageScroll
      }), (0,vue__WEBPACK_IMPORTED_MODULE_5__.h)(_resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, {
        onResize: onPageResize
      })]);
      const layout = (0,vue__WEBPACK_IMPORTED_MODULE_5__.h)('div', {
        class: classes.value,
        style: style.value,
        ref: props.container === true ? void 0 : rootRef,
        tabindex: -1
      }, content);
      if (props.container === true) {
        return (0,vue__WEBPACK_IMPORTED_MODULE_5__.h)('div', {
          class: 'q-layout-container overflow-hidden',
          ref: rootRef
        }, [(0,vue__WEBPACK_IMPORTED_MODULE_5__.h)(_resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, {
          onResize: onContainerResize
        }), (0,vue__WEBPACK_IMPORTED_MODULE_5__.h)('div', {
          class: 'absolute-full',
          style: targetStyle.value
        }, [(0,vue__WEBPACK_IMPORTED_MODULE_5__.h)('div', {
          class: 'scroll',
          style: targetChildStyle.value
        }, [layout])])]);
      }
      return layout;
    };
  }
}));

/***/ }),

/***/ 8240:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1758);
/* harmony import */ var _composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6372);
/* harmony import */ var _composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1906);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5139);






const defaultSizes = {
  xs: 2,
  sm: 4,
  md: 6,
  lg: 10,
  xl: 14
};
function width(val, reverse, $q) {
  return {
    transform: reverse === true ? `translateX(${$q.lang.rtl === true ? '-' : ''}100%) scale3d(${-val},1,1)` : `scale3d(${val},1,1)`
  };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__/* .createComponent */ .a0)({
  name: 'QLinearProgress',
  props: {
    ..._composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_1__/* .useDarkProps */ .C,
    ..._composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_2__/* .useSizeProps */ .x_,
    value: {
      type: Number,
      default: 0
    },
    buffer: Number,
    color: String,
    trackColor: String,
    reverse: Boolean,
    stripe: Boolean,
    indeterminate: Boolean,
    query: Boolean,
    rounded: Boolean,
    animationSpeed: {
      type: [String, Number],
      default: 2100
    },
    instantFeedback: Boolean
  },
  setup(props, {
    slots
  }) {
    const {
      proxy
    } = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .getCurrentInstance */ .nI)();
    const isDark = (0,_composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A)(props, proxy.$q);
    const sizeStyle = (0,_composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Ay)(props, defaultSizes);
    const motion = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => props.indeterminate === true || props.query === true);
    const widthReverse = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => props.reverse !== props.query);
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => ({
      ...(sizeStyle.value !== null ? sizeStyle.value : {}),
      '--q-linear-progress-speed': `${props.animationSpeed}ms`
    }));
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => 'q-linear-progress' + (props.color !== void 0 ? ` text-${props.color}` : '') + (props.reverse === true || props.query === true ? ' q-linear-progress--reverse' : '') + (props.rounded === true ? ' rounded-borders' : ''));
    const trackStyle = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => width(props.buffer !== void 0 ? props.buffer : 1, widthReverse.value, proxy.$q));
    const transitionSuffix = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => `with${props.instantFeedback === true ? 'out' : ''}-transition`);
    const trackClass = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => 'q-linear-progress__track absolute-full' + ` q-linear-progress__track--${transitionSuffix.value}` + ` q-linear-progress__track--${isDark.value === true ? 'dark' : 'light'}` + (props.trackColor !== void 0 ? ` bg-${props.trackColor}` : ''));
    const modelStyle = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => width(motion.value === true ? 1 : props.value, widthReverse.value, proxy.$q));
    const modelClass = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => 'q-linear-progress__model absolute-full' + ` q-linear-progress__model--${transitionSuffix.value}` + ` q-linear-progress__model--${motion.value === true ? 'in' : ''}determinate`);
    const stripeStyle = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => ({
      width: `${props.value * 100}%`
    }));
    const stripeClass = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => `q-linear-progress__stripe absolute-${props.reverse === true ? 'right' : 'left'}` + ` q-linear-progress__stripe--${transitionSuffix.value}`);
    return () => {
      const child = [(0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
        class: trackClass.value,
        style: trackStyle.value
      }), (0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
        class: modelClass.value,
        style: modelStyle.value
      })];
      props.stripe === true && motion.value === false && child.push((0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
        class: stripeClass.value,
        style: stripeStyle.value
      }));
      return (0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
        class: classes.value,
        style: style.value,
        role: 'progressbar',
        'aria-valuemin': 0,
        'aria-valuemax': 1,
        'aria-valuenow': props.indeterminate === true ? void 0 : props.value
      }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_5__/* .hMergeSlot */ .Hp)(slots.default, child));
    };
  }
}));

/***/ }),

/***/ 3718:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ QPageSticky)
});

// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.render/render.js
var render = __webpack_require__(5139);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.symbols/symbols.js
var symbols = __webpack_require__(7973);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/page-sticky/use-page-sticky.js



const usePageStickyProps = {
  position: {
    type: String,
    default: 'bottom-right',
    validator: v => ['top-right', 'top-left', 'bottom-right', 'bottom-left', 'top', 'right', 'bottom', 'left'].includes(v)
  },
  offset: {
    type: Array,
    validator: v => v.length === 2
  },
  expand: Boolean
};
/* harmony default export */ function use_page_sticky() {
  const {
    props,
    proxy: {
      $q
    }
  } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
  const $layout = (0,runtime_core_esm_bundler/* inject */.WQ)(symbols/* layoutKey */.ON, symbols/* emptyRenderFn */.U_);
  if ($layout === symbols/* emptyRenderFn */.U_) {
    console.error('QPageSticky needs to be child of QLayout');
    return symbols/* emptyRenderFn */.U_;
  }
  const attach = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const pos = props.position;
    return {
      top: pos.indexOf('top') !== -1,
      right: pos.indexOf('right') !== -1,
      bottom: pos.indexOf('bottom') !== -1,
      left: pos.indexOf('left') !== -1,
      vertical: pos === 'top' || pos === 'bottom',
      horizontal: pos === 'left' || pos === 'right'
    };
  });
  const top = (0,runtime_core_esm_bundler/* computed */.EW)(() => $layout.header.offset);
  const right = (0,runtime_core_esm_bundler/* computed */.EW)(() => $layout.right.offset);
  const bottom = (0,runtime_core_esm_bundler/* computed */.EW)(() => $layout.footer.offset);
  const left = (0,runtime_core_esm_bundler/* computed */.EW)(() => $layout.left.offset);
  const style = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    let posX = 0,
      posY = 0;
    const side = attach.value;
    const dir = $q.lang.rtl === true ? -1 : 1;
    if (side.top === true && top.value !== 0) {
      posY = `${top.value}px`;
    } else if (side.bottom === true && bottom.value !== 0) {
      posY = `${-bottom.value}px`;
    }
    if (side.left === true && left.value !== 0) {
      posX = `${dir * left.value}px`;
    } else if (side.right === true && right.value !== 0) {
      posX = `${-dir * right.value}px`;
    }
    const css = {
      transform: `translate(${posX}, ${posY})`
    };
    if (props.offset) {
      css.margin = `${props.offset[1]}px ${props.offset[0]}px`;
    }
    if (side.vertical === true) {
      if (left.value !== 0) {
        css[$q.lang.rtl === true ? 'right' : 'left'] = `${left.value}px`;
      }
      if (right.value !== 0) {
        css[$q.lang.rtl === true ? 'left' : 'right'] = `${right.value}px`;
      }
    } else if (side.horizontal === true) {
      if (top.value !== 0) {
        css.top = `${top.value}px`;
      }
      if (bottom.value !== 0) {
        css.bottom = `${bottom.value}px`;
      }
    }
    return css;
  });
  const classes = (0,runtime_core_esm_bundler/* computed */.EW)(() => `q-page-sticky row flex-center fixed-${props.position}` + ` q-page-sticky--${props.expand === true ? 'expand' : 'shrink'}`);
  function getStickyContent(slots) {
    const content = (0,render/* hSlot */.zm)(slots.default);
    return (0,runtime_core_esm_bundler.h)('div', {
      class: classes.value,
      style: style.value
    }, props.expand === true ? content : [(0,runtime_core_esm_bundler.h)('div', content)]);
  }
  return {
    $layout,
    getStickyContent
  };
}
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/page-sticky/QPageSticky.js


/* harmony default export */ const QPageSticky = ((0,create/* createComponent */.a0)({
  name: 'QPageSticky',
  props: usePageStickyProps,
  setup(_, {
    slots
  }) {
    const {
      getStickyContent
    } = use_page_sticky();
    return () => getStickyContent(slots);
  }
}));

/***/ }),

/***/ 7716:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5139);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7973);




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QPage',
  props: {
    padding: Boolean,
    styleFn: Function
  },
  setup(props, {
    slots
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .getCurrentInstance */ .nI)();
    const $layout = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .inject */ .WQ)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .layoutKey */ .ON, _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .emptyRenderFn */ .U_);
    if ($layout === _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .emptyRenderFn */ .U_) {
      console.error('QPage needs to be a deep child of QLayout');
      return _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .emptyRenderFn */ .U_;
    }
    const $pageContainer = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .inject */ .WQ)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .pageContainerKey */ .YR, _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .emptyRenderFn */ .U_);
    if ($pageContainer === _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .emptyRenderFn */ .U_) {
      console.error('QPage needs to be child of QPageContainer');
      return _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .emptyRenderFn */ .U_;
    }
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => {
      const offset = ($layout.header.space === true ? $layout.header.size : 0) + ($layout.footer.space === true ? $layout.footer.size : 0);
      if (typeof props.styleFn === 'function') {
        const height = $layout.isContainer.value === true ? $layout.containerHeight.value : $q.screen.height;
        return props.styleFn(offset, height);
      }
      return {
        minHeight: $layout.isContainer.value === true ? $layout.containerHeight.value - offset + 'px' : $q.screen.height === 0 ? offset !== 0 ? `calc(100vh - ${offset}px)` : '100vh' : $q.screen.height - offset + 'px'
      };
    });
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => `q-page${props.padding === true ? ' q-layout-padding' : ''}`);
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('main', {
      class: classes.value,
      style: style.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 5205:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5139);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7973);




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QPageContainer',
  setup(_, {
    slots
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .getCurrentInstance */ .nI)();
    const $layout = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .inject */ .WQ)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .layoutKey */ .ON, _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .emptyRenderFn */ .U_);
    if ($layout === _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .emptyRenderFn */ .U_) {
      console.error('QPageContainer needs to be child of QLayout');
      return _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .emptyRenderFn */ .U_;
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .provide */ .Gt)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_2__/* .pageContainerKey */ .YR, true);
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => {
      const css = {};
      if ($layout.header.space === true) {
        css.paddingTop = `${$layout.header.size}px`;
      }
      if ($layout.right.space === true) {
        css[`padding${$q.lang.rtl === true ? 'Left' : 'Right'}`] = `${$layout.right.size}px`;
      }
      if ($layout.footer.space === true) {
        css.paddingBottom = `${$layout.footer.size}px`;
      }
      if ($layout.left.space === true) {
        css[`padding${$q.lang.rtl === true ? 'Right' : 'Left'}`] = `${$layout.left.size}px`;
      }
      return css;
    });
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('div', {
      class: 'q-page-container',
      style: style.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_3__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 1096:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ QResizeObserver)
});

// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(8734);
// EXTERNAL MODULE: ./node_modules/quasar/src/plugins/platform/Platform.js
var Platform = __webpack_require__(1597);
;// CONCATENATED MODULE: ./node_modules/quasar/src/composables/use-hydration/use-hydration.js


// using it to manage SSR rendering with best performance

/* harmony default export */ function use_hydration() {
  const isHydrated = (0,reactivity_esm_bundler/* ref */.KR)(!Platform/* isRuntimeSsrPreHydration */.ot.value);
  if (isHydrated.value === false) {
    (0,runtime_core_esm_bundler/* onMounted */.sV)(() => {
      isHydrated.value = true;
    });
  }
  return {
    isHydrated
  };
}
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/resize-observer/QResizeObserver.js




const hasObserver = typeof ResizeObserver !== 'undefined';
const resizeProps = hasObserver === true ? {} : {
  style: 'display:block;position:absolute;top:0;left:0;right:0;bottom:0;height:100%;width:100%;overflow:hidden;pointer-events:none;z-index:-1;',
  url: 'about:blank'
};
/* harmony default export */ const QResizeObserver = ((0,create/* createComponent */.a0)({
  name: 'QResizeObserver',
  props: {
    debounce: {
      type: [String, Number],
      default: 100
    }
  },
  emits: ['resize'],
  setup(props, {
    emit
  }) {
    if (false) {}
    let timer = null,
      targetEl,
      size = {
        width: -1,
        height: -1
      };
    function trigger(immediately) {
      if (immediately === true || props.debounce === 0 || props.debounce === '0') {
        emitEvent();
      } else if (timer === null) {
        timer = setTimeout(emitEvent, props.debounce);
      }
    }
    function emitEvent() {
      if (timer !== null) {
        clearTimeout(timer);
        timer = null;
      }
      if (targetEl) {
        const {
          offsetWidth: width,
          offsetHeight: height
        } = targetEl;
        if (width !== size.width || height !== size.height) {
          size = {
            width,
            height
          };
          emit('resize', size);
        }
      }
    }
    const {
      proxy
    } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();

    // expose public method
    proxy.trigger = trigger;
    if (hasObserver === true) {
      let observer;

      // initialize as soon as possible
      const init = stop => {
        targetEl = proxy.$el.parentNode;
        if (targetEl) {
          observer = new ResizeObserver(trigger);
          observer.observe(targetEl);
          emitEvent();
        } else if (stop !== true) {
          (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
            init(true);
          });
        }
      };
      (0,runtime_core_esm_bundler/* onMounted */.sV)(() => {
        init();
      });
      (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(() => {
        timer !== null && clearTimeout(timer);
        if (observer !== void 0) {
          if (observer.disconnect !== void 0) {
            observer.disconnect();
          } else if (targetEl) {
            // FF for Android
            observer.unobserve(targetEl);
          }
        }
      });
      return event_event/* noop */.lQ;
    } else {
      // no observer, so fallback to old iframe method
      const {
        isHydrated
      } = use_hydration();
      let curDocView;
      function cleanup() {
        if (timer !== null) {
          clearTimeout(timer);
          timer = null;
        }
        if (curDocView !== void 0) {
          // iOS is fuzzy, need to check it first
          if (curDocView.removeEventListener !== void 0) {
            curDocView.removeEventListener('resize', trigger, event_event/* listenOpts */.mG.passive);
          }
          curDocView = void 0;
        }
      }
      function onObjLoad() {
        cleanup();
        if (targetEl && targetEl.contentDocument) {
          curDocView = targetEl.contentDocument.defaultView;
          curDocView.addEventListener('resize', trigger, event_event/* listenOpts */.mG.passive);
          emitEvent();
        }
      }
      (0,runtime_core_esm_bundler/* onMounted */.sV)(() => {
        (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
          targetEl = proxy.$el;
          targetEl && onObjLoad();
        });
      });
      (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(cleanup);
      return () => {
        if (isHydrated.value === true) {
          return (0,runtime_core_esm_bundler.h)('object', {
            class: 'q--avoid-card-border',
            style: resizeProps.style,
            tabindex: -1,
            // fix for Firefox
            type: 'text/html',
            data: resizeProps.url,
            'aria-hidden': 'true',
            onLoad: onObjLoad
          });
        }
      };
    }
  }
}));

/***/ }),

/***/ 9383:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8734);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(1758);
/* harmony import */ var _composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6372);
/* harmony import */ var _resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1096);
/* harmony import */ var _scroll_observer_QScrollObserver_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3163);
/* harmony import */ var _directives_touch_pan_TouchPan_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9390);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9467);
/* harmony import */ var _utils_format_format_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2732);
/* harmony import */ var _utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8336);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(5139);
/* harmony import */ var _utils_debounce_debounce_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(3500);










const axisList = ['vertical', 'horizontal'];
const dirProps = {
  vertical: {
    offset: 'offsetY',
    scroll: 'scrollTop',
    dir: 'down',
    dist: 'y'
  },
  horizontal: {
    offset: 'offsetX',
    scroll: 'scrollLeft',
    dir: 'right',
    dist: 'x'
  }
};
const panOpts = {
  prevent: true,
  mouse: true,
  mouseAllDir: true
};
const getMinThumbSize = size => size >= 250 ? 50 : Math.ceil(size / 5);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_6__/* .createComponent */ .a0)({
  name: 'QScrollArea',
  props: {
    ..._composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__/* .useDarkProps */ .C,
    thumbStyle: Object,
    verticalThumbStyle: Object,
    horizontalThumbStyle: Object,
    barStyle: [Array, String, Object],
    verticalBarStyle: [Array, String, Object],
    horizontalBarStyle: [Array, String, Object],
    contentStyle: [Array, String, Object],
    contentActiveStyle: [Array, String, Object],
    delay: {
      type: [String, Number],
      default: 1000
    },
    visible: {
      type: Boolean,
      default: null
    },
    tabindex: [String, Number],
    onScroll: Function
  },
  setup(props, {
    slots,
    emit
  }) {
    // state management
    const tempShowing = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(false);
    const panning = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(false);
    const hover = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(false);

    // other...
    const container = {
      vertical: (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(0),
      horizontal: (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(0)
    };
    const scroll = {
      vertical: {
        ref: (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(null),
        position: (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(0),
        size: (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(0)
      },
      horizontal: {
        ref: (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(null),
        position: (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(0),
        size: (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(0)
      }
    };
    const {
      proxy
    } = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .getCurrentInstance */ .nI)();
    const isDark = (0,_composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(props, proxy.$q);
    let timer = null,
      panRefPos;
    const targetRef = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .ref */ .KR)(null);
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => 'q-scrollarea' + (isDark.value === true ? ' q-scrollarea--dark' : ''));
    scroll.vertical.percentage = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => {
      const diff = scroll.vertical.size.value - container.vertical.value;
      if (diff <= 0) {
        return 0;
      }
      const p = (0,_utils_format_format_js__WEBPACK_IMPORTED_MODULE_4__/* .between */ .Tq)(scroll.vertical.position.value / diff, 0, 1);
      return Math.round(p * 10000) / 10000;
    });
    scroll.vertical.thumbHidden = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => (props.visible === null ? hover.value : props.visible) !== true && tempShowing.value === false && panning.value === false || scroll.vertical.size.value <= container.vertical.value + 1);
    scroll.vertical.thumbStart = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => scroll.vertical.percentage.value * (container.vertical.value - scroll.vertical.thumbSize.value));
    scroll.vertical.thumbSize = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => Math.round((0,_utils_format_format_js__WEBPACK_IMPORTED_MODULE_4__/* .between */ .Tq)(container.vertical.value * container.vertical.value / scroll.vertical.size.value, getMinThumbSize(container.vertical.value), container.vertical.value)));
    scroll.vertical.style = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => {
      return {
        ...props.thumbStyle,
        ...props.verticalThumbStyle,
        top: `${scroll.vertical.thumbStart.value}px`,
        height: `${scroll.vertical.thumbSize.value}px`
      };
    });
    scroll.vertical.thumbClass = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => 'q-scrollarea__thumb q-scrollarea__thumb--v absolute-right' + (scroll.vertical.thumbHidden.value === true ? ' q-scrollarea__thumb--invisible' : ''));
    scroll.vertical.barClass = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => 'q-scrollarea__bar q-scrollarea__bar--v absolute-right' + (scroll.vertical.thumbHidden.value === true ? ' q-scrollarea__bar--invisible' : ''));
    scroll.horizontal.percentage = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => {
      const diff = scroll.horizontal.size.value - container.horizontal.value;
      if (diff <= 0) {
        return 0;
      }
      const p = (0,_utils_format_format_js__WEBPACK_IMPORTED_MODULE_4__/* .between */ .Tq)(Math.abs(scroll.horizontal.position.value) / diff, 0, 1);
      return Math.round(p * 10000) / 10000;
    });
    scroll.horizontal.thumbHidden = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => (props.visible === null ? hover.value : props.visible) !== true && tempShowing.value === false && panning.value === false || scroll.horizontal.size.value <= container.horizontal.value + 1);
    scroll.horizontal.thumbStart = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => scroll.horizontal.percentage.value * (container.horizontal.value - scroll.horizontal.thumbSize.value));
    scroll.horizontal.thumbSize = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => Math.round((0,_utils_format_format_js__WEBPACK_IMPORTED_MODULE_4__/* .between */ .Tq)(container.horizontal.value * container.horizontal.value / scroll.horizontal.size.value, getMinThumbSize(container.horizontal.value), container.horizontal.value)));
    scroll.horizontal.style = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => {
      return {
        ...props.thumbStyle,
        ...props.horizontalThumbStyle,
        [proxy.$q.lang.rtl === true ? 'right' : 'left']: `${scroll.horizontal.thumbStart.value}px`,
        width: `${scroll.horizontal.thumbSize.value}px`
      };
    });
    scroll.horizontal.thumbClass = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => 'q-scrollarea__thumb q-scrollarea__thumb--h absolute-bottom' + (scroll.horizontal.thumbHidden.value === true ? ' q-scrollarea__thumb--invisible' : ''));
    scroll.horizontal.barClass = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => 'q-scrollarea__bar q-scrollarea__bar--h absolute-bottom' + (scroll.horizontal.thumbHidden.value === true ? ' q-scrollarea__bar--invisible' : ''));
    const mainStyle = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .computed */ .EW)(() => scroll.vertical.thumbHidden.value === true && scroll.horizontal.thumbHidden.value === true ? props.contentStyle : props.contentActiveStyle);
    const thumbVertDir = [[_directives_touch_pan_TouchPan_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A, e => {
      onPanThumb(e, 'vertical');
    }, void 0, {
      vertical: true,
      ...panOpts
    }]];
    const thumbHorizDir = [[_directives_touch_pan_TouchPan_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A, e => {
      onPanThumb(e, 'horizontal');
    }, void 0, {
      horizontal: true,
      ...panOpts
    }]];
    function getScroll() {
      const info = {};
      axisList.forEach(axis => {
        const data = scroll[axis];
        info[axis + 'Position'] = data.position.value;
        info[axis + 'Percentage'] = data.percentage.value;
        info[axis + 'Size'] = data.size.value;
        info[axis + 'ContainerSize'] = container[axis].value;
      });
      return info;
    }

    // we have lots of listeners, so
    // ensure we're not emitting same info
    // multiple times
    const emitScroll = (0,_utils_debounce_debounce_js__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .A)(() => {
      const info = getScroll();
      info.ref = proxy;
      emit('scroll', info);
    }, 0);
    function localSetScrollPosition(axis, offset, duration) {
      if (axisList.includes(axis) === false) {
        console.error('[QScrollArea]: wrong first param of setScrollPosition (vertical/horizontal)');
        return;
      }
      const fn = axis === 'vertical' ? _utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_5__/* .setVerticalScrollPosition */ .RZ : _utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_5__/* .setHorizontalScrollPosition */ .rr;
      fn(targetRef.value, offset, duration);
    }
    function updateContainer({
      height,
      width
    }) {
      let change = false;
      if (container.vertical.value !== height) {
        container.vertical.value = height;
        change = true;
      }
      if (container.horizontal.value !== width) {
        container.horizontal.value = width;
        change = true;
      }
      change === true && startTimer();
    }
    function updateScroll({
      position
    }) {
      let change = false;
      if (scroll.vertical.position.value !== position.top) {
        scroll.vertical.position.value = position.top;
        change = true;
      }
      if (scroll.horizontal.position.value !== position.left) {
        scroll.horizontal.position.value = position.left;
        change = true;
      }
      change === true && startTimer();
    }
    function updateScrollSize({
      height,
      width
    }) {
      if (scroll.horizontal.size.value !== width) {
        scroll.horizontal.size.value = width;
        startTimer();
      }
      if (scroll.vertical.size.value !== height) {
        scroll.vertical.size.value = height;
        startTimer();
      }
    }
    function onPanThumb(e, axis) {
      const data = scroll[axis];
      if (e.isFirst === true) {
        if (data.thumbHidden.value === true) {
          return;
        }
        panRefPos = data.position.value;
        panning.value = true;
      } else if (panning.value !== true) {
        return;
      }
      if (e.isFinal === true) {
        panning.value = false;
      }
      const dProp = dirProps[axis];
      const containerSize = container[axis].value;
      const multiplier = (data.size.value - containerSize) / (containerSize - data.thumbSize.value);
      const distance = e.distance[dProp.dist];
      const pos = panRefPos + (e.direction === dProp.dir ? 1 : -1) * distance * multiplier;
      setScroll(pos, axis);
    }
    function onMousedown(evt, axis) {
      const data = scroll[axis];
      if (data.thumbHidden.value !== true) {
        const offset = evt[dirProps[axis].offset];
        if (offset < data.thumbStart.value || offset > data.thumbStart.value + data.thumbSize.value) {
          const pos = offset - data.thumbSize.value / 2;
          setScroll(pos / container[axis].value * data.size.value, axis);
        }

        // activate thumb pan
        if (data.ref.value !== null) {
          data.ref.value.dispatchEvent(new MouseEvent(evt.type, evt));
        }
      }
    }
    function onVerticalMousedown(evt) {
      onMousedown(evt, 'vertical');
    }
    function onHorizontalMousedown(evt) {
      onMousedown(evt, 'horizontal');
    }
    function startTimer() {
      tempShowing.value = true;
      timer !== null && clearTimeout(timer);
      timer = setTimeout(() => {
        timer = null;
        tempShowing.value = false;
      }, props.delay);
      props.onScroll !== void 0 && emitScroll();
    }
    function setScroll(offset, axis) {
      targetRef.value[dirProps[axis].scroll] = offset;
    }
    let mouseEventTimer = null;
    function onMouseenter() {
      if (mouseEventTimer !== null) {
        clearTimeout(mouseEventTimer);
      }

      // setTimeout needed for iOS; see ticket #16210
      mouseEventTimer = setTimeout(() => {
        mouseEventTimer = null;
        hover.value = true;
      }, proxy.$q.platform.is.ios ? 50 : 0);
    }
    function onMouseleave() {
      if (mouseEventTimer !== null) {
        clearTimeout(mouseEventTimer);
        mouseEventTimer = null;
      }
      hover.value = false;
    }
    let scrollPosition = null;
    (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .watch */ .wB)(() => proxy.$q.lang.rtl, rtl => {
      if (targetRef.value !== null) {
        (0,_utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_5__/* .setHorizontalScrollPosition */ .rr)(targetRef.value, Math.abs(scroll.horizontal.position.value) * (rtl === true ? -1 : 1));
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .onDeactivated */ .Y4)(() => {
      scrollPosition = {
        top: scroll.vertical.position.value,
        left: scroll.horizontal.position.value
      };
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .onActivated */ .n)(() => {
      if (scrollPosition === null) return;
      const scrollTarget = targetRef.value;
      if (scrollTarget !== null) {
        (0,_utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_5__/* .setHorizontalScrollPosition */ .rr)(scrollTarget, scrollPosition.left);
        (0,_utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_5__/* .setVerticalScrollPosition */ .RZ)(scrollTarget, scrollPosition.top);
      }
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .onBeforeUnmount */ .xo)(emitScroll.cancel);

    // expose public methods
    Object.assign(proxy, {
      getScrollTarget: () => targetRef.value,
      getScroll,
      getScrollPosition: () => ({
        top: scroll.vertical.position.value,
        left: scroll.horizontal.position.value
      }),
      getScrollPercentage: () => ({
        top: scroll.vertical.percentage.value,
        left: scroll.horizontal.percentage.value
      }),
      setScrollPosition: localSetScrollPosition,
      setScrollPercentage(axis, percentage, duration) {
        localSetScrollPosition(axis, percentage * (scroll[axis].size.value - container[axis].value) * (axis === 'horizontal' && proxy.$q.lang.rtl === true ? -1 : 1), duration);
      }
    });
    return () => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', {
        class: classes.value,
        onMouseenter,
        onMouseleave
      }, [(0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', {
        ref: targetRef,
        class: 'q-scrollarea__container scroll relative-position fit hide-scrollbar',
        tabindex: props.tabindex !== void 0 ? props.tabindex : void 0
      }, [(0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', {
        class: 'q-scrollarea__content absolute',
        style: mainStyle.value
      }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_10__/* .hMergeSlot */ .Hp)(slots.default, [(0,vue__WEBPACK_IMPORTED_MODULE_8__.h)(_resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
        debounce: 0,
        onResize: updateScrollSize
      })])), (0,vue__WEBPACK_IMPORTED_MODULE_8__.h)(_scroll_observer_QScrollObserver_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, {
        axis: 'both',
        onScroll: updateScroll
      })]), (0,vue__WEBPACK_IMPORTED_MODULE_8__.h)(_resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
        debounce: 0,
        onResize: updateContainer
      }), (0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', {
        class: scroll.vertical.barClass.value,
        style: [props.barStyle, props.verticalBarStyle],
        'aria-hidden': 'true',
        onMousedown: onVerticalMousedown
      }), (0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', {
        class: scroll.horizontal.barClass.value,
        style: [props.barStyle, props.horizontalBarStyle],
        'aria-hidden': 'true',
        onMousedown: onHorizontalMousedown
      }), (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .withDirectives */ .bo)((0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', {
        ref: scroll.vertical.ref,
        class: scroll.vertical.thumbClass.value,
        style: scroll.vertical.style.value,
        'aria-hidden': 'true'
      }), thumbVertDir), (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .withDirectives */ .bo)((0,vue__WEBPACK_IMPORTED_MODULE_8__.h)('div', {
        ref: scroll.horizontal.ref,
        class: scroll.horizontal.thumbClass.value,
        style: scroll.horizontal.style.value,
        'aria-hidden': 'true'
      }), thumbHorizDir)]);
    };
  }
}));

/***/ }),

/***/ 3163:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9467);
/* harmony import */ var _utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8336);
/* harmony import */ var _utils_event_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2500);




const {
  passive
} = _utils_event_event_js__WEBPACK_IMPORTED_MODULE_1__/* .listenOpts */ .mG;
const axisValues = ['both', 'horizontal', 'vertical'];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__/* .createComponent */ .a0)({
  name: 'QScrollObserver',
  props: {
    axis: {
      type: String,
      validator: v => axisValues.includes(v),
      default: 'vertical'
    },
    debounce: [String, Number],
    scrollTarget: _utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_0__/* .scrollTargetProp */ .cP
  },
  emits: ['scroll'],
  setup(props, {
    emit
  }) {
    const scroll = {
      position: {
        top: 0,
        left: 0
      },
      direction: 'down',
      directionChanged: false,
      delta: {
        top: 0,
        left: 0
      },
      inflectionPoint: {
        top: 0,
        left: 0
      }
    };
    let clearTimer = null,
      localScrollTarget,
      parentEl;
    (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .watch */ .wB)(() => props.scrollTarget, () => {
      unconfigureScrollTarget();
      configureScrollTarget();
    });
    function emitEvent() {
      clearTimer !== null && clearTimer();
      const top = Math.max(0, (0,_utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_0__/* .getVerticalScrollPosition */ .fQ)(localScrollTarget));
      const left = (0,_utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_0__/* .getHorizontalScrollPosition */ .lS)(localScrollTarget);
      const delta = {
        top: top - scroll.position.top,
        left: left - scroll.position.left
      };
      if (props.axis === 'vertical' && delta.top === 0 || props.axis === 'horizontal' && delta.left === 0) {
        return;
      }
      const curDir = Math.abs(delta.top) >= Math.abs(delta.left) ? delta.top < 0 ? 'up' : 'down' : delta.left < 0 ? 'left' : 'right';
      scroll.position = {
        top,
        left
      };
      scroll.directionChanged = scroll.direction !== curDir;
      scroll.delta = delta;
      if (scroll.directionChanged === true) {
        scroll.direction = curDir;
        scroll.inflectionPoint = scroll.position;
      }
      emit('scroll', {
        ...scroll
      });
    }
    function configureScrollTarget() {
      localScrollTarget = (0,_utils_scroll_scroll_js__WEBPACK_IMPORTED_MODULE_0__/* .getScrollTarget */ .hD)(parentEl, props.scrollTarget);
      localScrollTarget.addEventListener('scroll', trigger, passive);
      trigger(true);
    }
    function unconfigureScrollTarget() {
      if (localScrollTarget !== void 0) {
        localScrollTarget.removeEventListener('scroll', trigger, passive);
        localScrollTarget = void 0;
      }
    }
    function trigger(immediately) {
      if (immediately === true || props.debounce === 0 || props.debounce === '0') {
        emitEvent();
      } else if (clearTimer === null) {
        const [timer, fn] = props.debounce ? [setTimeout(emitEvent, props.debounce), clearTimeout] : [requestAnimationFrame(emitEvent), cancelAnimationFrame];
        clearTimer = () => {
          fn(timer);
          clearTimer = null;
        };
      }
    }
    const {
      proxy
    } = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .getCurrentInstance */ .nI)();
    (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .watch */ .wB)(() => proxy.$q.lang.rtl, emitEvent);
    (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .onMounted */ .sV)(() => {
      parentEl = proxy.$el.parentNode;
      configureScrollTarget();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .onBeforeUnmount */ .xo)(() => {
      clearTimer !== null && clearTimer();
      unconfigureScrollTarget();
    });

    // expose public methods
    Object.assign(proxy, {
      trigger,
      getPosition: () => scroll
    });
    return _utils_event_event_js__WEBPACK_IMPORTED_MODULE_1__/* .noop */ .lQ;
  }
}));

/***/ }),

/***/ 8005:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ QSelect)
});

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.push.js
var es_array_push = __webpack_require__(239);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(8734);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-field/use-field.js + 4 modules
var use_field = __webpack_require__(7617);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/field/QField.js


/* harmony default export */ const QField = ((0,create/* createComponent */.a0)({
  name: 'QField',
  inheritAttrs: false,
  props: {
    ...use_field/* useFieldProps */.OJ,
    tag: {
      type: String,
      default: 'label'
    }
  },
  emits: use_field/* useFieldEmits */.mU,
  setup() {
    return (0,use_field/* default */.Ay)((0,use_field/* useFieldState */.$7)({
      tagProp: true
    }));
  }
}));
// EXTERNAL MODULE: ./node_modules/quasar/src/components/icon/QIcon.js
var QIcon = __webpack_require__(492);
// EXTERNAL MODULE: ./node_modules/quasar/src/directives/ripple/Ripple.js + 1 modules
var Ripple = __webpack_require__(9626);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-dark/use-dark.js
var use_dark = __webpack_require__(6372);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-size/use-size.js
var use_size = __webpack_require__(1906);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.render/render.js
var render = __webpack_require__(5139);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/chip/QChip.js









const defaultSizes = {
  xs: 8,
  sm: 10,
  md: 14,
  lg: 20,
  xl: 24
};
/* harmony default export */ const QChip = ((0,create/* createComponent */.a0)({
  name: 'QChip',
  props: {
    ...use_dark/* useDarkProps */.C,
    ...use_size/* useSizeProps */.x_,
    dense: Boolean,
    icon: String,
    iconRight: String,
    iconRemove: String,
    iconSelected: String,
    label: [String, Number],
    color: String,
    textColor: String,
    modelValue: {
      type: Boolean,
      default: true
    },
    selected: {
      type: Boolean,
      default: null
    },
    square: Boolean,
    outline: Boolean,
    clickable: Boolean,
    removable: Boolean,
    removeAriaLabel: String,
    tabindex: [String, Number],
    disable: Boolean,
    ripple: {
      type: [Boolean, Object],
      default: true
    }
  },
  emits: ['update:modelValue', 'update:selected', 'remove', 'click'],
  setup(props, {
    slots,
    emit
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
    const isDark = (0,use_dark/* default */.A)(props, $q);
    const sizeStyle = (0,use_size/* default */.Ay)(props, defaultSizes);
    const hasLeftIcon = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.selected === true || props.icon !== void 0);
    const leftIcon = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.selected === true ? props.iconSelected || $q.iconSet.chip.selected : props.icon);
    const removeIcon = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.iconRemove || $q.iconSet.chip.remove);
    const isClickable = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.disable === false && (props.clickable === true || props.selected !== null));
    const classes = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const text = props.outline === true ? props.color || props.textColor : props.textColor;
      return 'q-chip row inline no-wrap items-center' + (props.outline === false && props.color !== void 0 ? ` bg-${props.color}` : '') + (text ? ` text-${text} q-chip--colored` : '') + (props.disable === true ? ' disabled' : '') + (props.dense === true ? ' q-chip--dense' : '') + (props.outline === true ? ' q-chip--outline' : '') + (props.selected === true ? ' q-chip--selected' : '') + (isClickable.value === true ? ' q-chip--clickable cursor-pointer non-selectable q-hoverable' : '') + (props.square === true ? ' q-chip--square' : '') + (isDark.value === true ? ' q-chip--dark q-dark' : '');
    });
    const attributes = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const chip = props.disable === true ? {
        tabindex: -1,
        'aria-disabled': 'true'
      } : {
        tabindex: props.tabindex || 0
      };
      const remove = {
        ...chip,
        role: 'button',
        'aria-hidden': 'false',
        'aria-label': props.removeAriaLabel || $q.lang.label.remove
      };
      return {
        chip,
        remove
      };
    });
    function onKeyup(e) {
      e.keyCode === 13 /* ENTER */ && onClick(e);
    }
    function onClick(e) {
      if (!props.disable) {
        emit('update:selected', !props.selected);
        emit('click', e);
      }
    }
    function onRemove(e) {
      if (e.keyCode === void 0 || e.keyCode === 13) {
        (0,event_event/* stopAndPrevent */.Gu)(e);
        if (props.disable === false) {
          emit('update:modelValue', false);
          emit('remove');
        }
      }
    }
    function getContent() {
      const child = [];
      isClickable.value === true && child.push((0,runtime_core_esm_bundler.h)('div', {
        class: 'q-focus-helper'
      }));
      hasLeftIcon.value === true && child.push((0,runtime_core_esm_bundler.h)(QIcon/* default */.A, {
        class: 'q-chip__icon q-chip__icon--left',
        name: leftIcon.value
      }));
      const label = props.label !== void 0 ? [(0,runtime_core_esm_bundler.h)('div', {
        class: 'ellipsis'
      }, [props.label])] : void 0;
      child.push((0,runtime_core_esm_bundler.h)('div', {
        class: 'q-chip__content col row no-wrap items-center q-anchor--skip'
      }, (0,render/* hMergeSlotSafely */.bG)(slots.default, label)));
      props.iconRight && child.push((0,runtime_core_esm_bundler.h)(QIcon/* default */.A, {
        class: 'q-chip__icon q-chip__icon--right',
        name: props.iconRight
      }));
      props.removable === true && child.push((0,runtime_core_esm_bundler.h)(QIcon/* default */.A, {
        class: 'q-chip__icon q-chip__icon--remove cursor-pointer',
        name: removeIcon.value,
        ...attributes.value.remove,
        onClick: onRemove,
        onKeyup: onRemove
      }));
      return child;
    }
    return () => {
      if (props.modelValue === false) return;
      const data = {
        class: classes.value,
        style: sizeStyle.value
      };
      isClickable.value === true && Object.assign(data, attributes.value.chip, {
        onClick,
        onKeyup
      });
      return (0,render/* hDir */.Kf)('div', data, getContent(), 'ripple', props.ripple !== false && props.disable !== true, () => [[Ripple/* default */.A, props.ripple]]);
    };
  }
}));
// EXTERNAL MODULE: ./node_modules/quasar/src/components/item/QItem.js
var QItem = __webpack_require__(124);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/item/QItemSection.js
var QItemSection = __webpack_require__(5173);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/item/QItemLabel.js
var QItemLabel = __webpack_require__(3796);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js
var runtime_dom_esm_bundler = __webpack_require__(9104);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.selection/selection.js
var selection = __webpack_require__(2941);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.keyboard/key-composition.js
var key_composition = __webpack_require__(2906);
;// CONCATENATED MODULE: ./node_modules/quasar/src/composables/private.use-anchor/use-anchor.js




const useAnchorStaticProps = {
  /* SSR does not know about Element */
  target:  false ? 0 : {
    type: [Boolean, String, Element],
    default: true
  },
  noParentEvent: Boolean
};
const useAnchorProps = {
  ...useAnchorStaticProps,
  contextMenu: Boolean
};
/* harmony default export */ function use_anchor({
  showing,
  avoidEmit,
  // required for QPopupProxy (true)
  configureAnchorEl // optional
}) {
  const {
    props,
    proxy,
    emit
  } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
  const anchorEl = (0,reactivity_esm_bundler/* ref */.KR)(null);
  let touchTimer = null;
  function canShow(evt) {
    // abort with no parent configured or on multi-touch
    return anchorEl.value === null ? false : evt === void 0 || evt.touches === void 0 || evt.touches.length <= 1;
  }
  const anchorEvents = {};
  if (configureAnchorEl === void 0) {
    // default configureAnchorEl is designed for
    // QMenu & QPopupProxy (which is why it's handled here)

    Object.assign(anchorEvents, {
      hide(evt) {
        proxy.hide(evt);
      },
      toggle(evt) {
        proxy.toggle(evt);
        evt.qAnchorHandled = true;
      },
      toggleKey(evt) {
        (0,key_composition/* isKeyCode */.Dv)(evt, 13) === true && anchorEvents.toggle(evt);
      },
      contextClick(evt) {
        proxy.hide(evt);
        (0,event_event/* prevent */.F4)(evt);
        (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
          proxy.show(evt);
          evt.qAnchorHandled = true;
        });
      },
      prevent: event_event/* prevent */.F4,
      mobileTouch(evt) {
        anchorEvents.mobileCleanup(evt);
        if (canShow(evt) !== true) {
          return;
        }
        proxy.hide(evt);
        anchorEl.value.classList.add('non-selectable');
        const target = evt.target;
        (0,event_event/* addEvt */.Z4)(anchorEvents, 'anchor', [[target, 'touchmove', 'mobileCleanup', 'passive'], [target, 'touchend', 'mobileCleanup', 'passive'], [target, 'touchcancel', 'mobileCleanup', 'passive'], [anchorEl.value, 'contextmenu', 'prevent', 'notPassive']]);
        touchTimer = setTimeout(() => {
          touchTimer = null;
          proxy.show(evt);
          evt.qAnchorHandled = true;
        }, 300);
      },
      mobileCleanup(evt) {
        anchorEl.value.classList.remove('non-selectable');
        if (touchTimer !== null) {
          clearTimeout(touchTimer);
          touchTimer = null;
        }
        if (showing.value === true && evt !== void 0) {
          (0,selection/* clearSelection */.w)();
        }
      }
    });
    configureAnchorEl = function (context = props.contextMenu) {
      if (props.noParentEvent === true || anchorEl.value === null) return;
      let evts;
      if (context === true) {
        if (proxy.$q.platform.is.mobile === true) {
          evts = [[anchorEl.value, 'touchstart', 'mobileTouch', 'passive']];
        } else {
          evts = [[anchorEl.value, 'mousedown', 'hide', 'passive'], [anchorEl.value, 'contextmenu', 'contextClick', 'notPassive']];
        }
      } else {
        evts = [[anchorEl.value, 'click', 'toggle', 'passive'], [anchorEl.value, 'keyup', 'toggleKey', 'passive']];
      }
      (0,event_event/* addEvt */.Z4)(anchorEvents, 'anchor', evts);
    };
  }
  function unconfigureAnchorEl() {
    (0,event_event/* cleanEvt */.Fh)(anchorEvents, 'anchor');
  }
  function setAnchorEl(el) {
    anchorEl.value = el;
    while (anchorEl.value.classList.contains('q-anchor--skip')) {
      anchorEl.value = anchorEl.value.parentNode;
    }
    configureAnchorEl();
  }
  function pickAnchorEl() {
    if (props.target === false || props.target === '' || proxy.$el.parentNode === null) {
      anchorEl.value = null;
    } else if (props.target === true) {
      setAnchorEl(proxy.$el.parentNode);
    } else {
      let el = props.target;
      if (typeof props.target === 'string') {
        try {
          el = document.querySelector(props.target);
        } catch (err) {
          el = void 0;
        }
      }
      if (el !== void 0 && el !== null) {
        anchorEl.value = el.$el || el;
        configureAnchorEl();
      } else {
        anchorEl.value = null;
        console.error(`Anchor: target "${props.target}" not found`);
      }
    }
  }
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.contextMenu, val => {
    if (anchorEl.value !== null) {
      unconfigureAnchorEl();
      configureAnchorEl(val);
    }
  });
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.target, () => {
    if (anchorEl.value !== null) {
      unconfigureAnchorEl();
    }
    pickAnchorEl();
  });
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.noParentEvent, val => {
    if (anchorEl.value !== null) {
      if (val === true) {
        unconfigureAnchorEl();
      } else {
        configureAnchorEl();
      }
    }
  });
  (0,runtime_core_esm_bundler/* onMounted */.sV)(() => {
    pickAnchorEl();
    if (avoidEmit !== true && props.modelValue === true && anchorEl.value === null) {
      emit('update:modelValue', false);
    }
  });
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(() => {
    touchTimer !== null && clearTimeout(touchTimer);
    unconfigureAnchorEl();
  });
  return {
    anchorEl,
    canShow,
    anchorEvents
  };
}
;// CONCATENATED MODULE: ./node_modules/quasar/src/composables/private.use-scroll-target/use-scroll-target.js


/* harmony default export */ function use_scroll_target(props, configureScrollTarget) {
  const localScrollTarget = (0,reactivity_esm_bundler/* ref */.KR)(null);
  let scrollFn;
  function changeScrollEvent(scrollTarget, fn) {
    const fnProp = `${fn !== void 0 ? 'add' : 'remove'}EventListener`;
    const fnHandler = fn !== void 0 ? fn : scrollFn;
    if (scrollTarget !== window) {
      scrollTarget[fnProp]('scroll', fnHandler, event_event/* listenOpts */.mG.passive);
    }
    window[fnProp]('scroll', fnHandler, event_event/* listenOpts */.mG.passive);
    scrollFn = fn;
  }
  function unconfigureScrollTarget() {
    if (localScrollTarget.value !== null) {
      changeScrollEvent(localScrollTarget.value);
      localScrollTarget.value = null;
    }
  }
  const noParentEventWatcher = (0,runtime_core_esm_bundler/* watch */.wB)(() => props.noParentEvent, () => {
    if (localScrollTarget.value !== null) {
      unconfigureScrollTarget();
      configureScrollTarget();
    }
  });
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(noParentEventWatcher);
  return {
    localScrollTarget,
    unconfigureScrollTarget,
    changeScrollEvent
  };
}
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-model-toggle/use-model-toggle.js
var use_model_toggle = __webpack_require__(2916);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-portal/use-portal.js
var use_portal = __webpack_require__(2120);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-transition/use-transition.js
var use_transition = __webpack_require__(454);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/use-tick/use-tick.js
var use_tick = __webpack_require__(6019);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/use-timeout/use-timeout.js
var use_timeout = __webpack_require__(4667);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.portal/portal.js
var portal = __webpack_require__(5563);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/scroll/scroll.js
var scroll_scroll = __webpack_require__(8336);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.keyboard/escape-key.js
var escape_key = __webpack_require__(8773);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.focus/focusout.js
var focusout = __webpack_require__(8173);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/dom/dom.js
var dom = __webpack_require__(7556);
;// CONCATENATED MODULE: ./node_modules/quasar/src/utils/private.click-outside/click-outside.js



let timer = null;
const {
    notPassiveCapture
  } = event_event/* listenOpts */.mG,
  registeredList = [];
function globalHandler(evt) {
  if (timer !== null) {
    clearTimeout(timer);
    timer = null;
  }
  const target = evt.target;
  if (target === void 0 || target.nodeType === 8 || target.classList.contains('no-pointer-events') === true) {
    return;
  }

  // check last portal vm if it's
  // a QDialog and not in seamless mode
  let portalIndex = portal/* portalProxyList */.jx.length - 1;
  while (portalIndex >= 0) {
    const proxy = portal/* portalProxyList */.jx[portalIndex].$;

    // skip QTooltip portals
    if (proxy.type.name === 'QTooltip') {
      portalIndex--;
      continue;
    }
    if (proxy.type.name !== 'QDialog') {
      break;
    }
    if (proxy.props.seamless !== true) {
      return;
    }
    portalIndex--;
  }
  for (let i = registeredList.length - 1; i >= 0; i--) {
    const state = registeredList[i];
    if ((state.anchorEl.value === null || state.anchorEl.value.contains(target) === false) && (target === document.body || state.innerRef.value !== null && state.innerRef.value.contains(target) === false)) {
      // mark the event as being processed by clickOutside
      // used to prevent refocus after menu close
      evt.qClickOutside = true;
      state.onClickOutside(evt);
    } else {
      return;
    }
  }
}
function addClickOutside(clickOutsideProps) {
  registeredList.push(clickOutsideProps);
  if (registeredList.length === 1) {
    document.addEventListener('mousedown', globalHandler, notPassiveCapture);
    document.addEventListener('touchstart', globalHandler, notPassiveCapture);
  }
}
function removeClickOutside(clickOutsideProps) {
  const index = registeredList.findIndex(h => h === clickOutsideProps);
  if (index !== -1) {
    registeredList.splice(index, 1);
    if (registeredList.length === 0) {
      if (timer !== null) {
        clearTimeout(timer);
        timer = null;
      }
      document.removeEventListener('mousedown', globalHandler, notPassiveCapture);
      document.removeEventListener('touchstart', globalHandler, notPassiveCapture);
    }
  }
}
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.focus/focus-manager.js
var focus_manager = __webpack_require__(8983);
// EXTERNAL MODULE: ./node_modules/quasar/src/plugins/platform/Platform.js
var Platform = __webpack_require__(1597);
;// CONCATENATED MODULE: ./node_modules/quasar/src/utils/private.position-engine/position-engine.js


let vpLeft, vpTop;
function validatePosition(pos) {
  const parts = pos.split(' ');
  if (parts.length !== 2) {
    return false;
  }
  if (['top', 'center', 'bottom'].includes(parts[0]) !== true) {
    console.error('Anchor/Self position must start with one of top/center/bottom');
    return false;
  }
  if (['left', 'middle', 'right', 'start', 'end'].includes(parts[1]) !== true) {
    console.error('Anchor/Self position must end with one of left/middle/right/start/end');
    return false;
  }
  return true;
}
function validateOffset(val) {
  if (!val) {
    return true;
  }
  if (val.length !== 2) {
    return false;
  }
  if (typeof val[0] !== 'number' || typeof val[1] !== 'number') {
    return false;
  }
  return true;
}
const horizontalPos = {
  'start#ltr': 'left',
  'start#rtl': 'right',
  'end#ltr': 'right',
  'end#rtl': 'left'
};
['left', 'middle', 'right'].forEach(pos => {
  horizontalPos[`${pos}#ltr`] = pos;
  horizontalPos[`${pos}#rtl`] = pos;
});
function parsePosition(pos, rtl) {
  const parts = pos.split(' ');
  return {
    vertical: parts[0],
    horizontal: horizontalPos[`${parts[1]}#${rtl === true ? 'rtl' : 'ltr'}`]
  };
}
function getAnchorProps(el, offset) {
  let {
    top,
    left,
    right,
    bottom,
    width,
    height
  } = el.getBoundingClientRect();
  if (offset !== void 0) {
    top -= offset[1];
    left -= offset[0];
    bottom += offset[1];
    right += offset[0];
    width += offset[0];
    height += offset[1];
  }
  return {
    top,
    bottom,
    height,
    left,
    right,
    width,
    middle: left + (right - left) / 2,
    center: top + (bottom - top) / 2
  };
}
function getAbsoluteAnchorProps(el, absoluteOffset, offset) {
  let {
    top,
    left
  } = el.getBoundingClientRect();
  top += absoluteOffset.top;
  left += absoluteOffset.left;
  if (offset !== void 0) {
    top += offset[1];
    left += offset[0];
  }
  return {
    top,
    bottom: top + 1,
    height: 1,
    left,
    right: left + 1,
    width: 1,
    middle: left,
    center: top
  };
}
function getTargetProps(width, height) {
  return {
    top: 0,
    center: height / 2,
    bottom: height,
    left: 0,
    middle: width / 2,
    right: width
  };
}
function getTopLeftProps(anchorProps, targetProps, anchorOrigin, selfOrigin) {
  return {
    top: anchorProps[anchorOrigin.vertical] - targetProps[selfOrigin.vertical],
    left: anchorProps[anchorOrigin.horizontal] - targetProps[selfOrigin.horizontal]
  };
}
function setPosition(cfg, retryNumber = 0) {
  if (cfg.targetEl === null || cfg.anchorEl === null || retryNumber > 5 // we should try only a few times
  ) {
    return;
  }

  // some browsers report zero height or width because
  // we are trying too early to get these dimensions
  if (cfg.targetEl.offsetHeight === 0 || cfg.targetEl.offsetWidth === 0) {
    setTimeout(() => {
      setPosition(cfg, retryNumber + 1);
    }, 10);
    return;
  }
  const {
    targetEl,
    offset,
    anchorEl,
    anchorOrigin,
    selfOrigin,
    absoluteOffset,
    fit,
    cover,
    maxHeight,
    maxWidth
  } = cfg;
  if (Platform/* client */.Sn.is.ios === true && window.visualViewport !== void 0) {
    // uses the q-position-engine CSS class

    const el = document.body.style;
    const {
      offsetLeft: left,
      offsetTop: top
    } = window.visualViewport;
    if (left !== vpLeft) {
      el.setProperty('--q-pe-left', left + 'px');
      vpLeft = left;
    }
    if (top !== vpTop) {
      el.setProperty('--q-pe-top', top + 'px');
      vpTop = top;
    }
  }

  // scroll position might change
  // if max-height/-width changes, so we
  // need to restore it after we calculate
  // the new positioning
  const {
    scrollLeft,
    scrollTop
  } = targetEl;
  const anchorProps = absoluteOffset === void 0 ? getAnchorProps(anchorEl, cover === true ? [0, 0] : offset) : getAbsoluteAnchorProps(anchorEl, absoluteOffset, offset);

  // we "reset" the critical CSS properties
  // so we can take an accurate measurement
  Object.assign(targetEl.style, {
    top: 0,
    left: 0,
    minWidth: null,
    minHeight: null,
    maxWidth: maxWidth || '100vw',
    maxHeight: maxHeight || '100vh',
    visibility: 'visible'
  });
  const {
    offsetWidth: origElWidth,
    offsetHeight: origElHeight
  } = targetEl;
  const {
    elWidth,
    elHeight
  } = fit === true || cover === true ? {
    elWidth: Math.max(anchorProps.width, origElWidth),
    elHeight: cover === true ? Math.max(anchorProps.height, origElHeight) : origElHeight
  } : {
    elWidth: origElWidth,
    elHeight: origElHeight
  };
  let elStyle = {
    maxWidth,
    maxHeight
  };
  if (fit === true || cover === true) {
    elStyle.minWidth = anchorProps.width + 'px';
    if (cover === true) {
      elStyle.minHeight = anchorProps.height + 'px';
    }
  }
  Object.assign(targetEl.style, elStyle);
  const targetProps = getTargetProps(elWidth, elHeight);
  let props = getTopLeftProps(anchorProps, targetProps, anchorOrigin, selfOrigin);
  if (absoluteOffset === void 0 || offset === void 0) {
    applyBoundaries(props, anchorProps, targetProps, anchorOrigin, selfOrigin);
  } else {
    // we have touch position or context menu with offset
    const {
      top,
      left
    } = props; // cache initial values

    // apply initial boundaries
    applyBoundaries(props, anchorProps, targetProps, anchorOrigin, selfOrigin);
    let hasChanged = false;

    // did it flip vertically?
    if (props.top !== top) {
      hasChanged = true;
      const offsetY = 2 * offset[1];
      anchorProps.center = anchorProps.top -= offsetY;
      anchorProps.bottom -= offsetY + 2;
    }

    // did it flip horizontally?
    if (props.left !== left) {
      hasChanged = true;
      const offsetX = 2 * offset[0];
      anchorProps.middle = anchorProps.left -= offsetX;
      anchorProps.right -= offsetX + 2;
    }
    if (hasChanged === true) {
      // re-calculate props with the new anchor
      props = getTopLeftProps(anchorProps, targetProps, anchorOrigin, selfOrigin);

      // and re-apply boundaries
      applyBoundaries(props, anchorProps, targetProps, anchorOrigin, selfOrigin);
    }
  }
  elStyle = {
    top: props.top + 'px',
    left: props.left + 'px'
  };
  if (props.maxHeight !== void 0) {
    elStyle.maxHeight = props.maxHeight + 'px';
    if (anchorProps.height > props.maxHeight) {
      elStyle.minHeight = elStyle.maxHeight;
    }
  }
  if (props.maxWidth !== void 0) {
    elStyle.maxWidth = props.maxWidth + 'px';
    if (anchorProps.width > props.maxWidth) {
      elStyle.minWidth = elStyle.maxWidth;
    }
  }
  Object.assign(targetEl.style, elStyle);

  // restore scroll position
  if (targetEl.scrollTop !== scrollTop) {
    targetEl.scrollTop = scrollTop;
  }
  if (targetEl.scrollLeft !== scrollLeft) {
    targetEl.scrollLeft = scrollLeft;
  }
}
function applyBoundaries(props, anchorProps, targetProps, anchorOrigin, selfOrigin) {
  const currentHeight = targetProps.bottom,
    currentWidth = targetProps.right,
    margin = (0,scroll_scroll/* getScrollbarWidth */.XJ)(),
    innerHeight = window.innerHeight - margin,
    innerWidth = document.body.clientWidth;
  if (props.top < 0 || props.top + currentHeight > innerHeight) {
    if (selfOrigin.vertical === 'center') {
      props.top = anchorProps[anchorOrigin.vertical] > innerHeight / 2 ? Math.max(0, innerHeight - currentHeight) : 0;
      props.maxHeight = Math.min(currentHeight, innerHeight);
    } else if (anchorProps[anchorOrigin.vertical] > innerHeight / 2) {
      const anchorY = Math.min(innerHeight, anchorOrigin.vertical === 'center' ? anchorProps.center : anchorOrigin.vertical === selfOrigin.vertical ? anchorProps.bottom : anchorProps.top);
      props.maxHeight = Math.min(currentHeight, anchorY);
      props.top = Math.max(0, anchorY - currentHeight);
    } else {
      props.top = Math.max(0, anchorOrigin.vertical === 'center' ? anchorProps.center : anchorOrigin.vertical === selfOrigin.vertical ? anchorProps.top : anchorProps.bottom);
      props.maxHeight = Math.min(currentHeight, innerHeight - props.top);
    }
  }
  if (props.left < 0 || props.left + currentWidth > innerWidth) {
    props.maxWidth = Math.min(currentWidth, innerWidth);
    if (selfOrigin.horizontal === 'middle') {
      props.left = anchorProps[anchorOrigin.horizontal] > innerWidth / 2 ? Math.max(0, innerWidth - currentWidth) : 0;
    } else if (anchorProps[anchorOrigin.horizontal] > innerWidth / 2) {
      const anchorX = Math.min(innerWidth, anchorOrigin.horizontal === 'middle' ? anchorProps.middle : anchorOrigin.horizontal === selfOrigin.horizontal ? anchorProps.right : anchorProps.left);
      props.maxWidth = Math.min(currentWidth, anchorX);
      props.left = Math.max(0, anchorX - props.maxWidth);
    } else {
      props.left = Math.max(0, anchorOrigin.horizontal === 'middle' ? anchorProps.middle : anchorOrigin.horizontal === selfOrigin.horizontal ? anchorProps.left : anchorProps.right);
      props.maxWidth = Math.min(currentWidth, innerWidth - props.left);
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/menu/QMenu.js




















/* harmony default export */ const QMenu = ((0,create/* createComponent */.a0)({
  name: 'QMenu',
  inheritAttrs: false,
  props: {
    ...useAnchorProps,
    ...use_model_toggle/* useModelToggleProps */.RI,
    ...use_dark/* useDarkProps */.C,
    ...use_transition/* useTransitionProps */.d,
    persistent: Boolean,
    autoClose: Boolean,
    separateClosePopup: Boolean,
    noRouteDismiss: Boolean,
    noRefocus: Boolean,
    noFocus: Boolean,
    fit: Boolean,
    cover: Boolean,
    square: Boolean,
    anchor: {
      type: String,
      validator: validatePosition
    },
    self: {
      type: String,
      validator: validatePosition
    },
    offset: {
      type: Array,
      validator: validateOffset
    },
    scrollTarget: scroll_scroll/* scrollTargetProp */.cP,
    touchPosition: Boolean,
    maxHeight: {
      type: String,
      default: null
    },
    maxWidth: {
      type: String,
      default: null
    }
  },
  emits: [...use_model_toggle/* useModelToggleEmits */.Jl, 'click', 'escapeKey'],
  setup(props, {
    slots,
    emit,
    attrs
  }) {
    let refocusTarget = null,
      absoluteOffset,
      unwatchPosition,
      avoidAutoClose;
    const vm = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
    const {
      proxy
    } = vm;
    const {
      $q
    } = proxy;
    const innerRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const showing = (0,reactivity_esm_bundler/* ref */.KR)(false);
    const hideOnRouteChange = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.persistent !== true && props.noRouteDismiss !== true);
    const isDark = (0,use_dark/* default */.A)(props, $q);
    const {
      registerTick,
      removeTick
    } = (0,use_tick/* default */.A)();
    const {
      registerTimeout
    } = (0,use_timeout/* default */.A)();
    const {
      transitionProps,
      transitionStyle
    } = (0,use_transition/* default */.A)(props);
    const {
      localScrollTarget,
      changeScrollEvent,
      unconfigureScrollTarget
    } = use_scroll_target(props, configureScrollTarget);
    const {
      anchorEl,
      canShow
    } = use_anchor({
      showing
    });
    const {
      hide
    } = (0,use_model_toggle/* default */.Ay)({
      showing,
      canShow,
      handleShow,
      handleHide,
      hideOnRouteChange,
      processOnMount: true
    });
    const {
      showPortal,
      hidePortal,
      renderPortal
    } = (0,use_portal/* default */.A)(vm, innerRef, renderPortalContent, 'menu');
    const clickOutsideProps = {
      anchorEl,
      innerRef,
      onClickOutside(e) {
        if (props.persistent !== true && showing.value === true) {
          hide(e);
          if (
          // always prevent touch event
          e.type === 'touchstart'
          // prevent click if it's on a dialog backdrop
          || e.target.classList.contains('q-dialog__backdrop')) {
            (0,event_event/* stopAndPrevent */.Gu)(e);
          }
          return true;
        }
      }
    };
    const anchorOrigin = (0,runtime_core_esm_bundler/* computed */.EW)(() => parsePosition(props.anchor || (props.cover === true ? 'center middle' : 'bottom start'), $q.lang.rtl));
    const selfOrigin = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.cover === true ? anchorOrigin.value : parsePosition(props.self || 'top start', $q.lang.rtl));
    const menuClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => (props.square === true ? ' q-menu--square' : '') + (isDark.value === true ? ' q-menu--dark q-dark' : ''));
    const onEvents = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.autoClose === true ? {
      onClick: onAutoClose
    } : {});
    const handlesFocus = (0,runtime_core_esm_bundler/* computed */.EW)(() => showing.value === true && props.persistent !== true);
    (0,runtime_core_esm_bundler/* watch */.wB)(handlesFocus, val => {
      if (val === true) {
        (0,escape_key/* addEscapeKey */.I)(onEscapeKey);
        addClickOutside(clickOutsideProps);
      } else {
        (0,escape_key/* removeEscapeKey */.V)(onEscapeKey);
        removeClickOutside(clickOutsideProps);
      }
    });
    function focus() {
      (0,focus_manager/* addFocusFn */.Gy)(() => {
        let node = innerRef.value;
        if (node && node.contains(document.activeElement) !== true) {
          node = node.querySelector('[autofocus][tabindex], [data-autofocus][tabindex]') || node.querySelector('[autofocus] [tabindex], [data-autofocus] [tabindex]') || node.querySelector('[autofocus], [data-autofocus]') || node;
          node.focus({
            preventScroll: true
          });
        }
      });
    }
    function handleShow(evt) {
      refocusTarget = props.noRefocus === false ? document.activeElement : null;
      (0,focusout/* addFocusout */.g)(onFocusout);
      showPortal();
      configureScrollTarget();
      absoluteOffset = void 0;
      if (evt !== void 0 && (props.touchPosition || props.contextMenu)) {
        const pos = (0,event_event/* position */.G1)(evt);
        if (pos.left !== void 0) {
          const {
            top,
            left
          } = anchorEl.value.getBoundingClientRect();
          absoluteOffset = {
            left: pos.left - left,
            top: pos.top - top
          };
        }
      }
      if (unwatchPosition === void 0) {
        unwatchPosition = (0,runtime_core_esm_bundler/* watch */.wB)(() => $q.screen.width + '|' + $q.screen.height + '|' + props.self + '|' + props.anchor + '|' + $q.lang.rtl, updatePosition);
      }
      if (props.noFocus !== true) {
        document.activeElement.blur();
      }

      // should removeTick() if this gets removed
      registerTick(() => {
        updatePosition();
        props.noFocus !== true && focus();
      });

      // should removeTimeout() if this gets removed
      registerTimeout(() => {
        // required in order to avoid the "double-tap needed" issue
        if ($q.platform.is.ios === true) {
          // if auto-close, then this click should
          // not close the menu
          avoidAutoClose = props.autoClose;
          innerRef.value.click();
        }
        updatePosition();
        showPortal(true); // done showing portal
        emit('show', evt);
      }, props.transitionDuration);
    }
    function handleHide(evt) {
      removeTick();
      hidePortal();
      anchorCleanup(true);
      if (refocusTarget !== null && (
      // menu was hidden from code or ESC plugin
      evt === void 0
      // menu was not closed from a mouse or touch clickOutside
      || evt.qClickOutside !== true)) {
        ((evt && evt.type.indexOf('key') === 0 ? refocusTarget.closest('[tabindex]:not([tabindex^="-"])') : void 0) || refocusTarget).focus();
        refocusTarget = null;
      }

      // should removeTimeout() if this gets removed
      registerTimeout(() => {
        hidePortal(true); // done hiding, now destroy
        emit('hide', evt);
      }, props.transitionDuration);
    }
    function anchorCleanup(hiding) {
      absoluteOffset = void 0;
      if (unwatchPosition !== void 0) {
        unwatchPosition();
        unwatchPosition = void 0;
      }
      if (hiding === true || showing.value === true) {
        (0,focusout/* removeFocusout */.v)(onFocusout);
        unconfigureScrollTarget();
        removeClickOutside(clickOutsideProps);
        (0,escape_key/* removeEscapeKey */.V)(onEscapeKey);
      }
      if (hiding !== true) {
        refocusTarget = null;
      }
    }
    function configureScrollTarget() {
      if (anchorEl.value !== null || props.scrollTarget !== void 0) {
        localScrollTarget.value = (0,scroll_scroll/* getScrollTarget */.hD)(anchorEl.value, props.scrollTarget);
        changeScrollEvent(localScrollTarget.value, updatePosition);
      }
    }
    function onAutoClose(e) {
      // if auto-close, then the ios double-tap fix which
      // issues a click should not close the menu
      if (avoidAutoClose !== true) {
        (0,portal/* closePortalMenus */.bc)(proxy, e);
        emit('click', e);
      } else {
        avoidAutoClose = false;
      }
    }
    function onFocusout(evt) {
      // the focus is not in a vue child component
      if (handlesFocus.value === true && props.noFocus !== true && (0,dom/* childHasFocus */.$J)(innerRef.value, evt.target) !== true) {
        focus();
      }
    }
    function onEscapeKey(evt) {
      emit('escapeKey');
      hide(evt);
    }
    function updatePosition() {
      setPosition({
        targetEl: innerRef.value,
        offset: props.offset,
        anchorEl: anchorEl.value,
        anchorOrigin: anchorOrigin.value,
        selfOrigin: selfOrigin.value,
        absoluteOffset,
        fit: props.fit,
        cover: props.cover,
        maxHeight: props.maxHeight,
        maxWidth: props.maxWidth
      });
    }
    function renderPortalContent() {
      return (0,runtime_core_esm_bundler.h)(runtime_dom_esm_bundler/* Transition */.eB, transitionProps.value, () => showing.value === true ? (0,runtime_core_esm_bundler.h)('div', {
        role: 'menu',
        ...attrs,
        ref: innerRef,
        tabindex: -1,
        class: ['q-menu q-position-engine scroll' + menuClass.value, attrs.class],
        style: [attrs.style, transitionStyle.value],
        ...onEvents.value
      }, (0,render/* hSlot */.zm)(slots.default)) : null);
    }
    (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(anchorCleanup);

    // expose public methods
    Object.assign(proxy, {
      focus,
      updatePosition
    });
    return renderPortal;
  }
}));
// EXTERNAL MODULE: ./node_modules/quasar/src/components/dialog/QDialog.js
var QDialog = __webpack_require__(2156);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/virtual-scroll/use-virtual-scroll.js
var use_virtual_scroll = __webpack_require__(1503);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/use-form/private.use-form.js
var private_use_form = __webpack_require__(2510);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-key-composition/use-key-composition.js
var use_key_composition = __webpack_require__(2342);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/is/is.js
var is = __webpack_require__(1054);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/format/format.js
var format = __webpack_require__(2732);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/select/QSelect.js




















const validateNewValueMode = v => ['add', 'add-unique', 'toggle'].includes(v);
const reEscapeList = '.*+?^${}()|[]\\';
const fieldPropsList = Object.keys(use_field/* useFieldProps */.OJ);
/* harmony default export */ const QSelect = ((0,create/* createComponent */.a0)({
  name: 'QSelect',
  inheritAttrs: false,
  props: {
    ...use_virtual_scroll/* useVirtualScrollProps */.AV,
    ...private_use_form/* useFormProps */.Sc,
    ...use_field/* useFieldProps */.OJ,
    // override of useFieldProps > modelValue
    modelValue: {
      required: true
    },
    multiple: Boolean,
    displayValue: [String, Number],
    displayValueHtml: Boolean,
    dropdownIcon: String,
    options: {
      type: Array,
      default: () => []
    },
    optionValue: [Function, String],
    optionLabel: [Function, String],
    optionDisable: [Function, String],
    hideSelected: Boolean,
    hideDropdownIcon: Boolean,
    fillInput: Boolean,
    maxValues: [Number, String],
    optionsDense: Boolean,
    optionsDark: {
      type: Boolean,
      default: null
    },
    optionsSelectedClass: String,
    optionsHtml: Boolean,
    optionsCover: Boolean,
    menuShrink: Boolean,
    menuAnchor: String,
    menuSelf: String,
    menuOffset: Array,
    popupContentClass: String,
    popupContentStyle: [String, Array, Object],
    popupNoRouteDismiss: Boolean,
    useInput: Boolean,
    useChips: Boolean,
    newValueMode: {
      type: String,
      validator: validateNewValueMode
    },
    mapOptions: Boolean,
    emitValue: Boolean,
    inputDebounce: {
      type: [Number, String],
      default: 500
    },
    inputClass: [Array, String, Object],
    inputStyle: [Array, String, Object],
    tabindex: {
      type: [String, Number],
      default: 0
    },
    autocomplete: String,
    transitionShow: {},
    transitionHide: {},
    transitionDuration: {},
    behavior: {
      type: String,
      validator: v => ['default', 'menu', 'dialog'].includes(v),
      default: 'default'
    },
    // override of useVirtualScrollProps > virtualScrollItemSize (no default)
    virtualScrollItemSize: use_virtual_scroll/* useVirtualScrollProps */.AV.virtualScrollItemSize.type,
    onNewValue: Function,
    onFilter: Function
  },
  emits: [...use_field/* useFieldEmits */.mU, 'add', 'remove', 'inputValue', 'keyup', 'keypress', 'keydown', 'popupShow', 'popupHide', 'filterAbort'],
  setup(props, {
    slots,
    emit
  }) {
    const {
      proxy
    } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
    const {
      $q
    } = proxy;
    const menu = (0,reactivity_esm_bundler/* ref */.KR)(false);
    const dialog = (0,reactivity_esm_bundler/* ref */.KR)(false);
    const optionIndex = (0,reactivity_esm_bundler/* ref */.KR)(-1);
    const inputValue = (0,reactivity_esm_bundler/* ref */.KR)('');
    const dialogFieldFocused = (0,reactivity_esm_bundler/* ref */.KR)(false);
    const innerLoadingIndicator = (0,reactivity_esm_bundler/* ref */.KR)(false);
    let filterTimer = null,
      inputValueTimer = null,
      innerValueCache,
      hasDialog,
      userInputValue,
      filterId = null,
      defaultInputValue,
      transitionShowComputed,
      searchBuffer,
      searchBufferExp;
    const inputRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const targetRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const menuRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const dialogRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const menuContentRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const nameProp = (0,private_use_form/* useFormInputNameAttr */.M4)(props);
    const onComposition = (0,use_key_composition/* default */.A)(onInput);
    const virtualScrollLength = (0,runtime_core_esm_bundler/* computed */.EW)(() => Array.isArray(props.options) ? props.options.length : 0);
    const virtualScrollItemSizeComputed = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.virtualScrollItemSize === void 0 ? props.optionsDense === true ? 24 : 48 : props.virtualScrollItemSize);
    const {
      virtualScrollSliceRange,
      virtualScrollSliceSizeComputed,
      localResetVirtualScroll,
      padVirtualScroll,
      onVirtualScrollEvt,
      scrollTo,
      setVirtualScrollSize
    } = (0,use_virtual_scroll/* useVirtualScroll */.Iq)({
      virtualScrollLength,
      getVirtualScrollTarget,
      getVirtualScrollEl,
      virtualScrollItemSizeComputed
    });
    const state = (0,use_field/* useFieldState */.$7)();
    const innerValue = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const mapNull = props.mapOptions === true && props.multiple !== true,
        val = props.modelValue !== void 0 && (props.modelValue !== null || mapNull === true) ? props.multiple === true && Array.isArray(props.modelValue) ? props.modelValue : [props.modelValue] : [];
      if (props.mapOptions === true && Array.isArray(props.options) === true) {
        const cache = props.mapOptions === true && innerValueCache !== void 0 ? innerValueCache : [];
        const values = val.map(v => getOption(v, cache));
        return props.modelValue === null && mapNull === true ? values.filter(v => v !== null) : values;
      }
      return val;
    });
    const innerFieldProps = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const acc = {};
      fieldPropsList.forEach(key => {
        const val = props[key];
        if (val !== void 0) {
          acc[key] = val;
        }
      });
      return acc;
    });
    const isOptionsDark = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.optionsDark === null ? state.isDark.value : props.optionsDark);
    const hasValue = (0,runtime_core_esm_bundler/* computed */.EW)(() => (0,use_field/* fieldValueIsFilled */.o9)(innerValue.value));
    const computedInputClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      let cls = 'q-field__input q-placeholder col';
      if (props.hideSelected === true || innerValue.value.length === 0) {
        return [cls, props.inputClass];
      }
      cls += ' q-field__input--padding';
      return props.inputClass === void 0 ? cls : [cls, props.inputClass];
    });
    const menuContentClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => (props.virtualScrollHorizontal === true ? 'q-virtual-scroll--horizontal' : '') + (props.popupContentClass ? ' ' + props.popupContentClass : ''));
    const noOptions = (0,runtime_core_esm_bundler/* computed */.EW)(() => virtualScrollLength.value === 0);
    const selectedString = (0,runtime_core_esm_bundler/* computed */.EW)(() => innerValue.value.map(opt => getOptionLabel.value(opt)).join(', '));
    const ariaCurrentValue = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.displayValue !== void 0 ? props.displayValue : selectedString.value);
    const needsHtmlFn = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.optionsHtml === true ? () => true : opt => opt !== void 0 && opt !== null && opt.html === true);
    const valueAsHtml = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.displayValueHtml === true || props.displayValue === void 0 && (props.optionsHtml === true || innerValue.value.some(needsHtmlFn.value)));
    const tabindex = (0,runtime_core_esm_bundler/* computed */.EW)(() => state.focused.value === true ? props.tabindex : -1);
    const comboboxAttrs = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const attrs = {
        tabindex: props.tabindex,
        role: 'combobox',
        'aria-label': props.label,
        'aria-readonly': props.readonly === true ? 'true' : 'false',
        'aria-autocomplete': props.useInput === true ? 'list' : 'none',
        'aria-expanded': menu.value === true ? 'true' : 'false',
        'aria-controls': `${state.targetUid.value}_lb`
      };
      if (optionIndex.value >= 0) {
        attrs['aria-activedescendant'] = `${state.targetUid.value}_${optionIndex.value}`;
      }
      return attrs;
    });
    const listboxAttrs = (0,runtime_core_esm_bundler/* computed */.EW)(() => ({
      id: `${state.targetUid.value}_lb`,
      role: 'listbox',
      'aria-multiselectable': props.multiple === true ? 'true' : 'false'
    }));
    const selectedScope = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      return innerValue.value.map((opt, i) => ({
        index: i,
        opt,
        html: needsHtmlFn.value(opt),
        selected: true,
        removeAtIndex: removeAtIndexAndFocus,
        toggleOption,
        tabindex: tabindex.value
      }));
    });
    const optionScope = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      if (virtualScrollLength.value === 0) {
        return [];
      }
      const {
        from,
        to
      } = virtualScrollSliceRange.value;
      return props.options.slice(from, to).map((opt, i) => {
        const disable = isOptionDisabled.value(opt) === true;
        const active = isOptionSelected(opt) === true;
        const index = from + i;
        const itemProps = {
          clickable: true,
          active,
          activeClass: computedOptionsSelectedClass.value,
          manualFocus: true,
          focused: false,
          disable,
          tabindex: -1,
          dense: props.optionsDense,
          dark: isOptionsDark.value,
          role: 'option',
          'aria-selected': active === true ? 'true' : 'false',
          id: `${state.targetUid.value}_${index}`,
          onClick: () => {
            toggleOption(opt);
          }
        };
        if (disable !== true) {
          optionIndex.value === index && (itemProps.focused = true);
          if ($q.platform.is.desktop === true) {
            itemProps.onMousemove = () => {
              menu.value === true && setOptionIndex(index);
            };
          }
        }
        return {
          index,
          opt,
          html: needsHtmlFn.value(opt),
          label: getOptionLabel.value(opt),
          selected: itemProps.active,
          focused: itemProps.focused,
          toggleOption,
          setOptionIndex,
          itemProps
        };
      });
    });
    const dropdownArrowIcon = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.dropdownIcon !== void 0 ? props.dropdownIcon : $q.iconSet.arrow.dropdown);
    const squaredMenu = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.optionsCover === false && props.outlined !== true && props.standout !== true && props.borderless !== true && props.rounded !== true);
    const computedOptionsSelectedClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.optionsSelectedClass !== void 0 ? props.optionsSelectedClass : props.color !== void 0 ? `text-${props.color}` : '');

    // returns method to get value of an option;
    // takes into account 'option-value' prop
    const getOptionValue = (0,runtime_core_esm_bundler/* computed */.EW)(() => getPropValueFn(props.optionValue, 'value'));

    // returns method to get label of an option;
    // takes into account 'option-label' prop
    const getOptionLabel = (0,runtime_core_esm_bundler/* computed */.EW)(() => getPropValueFn(props.optionLabel, 'label'));

    // returns method to tell if an option is disabled;
    // takes into account 'option-disable' prop
    const isOptionDisabled = (0,runtime_core_esm_bundler/* computed */.EW)(() => getPropValueFn(props.optionDisable, 'disable'));
    const innerOptionsValue = (0,runtime_core_esm_bundler/* computed */.EW)(() => innerValue.value.map(opt => getOptionValue.value(opt)));
    const inputControlEvents = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const evt = {
        onInput,
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        onChange: onComposition,
        onKeydown: onTargetKeydown,
        onKeyup: onTargetAutocomplete,
        onKeypress: onTargetKeypress,
        onFocus: selectInputText,
        onClick(e) {
          hasDialog === true && (0,event_event/* stop */.ds)(e);
        }
      };
      evt.onCompositionstart = evt.onCompositionupdate = evt.onCompositionend = onComposition;
      return evt;
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(innerValue, val => {
      innerValueCache = val;
      if (props.useInput === true && props.fillInput === true && props.multiple !== true
      // Prevent re-entering in filter while filtering
      // Also prevent clearing inputValue while filtering
      && state.innerLoading.value !== true && (dialog.value !== true && menu.value !== true || hasValue.value !== true)) {
        userInputValue !== true && resetInputValue();
        if (dialog.value === true || menu.value === true) {
          filter('');
        }
      }
    }, {
      immediate: true
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(() => props.fillInput, resetInputValue);
    (0,runtime_core_esm_bundler/* watch */.wB)(menu, updateMenu);
    (0,runtime_core_esm_bundler/* watch */.wB)(virtualScrollLength, rerenderMenu);
    function getEmittingOptionValue(opt) {
      return props.emitValue === true ? getOptionValue.value(opt) : opt;
    }
    function removeAtIndex(index) {
      if (index !== -1 && index < innerValue.value.length) {
        if (props.multiple === true) {
          const model = props.modelValue.slice();
          emit('remove', {
            index,
            value: model.splice(index, 1)[0]
          });
          emit('update:modelValue', model);
        } else {
          emit('update:modelValue', null);
        }
      }
    }
    function removeAtIndexAndFocus(index) {
      removeAtIndex(index);
      state.focus();
    }
    function add(opt, unique) {
      const val = getEmittingOptionValue(opt);
      if (props.multiple !== true) {
        props.fillInput === true && updateInputValue(getOptionLabel.value(opt), true, true);
        emit('update:modelValue', val);
        return;
      }
      if (innerValue.value.length === 0) {
        emit('add', {
          index: 0,
          value: val
        });
        emit('update:modelValue', props.multiple === true ? [val] : val);
        return;
      }
      if (unique === true && isOptionSelected(opt) === true) {
        return;
      }
      if (props.maxValues !== void 0 && props.modelValue.length >= props.maxValues) {
        return;
      }
      const model = props.modelValue.slice();
      emit('add', {
        index: model.length,
        value: val
      });
      model.push(val);
      emit('update:modelValue', model);
    }
    function toggleOption(opt, keepOpen) {
      if (state.editable.value !== true || opt === void 0 || isOptionDisabled.value(opt) === true) {
        return;
      }
      const optValue = getOptionValue.value(opt);
      if (props.multiple !== true) {
        if (keepOpen !== true) {
          updateInputValue(props.fillInput === true ? getOptionLabel.value(opt) : '', true, true);
          hidePopup();
        }
        targetRef.value !== null && targetRef.value.focus();
        if (innerValue.value.length === 0 || (0,is/* isDeepEqual */.Hv)(getOptionValue.value(innerValue.value[0]), optValue) !== true) {
          emit('update:modelValue', props.emitValue === true ? optValue : opt);
        }
        return;
      }
      (hasDialog !== true || dialogFieldFocused.value === true) && state.focus();
      selectInputText();
      if (innerValue.value.length === 0) {
        const val = props.emitValue === true ? optValue : opt;
        emit('add', {
          index: 0,
          value: val
        });
        emit('update:modelValue', props.multiple === true ? [val] : val);
        return;
      }
      const model = props.modelValue.slice(),
        index = innerOptionsValue.value.findIndex(v => (0,is/* isDeepEqual */.Hv)(v, optValue));
      if (index !== -1) {
        emit('remove', {
          index,
          value: model.splice(index, 1)[0]
        });
      } else {
        if (props.maxValues !== void 0 && model.length >= props.maxValues) {
          return;
        }
        const val = props.emitValue === true ? optValue : opt;
        emit('add', {
          index: model.length,
          value: val
        });
        model.push(val);
      }
      emit('update:modelValue', model);
    }
    function setOptionIndex(index) {
      if ($q.platform.is.desktop !== true) return;
      const val = index !== -1 && index < virtualScrollLength.value ? index : -1;
      if (optionIndex.value !== val) {
        optionIndex.value = val;
      }
    }
    function moveOptionSelection(offset = 1, skipInputValue) {
      if (menu.value === true) {
        let index = optionIndex.value;
        do {
          index = (0,format/* normalizeToInterval */.eo)(index + offset, -1, virtualScrollLength.value - 1);
        } while (index !== -1 && index !== optionIndex.value && isOptionDisabled.value(props.options[index]) === true);
        if (optionIndex.value !== index) {
          setOptionIndex(index);
          scrollTo(index);
          if (skipInputValue !== true && props.useInput === true && props.fillInput === true) {
            setInputValue(index >= 0 ? getOptionLabel.value(props.options[index]) : defaultInputValue, true);
          }
        }
      }
    }
    function getOption(value, valueCache) {
      const fn = opt => (0,is/* isDeepEqual */.Hv)(getOptionValue.value(opt), value);
      return props.options.find(fn) || valueCache.find(fn) || value;
    }
    function getPropValueFn(propValue, defaultVal) {
      const val = propValue !== void 0 ? propValue : defaultVal;
      return typeof val === 'function' ? val : opt => opt !== null && typeof opt === 'object' && val in opt ? opt[val] : opt;
    }
    function isOptionSelected(opt) {
      const val = getOptionValue.value(opt);
      return innerOptionsValue.value.find(v => (0,is/* isDeepEqual */.Hv)(v, val)) !== void 0;
    }
    function selectInputText(e) {
      if (props.useInput === true && targetRef.value !== null && (e === void 0 || targetRef.value === e.target && e.target.value === selectedString.value)) {
        targetRef.value.select();
      }
    }
    function onTargetKeyup(e) {
      // if ESC and we have an opened menu
      // then stop propagation (might be caught by a QDialog
      // and so it will also close the QDialog, which is wrong)
      if ((0,key_composition/* isKeyCode */.Dv)(e, 27) === true && menu.value === true) {
        (0,event_event/* stop */.ds)(e);
        // on ESC we need to close the dialog also
        hidePopup();
        resetInputValue();
      }
      emit('keyup', e);
    }
    function onTargetAutocomplete(e) {
      const {
        value
      } = e.target;
      if (e.keyCode !== void 0) {
        onTargetKeyup(e);
        return;
      }
      e.target.value = '';
      if (filterTimer !== null) {
        clearTimeout(filterTimer);
        filterTimer = null;
      }
      if (inputValueTimer !== null) {
        clearTimeout(inputValueTimer);
        inputValueTimer = null;
      }
      resetInputValue();
      if (typeof value === 'string' && value.length !== 0) {
        const needle = value.toLocaleLowerCase();
        const findFn = extractFn => {
          const option = props.options.find(opt => extractFn.value(opt).toLocaleLowerCase() === needle);
          if (option === void 0) {
            return false;
          }
          if (innerValue.value.indexOf(option) === -1) {
            toggleOption(option);
          } else {
            hidePopup();
          }
          return true;
        };
        const fillFn = afterFilter => {
          if (findFn(getOptionValue) === true) {
            return;
          }
          if (findFn(getOptionLabel) === true || afterFilter === true) {
            return;
          }
          filter(value, true, () => fillFn(true));
        };
        fillFn();
      } else {
        state.clearValue(e);
      }
    }
    function onTargetKeypress(e) {
      emit('keypress', e);
    }
    function onTargetKeydown(e) {
      emit('keydown', e);
      if ((0,key_composition/* shouldIgnoreKey */.JL)(e) === true) {
        return;
      }
      const newValueModeValid = inputValue.value.length !== 0 && (props.newValueMode !== void 0 || props.onNewValue !== void 0);
      const tabShouldSelect = e.shiftKey !== true && props.multiple !== true && (optionIndex.value !== -1 || newValueModeValid === true);

      // escape
      if (e.keyCode === 27) {
        (0,event_event/* prevent */.F4)(e); // prevent clearing the inputValue
        return;
      }

      // tab
      if (e.keyCode === 9 && tabShouldSelect === false) {
        closeMenu();
        return;
      }
      if (e.target === void 0 || e.target.id !== state.targetUid.value || state.editable.value !== true) return;

      // down
      if (e.keyCode === 40 && state.innerLoading.value !== true && menu.value === false) {
        (0,event_event/* stopAndPrevent */.Gu)(e);
        showPopup();
        return;
      }

      // backspace
      if (e.keyCode === 8 && (props.useChips === true || props.clearable === true) && props.hideSelected !== true && inputValue.value.length === 0) {
        if (props.multiple === true && Array.isArray(props.modelValue) === true) {
          removeAtIndex(props.modelValue.length - 1);
        } else if (props.multiple !== true && props.modelValue !== null) {
          emit('update:modelValue', null);
        }
        return;
      }

      // home, end - 36, 35
      if ((e.keyCode === 35 || e.keyCode === 36) && (typeof inputValue.value !== 'string' || inputValue.value.length === 0)) {
        (0,event_event/* stopAndPrevent */.Gu)(e);
        optionIndex.value = -1;
        moveOptionSelection(e.keyCode === 36 ? 1 : -1, props.multiple);
      }

      // pg up, pg down - 33, 34
      if ((e.keyCode === 33 || e.keyCode === 34) && virtualScrollSliceSizeComputed.value !== void 0) {
        (0,event_event/* stopAndPrevent */.Gu)(e);
        optionIndex.value = Math.max(-1, Math.min(virtualScrollLength.value, optionIndex.value + (e.keyCode === 33 ? -1 : 1) * virtualScrollSliceSizeComputed.value.view));
        moveOptionSelection(e.keyCode === 33 ? 1 : -1, props.multiple);
      }

      // up, down
      if (e.keyCode === 38 || e.keyCode === 40) {
        (0,event_event/* stopAndPrevent */.Gu)(e);
        moveOptionSelection(e.keyCode === 38 ? -1 : 1, props.multiple);
      }
      const optionsLength = virtualScrollLength.value;

      // clear search buffer if expired
      if (searchBuffer === void 0 || searchBufferExp < Date.now()) {
        searchBuffer = '';
      }

      // keyboard search when not having use-input
      if (optionsLength > 0 && props.useInput !== true && e.key !== void 0 && e.key.length === 1 // printable char
      && e.altKey === false // not kbd shortcut
      && e.ctrlKey === false // not kbd shortcut
      && e.metaKey === false // not kbd shortcut, especially on macOS with Command key
      && (e.keyCode !== 32 || searchBuffer.length !== 0) // space in middle of search
      ) {
        menu.value !== true && showPopup(e);
        const char = e.key.toLocaleLowerCase(),
          keyRepeat = searchBuffer.length === 1 && searchBuffer[0] === char;
        searchBufferExp = Date.now() + 1500;
        if (keyRepeat === false) {
          (0,event_event/* stopAndPrevent */.Gu)(e);
          searchBuffer += char;
        }
        const searchRe = new RegExp('^' + searchBuffer.split('').map(l => reEscapeList.indexOf(l) !== -1 ? '\\' + l : l).join('.*'), 'i');
        let index = optionIndex.value;
        if (keyRepeat === true || index < 0 || searchRe.test(getOptionLabel.value(props.options[index])) !== true) {
          do {
            index = (0,format/* normalizeToInterval */.eo)(index + 1, -1, optionsLength - 1);
          } while (index !== optionIndex.value && (isOptionDisabled.value(props.options[index]) === true || searchRe.test(getOptionLabel.value(props.options[index])) !== true));
        }
        if (optionIndex.value !== index) {
          (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
            setOptionIndex(index);
            scrollTo(index);
            if (index >= 0 && props.useInput === true && props.fillInput === true) {
              setInputValue(getOptionLabel.value(props.options[index]), true);
            }
          });
        }
        return;
      }

      // enter, space (when not using use-input and not in search), or tab (when not using multiple and option selected)
      // same target is checked above
      if (e.keyCode !== 13 && (e.keyCode !== 32 || props.useInput === true || searchBuffer !== '') && (e.keyCode !== 9 || tabShouldSelect === false)) return;
      e.keyCode !== 9 && (0,event_event/* stopAndPrevent */.Gu)(e);
      if (optionIndex.value !== -1 && optionIndex.value < optionsLength) {
        toggleOption(props.options[optionIndex.value]);
        return;
      }
      if (newValueModeValid === true) {
        const done = (val, mode) => {
          if (mode) {
            if (validateNewValueMode(mode) !== true) {
              return;
            }
          } else {
            mode = props.newValueMode;
          }
          updateInputValue('', props.multiple !== true, true);
          if (val === void 0 || val === null) {
            return;
          }
          const fn = mode === 'toggle' ? toggleOption : add;
          fn(val, mode === 'add-unique');
          if (props.multiple !== true) {
            targetRef.value !== null && targetRef.value.focus();
            hidePopup();
          }
        };
        if (props.onNewValue !== void 0) {
          emit('newValue', inputValue.value, done);
        } else {
          done(inputValue.value);
        }
        if (props.multiple !== true) {
          return;
        }
      }
      if (menu.value === true) {
        closeMenu();
      } else if (state.innerLoading.value !== true) {
        showPopup();
      }
    }
    function getVirtualScrollEl() {
      return hasDialog === true ? menuContentRef.value : menuRef.value !== null && menuRef.value.contentEl !== null ? menuRef.value.contentEl : void 0;
    }
    function getVirtualScrollTarget() {
      return getVirtualScrollEl();
    }
    function getSelection() {
      if (props.hideSelected === true) {
        return [];
      }
      if (slots['selected-item'] !== void 0) {
        return selectedScope.value.map(scope => slots['selected-item'](scope)).slice();
      }
      if (slots.selected !== void 0) {
        return [].concat(slots.selected());
      }
      if (props.useChips === true) {
        return selectedScope.value.map((scope, i) => (0,runtime_core_esm_bundler.h)(QChip, {
          key: 'option-' + i,
          removable: state.editable.value === true && isOptionDisabled.value(scope.opt) !== true,
          dense: true,
          textColor: props.color,
          tabindex: tabindex.value,
          onRemove() {
            scope.removeAtIndex(i);
          }
        }, () => (0,runtime_core_esm_bundler.h)('span', {
          class: 'ellipsis',
          [scope.html === true ? 'innerHTML' : 'textContent']: getOptionLabel.value(scope.opt)
        })));
      }
      return [(0,runtime_core_esm_bundler.h)('span', {
        [valueAsHtml.value === true ? 'innerHTML' : 'textContent']: ariaCurrentValue.value
      })];
    }
    function getAllOptions() {
      if (noOptions.value === true) {
        return slots['no-option'] !== void 0 ? slots['no-option']({
          inputValue: inputValue.value
        }) : void 0;
      }
      const fn = slots.option !== void 0 ? slots.option : scope => {
        return (0,runtime_core_esm_bundler.h)(QItem/* default */.A, {
          key: scope.index,
          ...scope.itemProps
        }, () => {
          return (0,runtime_core_esm_bundler.h)(QItemSection/* default */.A, () => (0,runtime_core_esm_bundler.h)(QItemLabel/* default */.A, () => (0,runtime_core_esm_bundler.h)('span', {
            [scope.html === true ? 'innerHTML' : 'textContent']: scope.label
          })));
        });
      };
      let options = padVirtualScroll('div', optionScope.value.map(fn));
      if (slots['before-options'] !== void 0) {
        options = slots['before-options']().concat(options);
      }
      return (0,render/* hMergeSlot */.Hp)(slots['after-options'], options);
    }
    function getInput(fromDialog, isTarget) {
      const attrs = isTarget === true ? {
        ...comboboxAttrs.value,
        ...state.splitAttrs.attributes.value
      } : void 0;
      const data = {
        ref: isTarget === true ? targetRef : void 0,
        key: 'i_t',
        class: computedInputClass.value,
        style: props.inputStyle,
        value: inputValue.value !== void 0 ? inputValue.value : '',
        // required for Android in order to show ENTER key when in form
        type: 'search',
        ...attrs,
        id: isTarget === true ? state.targetUid.value : void 0,
        maxlength: props.maxlength,
        autocomplete: props.autocomplete,
        'data-autofocus': fromDialog === true || props.autofocus === true || void 0,
        disabled: props.disable === true,
        readonly: props.readonly === true,
        ...inputControlEvents.value
      };
      if (fromDialog !== true && hasDialog === true) {
        if (Array.isArray(data.class) === true) {
          data.class = [...data.class, 'no-pointer-events'];
        } else {
          data.class += ' no-pointer-events';
        }
      }
      return (0,runtime_core_esm_bundler.h)('input', data);
    }
    function onInput(e) {
      if (filterTimer !== null) {
        clearTimeout(filterTimer);
        filterTimer = null;
      }
      if (inputValueTimer !== null) {
        clearTimeout(inputValueTimer);
        inputValueTimer = null;
      }
      if (e && e.target && e.target.qComposing === true) {
        return;
      }
      setInputValue(e.target.value || '');
      // mark it here as user input so that if updateInputValue is called
      // before filter is called the indicator is reset
      userInputValue = true;
      defaultInputValue = inputValue.value;
      if (state.focused.value !== true && (hasDialog !== true || dialogFieldFocused.value === true)) {
        state.focus();
      }
      if (props.onFilter !== void 0) {
        filterTimer = setTimeout(() => {
          filterTimer = null;
          filter(inputValue.value);
        }, props.inputDebounce);
      }
    }
    function setInputValue(val, emitImmediately) {
      if (inputValue.value !== val) {
        inputValue.value = val;
        if (emitImmediately === true || props.inputDebounce === 0 || props.inputDebounce === '0') {
          emit('inputValue', val);
        } else {
          inputValueTimer = setTimeout(() => {
            inputValueTimer = null;
            emit('inputValue', val);
          }, props.inputDebounce);
        }
      }
    }
    function updateInputValue(val, noFiltering, internal) {
      userInputValue = internal !== true;
      if (props.useInput === true) {
        setInputValue(val, true);
        if (noFiltering === true || internal !== true) {
          defaultInputValue = val;
        }
        noFiltering !== true && filter(val);
      }
    }
    function filter(val, keepClosed, afterUpdateFn) {
      if (props.onFilter === void 0 || keepClosed !== true && state.focused.value !== true) {
        return;
      }
      if (state.innerLoading.value === true) {
        emit('filterAbort');
      } else {
        state.innerLoading.value = true;
        innerLoadingIndicator.value = true;
      }
      if (val !== '' && props.multiple !== true && innerValue.value.length !== 0 && userInputValue !== true && val === getOptionLabel.value(innerValue.value[0])) {
        val = '';
      }
      const localFilterId = setTimeout(() => {
        menu.value === true && (menu.value = false);
      }, 10);
      filterId !== null && clearTimeout(filterId);
      filterId = localFilterId;
      emit('filter', val, (fn, afterFn) => {
        if ((keepClosed === true || state.focused.value === true) && filterId === localFilterId) {
          clearTimeout(filterId);
          typeof fn === 'function' && fn();

          // hide indicator to allow arrow to animate
          innerLoadingIndicator.value = false;
          (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
            state.innerLoading.value = false;
            if (state.editable.value === true) {
              if (keepClosed === true) {
                menu.value === true && hidePopup();
              } else if (menu.value === true) {
                updateMenu(true);
              } else {
                menu.value = true;
              }
            }
            typeof afterFn === 'function' && (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
              afterFn(proxy);
            });
            typeof afterUpdateFn === 'function' && (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
              afterUpdateFn(proxy);
            });
          });
        }
      }, () => {
        if (state.focused.value === true && filterId === localFilterId) {
          clearTimeout(filterId);
          state.innerLoading.value = false;
          innerLoadingIndicator.value = false;
        }
        menu.value === true && (menu.value = false);
      });
    }
    function getMenu() {
      return (0,runtime_core_esm_bundler.h)(QMenu, {
        ref: menuRef,
        class: menuContentClass.value,
        style: props.popupContentStyle,
        modelValue: menu.value,
        fit: props.menuShrink !== true,
        cover: props.optionsCover === true && noOptions.value !== true && props.useInput !== true,
        anchor: props.menuAnchor,
        self: props.menuSelf,
        offset: props.menuOffset,
        dark: isOptionsDark.value,
        noParentEvent: true,
        noRefocus: true,
        noFocus: true,
        noRouteDismiss: props.popupNoRouteDismiss,
        square: squaredMenu.value,
        transitionShow: props.transitionShow,
        transitionHide: props.transitionHide,
        transitionDuration: props.transitionDuration,
        separateClosePopup: true,
        ...listboxAttrs.value,
        onScrollPassive: onVirtualScrollEvt,
        onBeforeShow: onControlPopupShow,
        onBeforeHide: onMenuBeforeHide,
        onShow: onMenuShow
      }, getAllOptions);
    }
    function onMenuBeforeHide(e) {
      onControlPopupHide(e);
      closeMenu();
    }
    function onMenuShow() {
      setVirtualScrollSize();
    }
    function onDialogFieldFocus(e) {
      (0,event_event/* stop */.ds)(e);
      targetRef.value !== null && targetRef.value.focus();
      dialogFieldFocused.value = true;
      window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, 0);
    }
    function onDialogFieldBlur(e) {
      (0,event_event/* stop */.ds)(e);
      (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
        dialogFieldFocused.value = false;
      });
    }
    function getDialog() {
      const content = [(0,runtime_core_esm_bundler.h)(QField, {
        class: `col-auto ${state.fieldClass.value}`,
        ...innerFieldProps.value,
        for: state.targetUid.value,
        dark: isOptionsDark.value,
        square: true,
        loading: innerLoadingIndicator.value,
        itemAligned: false,
        filled: true,
        stackLabel: inputValue.value.length !== 0,
        ...state.splitAttrs.listeners.value,
        onFocus: onDialogFieldFocus,
        onBlur: onDialogFieldBlur
      }, {
        ...slots,
        rawControl: () => state.getControl(true),
        before: void 0,
        after: void 0
      })];
      menu.value === true && content.push((0,runtime_core_esm_bundler.h)('div', {
        ref: menuContentRef,
        class: menuContentClass.value + ' scroll',
        style: props.popupContentStyle,
        ...listboxAttrs.value,
        onClick: event_event/* prevent */.F4,
        onScrollPassive: onVirtualScrollEvt
      }, getAllOptions()));
      return (0,runtime_core_esm_bundler.h)(QDialog/* default */.A, {
        ref: dialogRef,
        modelValue: dialog.value,
        position: props.useInput === true ? 'top' : void 0,
        transitionShow: transitionShowComputed,
        transitionHide: props.transitionHide,
        transitionDuration: props.transitionDuration,
        noRouteDismiss: props.popupNoRouteDismiss,
        onBeforeShow: onControlPopupShow,
        onBeforeHide: onDialogBeforeHide,
        onHide: onDialogHide,
        onShow: onDialogShow
      }, () => (0,runtime_core_esm_bundler.h)('div', {
        class: 'q-select__dialog' + (isOptionsDark.value === true ? ' q-select__dialog--dark q-dark' : '') + (dialogFieldFocused.value === true ? ' q-select__dialog--focused' : '')
      }, content));
    }
    function onDialogBeforeHide(e) {
      onControlPopupHide(e);
      if (dialogRef.value !== null) {
        dialogRef.value.__updateRefocusTarget(state.rootRef.value.querySelector('.q-field__native > [tabindex]:last-child'));
      }
      state.focused.value = false;
    }
    function onDialogHide(e) {
      hidePopup();
      state.focused.value === false && emit('blur', e);
      resetInputValue();
    }
    function onDialogShow() {
      const el = document.activeElement;
      if ((el === null || el.id !== state.targetUid.value) && targetRef.value !== null && targetRef.value !== el) {
        targetRef.value.focus();
      }
      setVirtualScrollSize();
    }
    function closeMenu() {
      if (dialog.value === true) {
        return;
      }
      optionIndex.value = -1;
      if (menu.value === true) {
        menu.value = false;
      }
      if (state.focused.value === false) {
        if (filterId !== null) {
          clearTimeout(filterId);
          filterId = null;
        }
        if (state.innerLoading.value === true) {
          emit('filterAbort');
          state.innerLoading.value = false;
          innerLoadingIndicator.value = false;
        }
      }
    }
    function showPopup(e) {
      if (state.editable.value !== true) {
        return;
      }
      if (hasDialog === true) {
        state.onControlFocusin(e);
        dialog.value = true;
        (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
          state.focus();
        });
      } else {
        state.focus();
      }
      if (props.onFilter !== void 0) {
        filter(inputValue.value);
      } else if (noOptions.value !== true || slots['no-option'] !== void 0) {
        menu.value = true;
      }
    }
    function hidePopup() {
      dialog.value = false;
      closeMenu();
    }
    function resetInputValue() {
      props.useInput === true && updateInputValue(props.multiple !== true && props.fillInput === true && innerValue.value.length !== 0 ? getOptionLabel.value(innerValue.value[0]) || '' : '', true, true);
    }
    function updateMenu(show) {
      let optionIndex = -1;
      if (show === true) {
        if (innerValue.value.length !== 0) {
          const val = getOptionValue.value(innerValue.value[0]);
          optionIndex = props.options.findIndex(v => (0,is/* isDeepEqual */.Hv)(getOptionValue.value(v), val));
        }
        localResetVirtualScroll(optionIndex);
      }
      setOptionIndex(optionIndex);
    }
    function rerenderMenu(newLength, oldLength) {
      if (menu.value === true && state.innerLoading.value === false) {
        localResetVirtualScroll(-1, true);
        (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
          if (menu.value === true && state.innerLoading.value === false) {
            if (newLength > oldLength) {
              localResetVirtualScroll();
            } else {
              updateMenu(true);
            }
          }
        });
      }
    }
    function updateMenuPosition() {
      if (dialog.value === false && menuRef.value !== null) {
        menuRef.value.updatePosition();
      }
    }
    function onControlPopupShow(e) {
      e !== void 0 && (0,event_event/* stop */.ds)(e);
      emit('popupShow', e);
      state.hasPopupOpen = true;
      state.onControlFocusin(e);
    }
    function onControlPopupHide(e) {
      e !== void 0 && (0,event_event/* stop */.ds)(e);
      emit('popupHide', e);
      state.hasPopupOpen = false;
      state.onControlFocusout(e);
    }
    function updatePreState() {
      hasDialog = $q.platform.is.mobile !== true && props.behavior !== 'dialog' ? false : props.behavior !== 'menu' && (props.useInput === true ? slots['no-option'] !== void 0 || props.onFilter !== void 0 || noOptions.value === false : true);
      transitionShowComputed = $q.platform.is.ios === true && hasDialog === true && props.useInput === true ? 'fade' : props.transitionShow;
    }
    (0,runtime_core_esm_bundler/* onBeforeUpdate */.Ic)(updatePreState);
    (0,runtime_core_esm_bundler/* onUpdated */.$u)(updateMenuPosition);
    updatePreState();
    (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(() => {
      filterTimer !== null && clearTimeout(filterTimer);
      inputValueTimer !== null && clearTimeout(inputValueTimer);
    });

    // expose public methods
    Object.assign(proxy, {
      showPopup,
      hidePopup,
      removeAtIndex,
      add,
      toggleOption,
      getOptionIndex: () => optionIndex.value,
      setOptionIndex,
      moveOptionSelection,
      filter,
      updateMenuPosition,
      updateInputValue,
      isOptionSelected,
      getEmittingOptionValue,
      isOptionDisabled: (...args) => isOptionDisabled.value.apply(null, args) === true,
      getOptionValue: (...args) => getOptionValue.value.apply(null, args),
      getOptionLabel: (...args) => getOptionLabel.value.apply(null, args)
    });
    Object.assign(state, {
      innerValue,
      fieldClass: (0,runtime_core_esm_bundler/* computed */.EW)(() => `q-select q-field--auto-height q-select--with${props.useInput !== true ? 'out' : ''}-input` + ` q-select--with${props.useChips !== true ? 'out' : ''}-chips` + ` q-select--${props.multiple === true ? 'multiple' : 'single'}`),
      inputRef,
      targetRef,
      hasValue,
      showPopup,
      floatingLabel: (0,runtime_core_esm_bundler/* computed */.EW)(() => props.hideSelected !== true && hasValue.value === true || typeof inputValue.value === 'number' || inputValue.value.length !== 0 || (0,use_field/* fieldValueIsFilled */.o9)(props.displayValue)),
      getControlChild: () => {
        if (state.editable.value !== false && (dialog.value === true // dialog always has menu displayed, so need to render it
        || noOptions.value !== true || slots['no-option'] !== void 0)) {
          return hasDialog === true ? getDialog() : getMenu();
        } else if (state.hasPopupOpen === true) {
          // explicitly set it otherwise TAB will not blur component
          state.hasPopupOpen = false;
        }
      },
      controlEvents: {
        onFocusin(e) {
          state.onControlFocusin(e);
        },
        onFocusout(e) {
          state.onControlFocusout(e, () => {
            resetInputValue();
            closeMenu();
          });
        },
        onClick(e) {
          // label from QField will propagate click on the input
          (0,event_event/* prevent */.F4)(e);
          if (hasDialog !== true && menu.value === true) {
            closeMenu();
            targetRef.value !== null && targetRef.value.focus();
            return;
          }
          showPopup(e);
        }
      },
      getControl: fromDialog => {
        const child = getSelection();
        const isTarget = fromDialog === true || dialog.value !== true || hasDialog !== true;
        if (props.useInput === true) {
          child.push(getInput(fromDialog, isTarget));
        }
        // there can be only one (when dialog is opened the control in dialog should be target)
        else if (state.editable.value === true) {
          const attrs = isTarget === true ? comboboxAttrs.value : void 0;
          child.push((0,runtime_core_esm_bundler.h)('input', {
            ref: isTarget === true ? targetRef : void 0,
            key: 'd_t',
            class: 'q-select__focus-target',
            id: isTarget === true ? state.targetUid.value : void 0,
            value: ariaCurrentValue.value,
            readonly: true,
            'data-autofocus': fromDialog === true || props.autofocus === true || void 0,
            ...attrs,
            onKeydown: onTargetKeydown,
            onKeyup: onTargetKeyup,
            onKeypress: onTargetKeypress
          }));
          if (isTarget === true && typeof props.autocomplete === 'string' && props.autocomplete.length !== 0) {
            child.push((0,runtime_core_esm_bundler.h)('input', {
              class: 'q-select__autocomplete-input',
              autocomplete: props.autocomplete,
              tabindex: -1,
              onKeyup: onTargetAutocomplete
            }));
          }
        }
        if (nameProp.value !== void 0 && props.disable !== true && innerOptionsValue.value.length !== 0) {
          const opts = innerOptionsValue.value.map(value => (0,runtime_core_esm_bundler.h)('option', {
            value,
            selected: true
          }));
          child.push((0,runtime_core_esm_bundler.h)('select', {
            class: 'hidden',
            name: nameProp.value,
            multiple: props.multiple
          }, opts));
        }
        const attrs = props.useInput === true || isTarget !== true ? void 0 : state.splitAttrs.attributes.value;
        return (0,runtime_core_esm_bundler.h)('div', {
          class: 'q-field__native row items-center',
          ...attrs,
          ...state.splitAttrs.listeners.value
        }, child);
      },
      getInnerAppend: () => props.loading !== true && innerLoadingIndicator.value !== true && props.hideDropdownIcon !== true ? [(0,runtime_core_esm_bundler.h)(QIcon/* default */.A, {
        class: 'q-select__dropdown-icon' + (menu.value === true ? ' rotate-180' : ''),
        name: dropdownArrowIcon.value
      })] : null
    });
    return (0,use_field/* default */.Ay)(state);
  }
}));

/***/ }),

/***/ 386:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony export margins */
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1758);
/* harmony import */ var _composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6372);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9467);



const insetMap = {
  true: 'inset',
  item: 'item-inset',
  'item-thumbnail': 'item-thumbnail-inset'
};
const margins = {
  xs: 2,
  sm: 4,
  md: 8,
  lg: 16,
  xl: 24
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__/* .createComponent */ .a0)({
  name: 'QSeparator',
  props: {
    ..._composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__/* .useDarkProps */ .C,
    spaced: [Boolean, String],
    inset: [Boolean, String],
    vertical: Boolean,
    color: String,
    size: String
  },
  setup(props) {
    const vm = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .getCurrentInstance */ .nI)();
    const isDark = (0,_composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(props, vm.proxy.$q);
    const orientation = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => props.vertical === true ? 'vertical' : 'horizontal');
    const orientClass = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => ` q-separator--${orientation.value}`);
    const insetClass = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => props.inset !== false ? `${orientClass.value}-${insetMap[props.inset]}` : '');
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => `q-separator${orientClass.value}${insetClass.value}` + (props.color !== void 0 ? ` bg-${props.color}` : '') + (isDark.value === true ? ' q-separator--dark' : ''));
    const style = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .computed */ .EW)(() => {
      const acc = {};
      if (props.size !== void 0) {
        acc[props.vertical === true ? 'width' : 'height'] = props.size;
      }
      if (props.spaced !== false) {
        const size = props.spaced === true ? `${margins.md}px` : props.spaced in margins ? `${margins[props.spaced]}px` : props.spaced;
        const dir = props.vertical === true ? ['Left', 'Right'] : ['Top', 'Bottom'];
        acc[`margin${dir[0]}`] = acc[`margin${dir[1]}`] = size;
      }
      return acc;
    });
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('hr', {
      class: classes.value,
      style: style.value,
      'aria-orientation': orientation.value
    });
  }
}));

/***/ }),

/***/ 3605:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9104);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QSlideTransition',
  props: {
    appear: Boolean,
    duration: {
      type: Number,
      default: 300
    }
  },
  emits: ['show', 'hide'],
  setup(props, {
    slots,
    emit
  }) {
    let animating = false,
      doneFn,
      element;
    let timer = null,
      timerFallback = null,
      animListener,
      lastEvent;
    function cleanup() {
      doneFn && doneFn();
      doneFn = null;
      animating = false;
      if (timer !== null) {
        clearTimeout(timer);
        timer = null;
      }
      if (timerFallback !== null) {
        clearTimeout(timerFallback);
        timerFallback = null;
      }
      element !== void 0 && element.removeEventListener('transitionend', animListener);
      animListener = null;
    }
    function begin(el, height, done) {
      // here overflowY is 'hidden'
      if (height !== void 0) {
        el.style.height = `${height}px`;
      }
      el.style.transition = `height ${props.duration}ms cubic-bezier(.25, .8, .50, 1)`;
      animating = true;
      doneFn = done;
    }
    function end(el, event) {
      el.style.overflowY = null;
      el.style.height = null;
      el.style.transition = null;
      cleanup();
      event !== lastEvent && emit(event);
    }
    function onEnter(el, done) {
      let pos = 0;
      element = el;

      // if animationg overflowY is already 'hidden'
      if (animating === true) {
        cleanup();
        pos = el.offsetHeight === el.scrollHeight ? 0 : void 0;
      } else {
        lastEvent = 'hide';
        el.style.overflowY = 'hidden';
      }
      begin(el, pos, done);
      timer = setTimeout(() => {
        timer = null;
        el.style.height = `${el.scrollHeight}px`;
        animListener = evt => {
          timerFallback = null;
          if (Object(evt) !== evt || evt.target === el) {
            end(el, 'show');
          }
        };
        el.addEventListener('transitionend', animListener);
        timerFallback = setTimeout(animListener, props.duration * 1.1);
      }, 100);
    }
    function onLeave(el, done) {
      let pos;
      element = el;
      if (animating === true) {
        cleanup();
      } else {
        lastEvent = 'show';
        // we need to set overflowY 'hidden' before calculating the height
        // or else we get small differences
        el.style.overflowY = 'hidden';
        pos = el.scrollHeight;
      }
      begin(el, pos, done);
      timer = setTimeout(() => {
        timer = null;
        el.style.height = 0;
        animListener = evt => {
          timerFallback = null;
          if (Object(evt) !== evt || evt.target === el) {
            end(el, 'hide');
          }
        };
        el.addEventListener('transitionend', animListener);
        timerFallback = setTimeout(animListener, props.duration * 1.1);
      }, 100);
    }
    (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .onBeforeUnmount */ .xo)(() => {
      animating === true && cleanup();
    });
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)(vue__WEBPACK_IMPORTED_MODULE_2__/* .Transition */ .eB, {
      css: false,
      appear: props.appear,
      onEnter,
      onLeave
    }, slots.default);
  }
}));

/***/ }),

/***/ 1444:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ QSlider)
});

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.push.js
var es_array_push = __webpack_require__(239);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(8734);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/use-form/private.use-form.js
var private_use_form = __webpack_require__(2510);
// EXTERNAL MODULE: ./node_modules/quasar/src/directives/touch-pan/TouchPan.js
var TouchPan = __webpack_require__(9390);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-dark/use-dark.js
var use_dark = __webpack_require__(6372);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/format/format.js
var format = __webpack_require__(2732);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/is/is.js
var is = __webpack_require__(1054);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.render/render.js
var render = __webpack_require__(5139);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/slider/use-slider.js









const markerPrefixClass = 'q-slider__marker-labels';
const defaultMarkerConvertFn = v => ({
  value: v
});
const defaultMarkerLabelRenderFn = ({
  marker
}) => (0,runtime_core_esm_bundler.h)('div', {
  key: marker.value,
  style: marker.style,
  class: marker.classes
}, marker.label);

// PGDOWN, LEFT, DOWN, PGUP, RIGHT, UP
const keyCodes = [34, 37, 40, 33, 39, 38];
const useSliderProps = {
  ...use_dark/* useDarkProps */.C,
  ...private_use_form/* useFormProps */.Sc,
  min: {
    type: Number,
    default: 0
  },
  max: {
    type: Number,
    default: 100
  },
  innerMin: Number,
  innerMax: Number,
  step: {
    type: Number,
    default: 1,
    validator: v => v >= 0
  },
  snap: Boolean,
  vertical: Boolean,
  reverse: Boolean,
  color: String,
  markerLabelsClass: String,
  label: Boolean,
  labelColor: String,
  labelTextColor: String,
  labelAlways: Boolean,
  switchLabelSide: Boolean,
  markers: [Boolean, Number],
  markerLabels: [Boolean, Array, Object, Function],
  switchMarkerLabelsSide: Boolean,
  trackImg: String,
  trackColor: String,
  innerTrackImg: String,
  innerTrackColor: String,
  selectionColor: String,
  selectionImg: String,
  thumbSize: {
    type: String,
    default: '20px'
  },
  trackSize: {
    type: String,
    default: '4px'
  },
  disable: Boolean,
  readonly: Boolean,
  dense: Boolean,
  tabindex: [String, Number],
  thumbColor: String,
  thumbPath: {
    type: String,
    default: 'M 4, 10 a 6,6 0 1,0 12,0 a 6,6 0 1,0 -12,0'
  }
};
const useSliderEmits = ['pan', 'update:modelValue', 'change'];
/* harmony default export */ function use_slider({
  updateValue,
  updatePosition,
  getDragging,
  formAttrs
}) {
  const {
    props,
    emit,
    slots,
    proxy: {
      $q
    }
  } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
  const isDark = (0,use_dark/* default */.A)(props, $q);
  const injectFormInput = (0,private_use_form/* useFormInject */.vq)(formAttrs);
  const active = (0,reactivity_esm_bundler/* ref */.KR)(false);
  const preventFocus = (0,reactivity_esm_bundler/* ref */.KR)(false);
  const focus = (0,reactivity_esm_bundler/* ref */.KR)(false);
  const dragging = (0,reactivity_esm_bundler/* ref */.KR)(false);
  const axis = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.vertical === true ? '--v' : '--h');
  const labelSide = (0,runtime_core_esm_bundler/* computed */.EW)(() => '-' + (props.switchLabelSide === true ? 'switched' : 'standard'));
  const isReversed = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.vertical === true ? props.reverse === true : props.reverse !== ($q.lang.rtl === true));
  const innerMin = (0,runtime_core_esm_bundler/* computed */.EW)(() => isNaN(props.innerMin) === true || props.innerMin < props.min ? props.min : props.innerMin);
  const innerMax = (0,runtime_core_esm_bundler/* computed */.EW)(() => isNaN(props.innerMax) === true || props.innerMax > props.max ? props.max : props.innerMax);
  const editable = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.disable !== true && props.readonly !== true && innerMin.value < innerMax.value);
  const roundValueFn = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    if (props.step === 0) {
      return v => v;
    }
    const decimals = (String(props.step).trim().split('.')[1] || '').length;
    return v => parseFloat(v.toFixed(decimals));
  });
  const keyStep = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.step === 0 ? 1 : props.step);
  const tabindex = (0,runtime_core_esm_bundler/* computed */.EW)(() => editable.value === true ? props.tabindex || 0 : -1);
  const trackLen = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.max - props.min);
  const innerBarLen = (0,runtime_core_esm_bundler/* computed */.EW)(() => innerMax.value - innerMin.value);
  const innerMinRatio = (0,runtime_core_esm_bundler/* computed */.EW)(() => convertModelToRatio(innerMin.value));
  const innerMaxRatio = (0,runtime_core_esm_bundler/* computed */.EW)(() => convertModelToRatio(innerMax.value));
  const positionProp = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.vertical === true ? isReversed.value === true ? 'bottom' : 'top' : isReversed.value === true ? 'right' : 'left');
  const sizeProp = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.vertical === true ? 'height' : 'width');
  const thicknessProp = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.vertical === true ? 'width' : 'height');
  const orientation = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.vertical === true ? 'vertical' : 'horizontal');
  const attributes = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const acc = {
      role: 'slider',
      'aria-valuemin': innerMin.value,
      'aria-valuemax': innerMax.value,
      'aria-orientation': orientation.value,
      'data-step': props.step
    };
    if (props.disable === true) {
      acc['aria-disabled'] = 'true';
    } else if (props.readonly === true) {
      acc['aria-readonly'] = 'true';
    }
    return acc;
  });
  const classes = (0,runtime_core_esm_bundler/* computed */.EW)(() => `q-slider q-slider${axis.value} q-slider--${active.value === true ? '' : 'in'}active inline no-wrap ` + (props.vertical === true ? 'row' : 'column') + (props.disable === true ? ' disabled' : ' q-slider--enabled' + (editable.value === true ? ' q-slider--editable' : '')) + (focus.value === 'both' ? ' q-slider--focus' : '') + (props.label || props.labelAlways === true ? ' q-slider--label' : '') + (props.labelAlways === true ? ' q-slider--label-always' : '') + (isDark.value === true ? ' q-slider--dark' : '') + (props.dense === true ? ' q-slider--dense q-slider--dense' + axis.value : ''));
  function getPositionClass(name) {
    const cls = 'q-slider__' + name;
    return `${cls} ${cls}${axis.value} ${cls}${axis.value}${labelSide.value}`;
  }
  function getAxisClass(name) {
    const cls = 'q-slider__' + name;
    return `${cls} ${cls}${axis.value}`;
  }
  const selectionBarClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const color = props.selectionColor || props.color;
    return 'q-slider__selection absolute' + (color !== void 0 ? ` text-${color}` : '');
  });
  const markerClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => getAxisClass('markers') + ' absolute overflow-hidden');
  const trackContainerClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => getAxisClass('track-container'));
  const pinClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => getPositionClass('pin'));
  const labelClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => getPositionClass('label'));
  const textContainerClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => getPositionClass('text-container'));
  const markerLabelsContainerClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => getPositionClass('marker-labels-container') + (props.markerLabelsClass !== void 0 ? ` ${props.markerLabelsClass}` : ''));
  const trackClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => 'q-slider__track relative-position no-outline' + (props.trackColor !== void 0 ? ` bg-${props.trackColor}` : ''));
  const trackStyle = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const acc = {
      [thicknessProp.value]: props.trackSize
    };
    if (props.trackImg !== void 0) {
      acc.backgroundImage = `url(${props.trackImg}) !important`;
    }
    return acc;
  });
  const innerBarClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => 'q-slider__inner absolute' + (props.innerTrackColor !== void 0 ? ` bg-${props.innerTrackColor}` : ''));
  const innerBarStyle = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const innerDiff = innerMaxRatio.value - innerMinRatio.value;
    const acc = {
      [positionProp.value]: `${100 * innerMinRatio.value}%`,
      [sizeProp.value]: innerDiff === 0 ? '2px' : `${100 * innerDiff}%`
    };
    if (props.innerTrackImg !== void 0) {
      acc.backgroundImage = `url(${props.innerTrackImg}) !important`;
    }
    return acc;
  });
  function convertRatioToModel(ratio) {
    const {
      min,
      max,
      step
    } = props;
    let model = min + ratio * (max - min);
    if (step > 0) {
      const modulo = (model - innerMin.value) % step;
      model += (Math.abs(modulo) >= step / 2 ? (modulo < 0 ? -1 : 1) * step : 0) - modulo;
    }
    model = roundValueFn.value(model);
    return (0,format/* between */.Tq)(model, innerMin.value, innerMax.value);
  }
  function convertModelToRatio(model) {
    return trackLen.value === 0 ? 0 : (model - props.min) / trackLen.value;
  }
  function getDraggingRatio(evt, dragging) {
    const pos = (0,event_event/* position */.G1)(evt),
      val = props.vertical === true ? (0,format/* between */.Tq)((pos.top - dragging.top) / dragging.height, 0, 1) : (0,format/* between */.Tq)((pos.left - dragging.left) / dragging.width, 0, 1);
    return (0,format/* between */.Tq)(isReversed.value === true ? 1.0 - val : val, innerMinRatio.value, innerMaxRatio.value);
  }
  const markerStep = (0,runtime_core_esm_bundler/* computed */.EW)(() => (0,is/* isNumber */.Et)(props.markers) === true ? props.markers : keyStep.value);
  const markerTicks = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const acc = [];
    const step = markerStep.value;
    const max = props.max;
    let value = props.min;
    do {
      acc.push(value);
      value += step;
    } while (value < max);
    acc.push(max);
    return acc;
  });
  const markerLabelClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const prefix = ` ${markerPrefixClass}${axis.value}-`;
    return markerPrefixClass + `${prefix}${props.switchMarkerLabelsSide === true ? 'switched' : 'standard'}` + `${prefix}${isReversed.value === true ? 'rtl' : 'ltr'}`;
  });
  const markerLabelsList = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    if (props.markerLabels === false) {
      return null;
    }
    return getMarkerList(props.markerLabels).map((entry, index) => ({
      index,
      value: entry.value,
      label: entry.label || entry.value,
      classes: markerLabelClass.value + (entry.classes !== void 0 ? ' ' + entry.classes : ''),
      style: {
        ...getMarkerLabelStyle(entry.value),
        ...(entry.style || {})
      }
    }));
  });
  const markerScope = (0,runtime_core_esm_bundler/* computed */.EW)(() => ({
    markerList: markerLabelsList.value,
    markerMap: markerLabelsMap.value,
    classes: markerLabelClass.value,
    // TODO ts definition
    getStyle: getMarkerLabelStyle
  }));
  const markerStyle = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const size = innerBarLen.value === 0 ? '2px' : 100 * markerStep.value / innerBarLen.value;
    return {
      ...innerBarStyle.value,
      backgroundSize: props.vertical === true ? `2px ${size}%` : `${size}% 2px`
    };
  });
  function getMarkerList(def) {
    if (def === false) {
      return null;
    }
    if (def === true) {
      return markerTicks.value.map(defaultMarkerConvertFn);
    }
    if (typeof def === 'function') {
      return markerTicks.value.map(value => {
        const item = def(value);
        return (0,is/* isObject */.Gv)(item) === true ? {
          ...item,
          value
        } : {
          value,
          label: item
        };
      });
    }
    const filterFn = ({
      value
    }) => value >= props.min && value <= props.max;
    if (Array.isArray(def) === true) {
      return def.map(item => (0,is/* isObject */.Gv)(item) === true ? item : {
        value: item
      }).filter(filterFn);
    }
    return Object.keys(def).map(key => {
      const item = def[key];
      const value = Number(key);
      return (0,is/* isObject */.Gv)(item) === true ? {
        ...item,
        value
      } : {
        value,
        label: item
      };
    }).filter(filterFn);
  }
  function getMarkerLabelStyle(val) {
    return {
      [positionProp.value]: `${100 * (val - props.min) / trackLen.value}%`
    };
  }
  const markerLabelsMap = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    if (props.markerLabels === false) {
      return null;
    }
    const acc = {};
    markerLabelsList.value.forEach(entry => {
      acc[entry.value] = entry;
    });
    return acc;
  });
  function getMarkerLabelsContent() {
    if (slots['marker-label-group'] !== void 0) {
      return slots['marker-label-group'](markerScope.value);
    }
    const fn = slots['marker-label'] || defaultMarkerLabelRenderFn;
    return markerLabelsList.value.map(marker => fn({
      marker,
      ...markerScope.value
    }));
  }
  const panDirective = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    // if editable.value === true
    return [[TouchPan/* default */.A, onPan, void 0, {
      [orientation.value]: true,
      prevent: true,
      stop: true,
      mouse: true,
      mouseAllDir: true
    }]];
  });
  function onPan(event) {
    if (event.isFinal === true) {
      if (dragging.value !== void 0) {
        updatePosition(event.evt);
        // only if touch, because we also have mousedown/up:
        event.touch === true && updateValue(true);
        dragging.value = void 0;
        emit('pan', 'end');
      }
      active.value = false;
      focus.value = false;
    } else if (event.isFirst === true) {
      dragging.value = getDragging(event.evt);
      updatePosition(event.evt);
      updateValue();
      active.value = true;
      emit('pan', 'start');
    } else {
      updatePosition(event.evt);
      updateValue();
    }
  }
  function onBlur() {
    focus.value = false;
  }
  function onActivate(evt) {
    updatePosition(evt, getDragging(evt));
    updateValue();
    preventFocus.value = true;
    active.value = true;
    document.addEventListener('mouseup', onDeactivate, true);
  }
  function onDeactivate() {
    preventFocus.value = false;
    active.value = false;
    updateValue(true);
    onBlur();
    document.removeEventListener('mouseup', onDeactivate, true);
  }
  function onMobileClick(evt) {
    updatePosition(evt, getDragging(evt));
    updateValue(true);
  }
  function onKeyup(evt) {
    if (keyCodes.includes(evt.keyCode)) {
      updateValue(true);
    }
  }
  function getTextContainerStyle(ratio) {
    if (props.vertical === true) {
      return null;
    }
    const p = $q.lang.rtl !== props.reverse ? 1 - ratio : ratio;
    return {
      transform: `translateX(calc(${2 * p - 1} * ${props.thumbSize} / 2 + ${50 - 100 * p}%))`
    };
  }
  function getThumbRenderFn(thumb) {
    const focusClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => preventFocus.value === false && (focus.value === thumb.focusValue || focus.value === 'both') ? ' q-slider--focus' : '');
    const classes = (0,runtime_core_esm_bundler/* computed */.EW)(() => `q-slider__thumb q-slider__thumb${axis.value} q-slider__thumb${axis.value}-${isReversed.value === true ? 'rtl' : 'ltr'} absolute non-selectable` + focusClass.value + (thumb.thumbColor.value !== void 0 ? ` text-${thumb.thumbColor.value}` : ''));
    const style = (0,runtime_core_esm_bundler/* computed */.EW)(() => ({
      width: props.thumbSize,
      height: props.thumbSize,
      [positionProp.value]: `${100 * thumb.ratio.value}%`,
      zIndex: focus.value === thumb.focusValue ? 2 : void 0
    }));
    const pinColor = (0,runtime_core_esm_bundler/* computed */.EW)(() => thumb.labelColor.value !== void 0 ? ` text-${thumb.labelColor.value}` : '');
    const textContainerStyle = (0,runtime_core_esm_bundler/* computed */.EW)(() => getTextContainerStyle(thumb.ratio.value));
    const textClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => 'q-slider__text' + (thumb.labelTextColor.value !== void 0 ? ` text-${thumb.labelTextColor.value}` : ''));
    return () => {
      const thumbContent = [(0,runtime_core_esm_bundler.h)('svg', {
        class: 'q-slider__thumb-shape absolute-full',
        viewBox: '0 0 20 20',
        'aria-hidden': 'true'
      }, [(0,runtime_core_esm_bundler.h)('path', {
        d: props.thumbPath
      })]), (0,runtime_core_esm_bundler.h)('div', {
        class: 'q-slider__focus-ring fit'
      })];
      if (props.label === true || props.labelAlways === true) {
        thumbContent.push((0,runtime_core_esm_bundler.h)('div', {
          class: pinClass.value + ' absolute fit no-pointer-events' + pinColor.value
        }, [(0,runtime_core_esm_bundler.h)('div', {
          class: labelClass.value,
          style: {
            minWidth: props.thumbSize
          }
        }, [(0,runtime_core_esm_bundler.h)('div', {
          class: textContainerClass.value,
          style: textContainerStyle.value
        }, [(0,runtime_core_esm_bundler.h)('span', {
          class: textClass.value
        }, thumb.label.value)])])]));
        if (props.name !== void 0 && props.disable !== true) {
          injectFormInput(thumbContent, 'push');
        }
      }
      return (0,runtime_core_esm_bundler.h)('div', {
        class: classes.value,
        style: style.value,
        ...thumb.getNodeData()
      }, thumbContent);
    };
  }
  function getContent(selectionBarStyle, trackContainerTabindex, trackContainerEvents, injectThumb) {
    const trackContent = [];
    props.innerTrackColor !== 'transparent' && trackContent.push((0,runtime_core_esm_bundler.h)('div', {
      key: 'inner',
      class: innerBarClass.value,
      style: innerBarStyle.value
    }));
    props.selectionColor !== 'transparent' && trackContent.push((0,runtime_core_esm_bundler.h)('div', {
      key: 'selection',
      class: selectionBarClass.value,
      style: selectionBarStyle.value
    }));
    props.markers !== false && trackContent.push((0,runtime_core_esm_bundler.h)('div', {
      key: 'marker',
      class: markerClass.value,
      style: markerStyle.value
    }));
    injectThumb(trackContent);
    const content = [(0,render/* hDir */.Kf)('div', {
      key: 'trackC',
      class: trackContainerClass.value,
      tabindex: trackContainerTabindex.value,
      ...trackContainerEvents.value
    }, [(0,runtime_core_esm_bundler.h)('div', {
      class: trackClass.value,
      style: trackStyle.value
    }, trackContent)], 'slide', editable.value, () => panDirective.value)];
    if (props.markerLabels !== false) {
      const action = props.switchMarkerLabelsSide === true ? 'unshift' : 'push';
      content[action]((0,runtime_core_esm_bundler.h)('div', {
        key: 'markerL',
        class: markerLabelsContainerClass.value
      }, getMarkerLabelsContent()));
    }
    return content;
  }
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(() => {
    document.removeEventListener('mouseup', onDeactivate, true);
  });
  return {
    state: {
      active,
      focus,
      preventFocus,
      dragging,
      editable,
      classes,
      tabindex,
      attributes,
      roundValueFn,
      keyStep,
      trackLen,
      innerMin,
      innerMinRatio,
      innerMax,
      innerMaxRatio,
      positionProp,
      sizeProp,
      isReversed
    },
    methods: {
      onActivate,
      onMobileClick,
      onBlur,
      onKeyup,
      getContent,
      getThumbRenderFn,
      convertRatioToModel,
      convertModelToRatio,
      getDraggingRatio
    }
  };
}
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/slider/QSlider.js







const getNodeData = () => ({});
/* harmony default export */ const QSlider = ((0,create/* createComponent */.a0)({
  name: 'QSlider',
  props: {
    ...useSliderProps,
    modelValue: {
      required: true,
      default: null,
      validator: v => typeof v === 'number' || v === null
    },
    labelValue: [String, Number]
  },
  emits: useSliderEmits,
  setup(props, {
    emit
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
    const {
      state,
      methods
    } = use_slider({
      updateValue,
      updatePosition,
      getDragging,
      formAttrs: (0,private_use_form/* useFormAttrs */.mj)(props)
    });
    const rootRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const curRatio = (0,reactivity_esm_bundler/* ref */.KR)(0);
    const model = (0,reactivity_esm_bundler/* ref */.KR)(0);
    function normalizeModel() {
      model.value = props.modelValue === null ? state.innerMin.value : (0,format/* between */.Tq)(props.modelValue, state.innerMin.value, state.innerMax.value);
    }
    (0,runtime_core_esm_bundler/* watch */.wB)(() => `${props.modelValue}|${state.innerMin.value}|${state.innerMax.value}`, normalizeModel);
    normalizeModel();
    const modelRatio = (0,runtime_core_esm_bundler/* computed */.EW)(() => methods.convertModelToRatio(model.value));
    const ratio = (0,runtime_core_esm_bundler/* computed */.EW)(() => state.active.value === true ? curRatio.value : modelRatio.value);
    const selectionBarStyle = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const acc = {
        [state.positionProp.value]: `${100 * state.innerMinRatio.value}%`,
        [state.sizeProp.value]: `${100 * (ratio.value - state.innerMinRatio.value)}%`
      };
      if (props.selectionImg !== void 0) {
        acc.backgroundImage = `url(${props.selectionImg}) !important`;
      }
      return acc;
    });
    const getThumb = methods.getThumbRenderFn({
      focusValue: true,
      getNodeData,
      ratio,
      label: (0,runtime_core_esm_bundler/* computed */.EW)(() => props.labelValue !== void 0 ? props.labelValue : model.value),
      thumbColor: (0,runtime_core_esm_bundler/* computed */.EW)(() => props.thumbColor || props.color),
      labelColor: (0,runtime_core_esm_bundler/* computed */.EW)(() => props.labelColor),
      labelTextColor: (0,runtime_core_esm_bundler/* computed */.EW)(() => props.labelTextColor)
    });
    const trackContainerEvents = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      if (state.editable.value !== true) {
        return {};
      }
      return $q.platform.is.mobile === true ? {
        onClick: methods.onMobileClick
      } : {
        onMousedown: methods.onActivate,
        onFocus,
        onBlur: methods.onBlur,
        onKeydown,
        onKeyup: methods.onKeyup
      };
    });
    function updateValue(change) {
      if (model.value !== props.modelValue) {
        emit('update:modelValue', model.value);
      }
      change === true && emit('change', model.value);
    }
    function getDragging() {
      return rootRef.value.getBoundingClientRect();
    }
    function updatePosition(event, dragging = state.dragging.value) {
      const ratio = methods.getDraggingRatio(event, dragging);
      model.value = methods.convertRatioToModel(ratio);
      curRatio.value = props.snap !== true || props.step === 0 ? ratio : methods.convertModelToRatio(model.value);
    }
    function onFocus() {
      state.focus.value = true;
    }
    function onKeydown(evt) {
      if (!keyCodes.includes(evt.keyCode)) {
        return;
      }
      (0,event_event/* stopAndPrevent */.Gu)(evt);
      const stepVal = ([34, 33].includes(evt.keyCode) ? 10 : 1) * state.keyStep.value,
        offset = ([34, 37, 40].includes(evt.keyCode) ? -1 : 1) * (state.isReversed.value === true ? -1 : 1) * (props.vertical === true ? -1 : 1) * stepVal;
      model.value = (0,format/* between */.Tq)(state.roundValueFn.value(model.value + offset), state.innerMin.value, state.innerMax.value);
      updateValue();
    }
    return () => {
      const content = methods.getContent(selectionBarStyle, state.tabindex, trackContainerEvents, node => {
        node.push(getThumb());
      });
      return (0,runtime_core_esm_bundler.h)('div', {
        ref: rootRef,
        class: state.classes.value + (props.modelValue === null ? ' q-slider--no-value' : ''),
        ...state.attributes.value,
        'aria-valuenow': props.modelValue
      }, content);
    };
  }
}));

/***/ }),

/***/ 3676:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9467);


const space = (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {
  class: 'q-space'
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__/* .createComponent */ .a0)({
  name: 'QSpace',
  setup() {
    return () => space;
  }
}));

/***/ }),

/***/ 8210:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1758);
/* harmony import */ var _use_spinner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1551);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9467);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__/* .createComponent */ .a0)({
  name: 'QSpinner',
  props: {
    ..._use_spinner_js__WEBPACK_IMPORTED_MODULE_0__/* .useSpinnerProps */ .X,
    thickness: {
      type: Number,
      default: 5
    }
  },
  setup(props) {
    const {
      cSize,
      classes
    } = (0,_use_spinner_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(props);
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('svg', {
      class: classes.value + ' q-spinner-mat',
      width: cSize.value,
      height: cSize.value,
      viewBox: '25 25 50 50'
    }, [(0,vue__WEBPACK_IMPORTED_MODULE_2__.h)('circle', {
      class: 'path',
      cx: '50',
      cy: '50',
      r: '20',
      fill: 'none',
      stroke: 'currentColor',
      'stroke-width': props.thickness,
      'stroke-miterlimit': '10'
    })]);
  }
}));

/***/ }),

/***/ 9198:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _use_spinner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1551);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9467);



const svg = [(0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('circle', {
  cx: '15',
  cy: '15',
  r: '15'
}, [(0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('animate', {
  attributeName: 'r',
  from: '15',
  to: '15',
  begin: '0s',
  dur: '0.8s',
  values: '15;9;15',
  calcMode: 'linear',
  repeatCount: 'indefinite'
}), (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('animate', {
  attributeName: 'fill-opacity',
  from: '1',
  to: '1',
  begin: '0s',
  dur: '0.8s',
  values: '1;.5;1',
  calcMode: 'linear',
  repeatCount: 'indefinite'
})]), (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('circle', {
  cx: '60',
  cy: '15',
  r: '9',
  'fill-opacity': '.3'
}, [(0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('animate', {
  attributeName: 'r',
  from: '9',
  to: '9',
  begin: '0s',
  dur: '0.8s',
  values: '9;15;9',
  calcMode: 'linear',
  repeatCount: 'indefinite'
}), (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('animate', {
  attributeName: 'fill-opacity',
  from: '.5',
  to: '.5',
  begin: '0s',
  dur: '0.8s',
  values: '.5;1;.5',
  calcMode: 'linear',
  repeatCount: 'indefinite'
})]), (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('circle', {
  cx: '105',
  cy: '15',
  r: '15'
}, [(0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('animate', {
  attributeName: 'r',
  from: '15',
  to: '15',
  begin: '0s',
  dur: '0.8s',
  values: '15;9;15',
  calcMode: 'linear',
  repeatCount: 'indefinite'
}), (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('animate', {
  attributeName: 'fill-opacity',
  from: '1',
  to: '1',
  begin: '0s',
  dur: '0.8s',
  values: '1;.5;1',
  calcMode: 'linear',
  repeatCount: 'indefinite'
})])];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__/* .createComponent */ .a0)({
  name: 'QSpinnerDots',
  props: _use_spinner_js__WEBPACK_IMPORTED_MODULE_0__/* .useSpinnerProps */ .X,
  setup(props) {
    const {
      cSize,
      classes
    } = (0,_use_spinner_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)(props);
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('svg', {
      class: classes.value,
      fill: 'currentColor',
      width: cSize.value,
      height: cSize.value,
      viewBox: '0 0 120 30',
      xmlns: 'http://www.w3.org/2000/svg'
    }, svg);
  }
}));

/***/ }),

/***/ 1551:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ useSpinner),
/* harmony export */   X: () => (/* binding */ useSpinnerProps)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1906);


const useSpinnerProps = {
  size: {
    type: [String, Number],
    default: '1em'
  },
  color: String
};
function useSpinner(props) {
  return {
    cSize: (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => props.size in _composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_0__/* .useSizeDefaults */ .v0 ? `${_composables_private_use_size_use_size_js__WEBPACK_IMPORTED_MODULE_0__/* .useSizeDefaults */ .v0[props.size]}px` : props.size),
    classes: (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => 'q-spinner' + (props.color ? ` text-${props.color}` : ''))
  };
}

/***/ }),

/***/ 8577:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8734);
/* harmony import */ var _slide_transition_QSlideTransition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3605);
/* harmony import */ var _StepHeader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6729);
/* harmony import */ var _composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(447);
/* harmony import */ var _composables_use_render_cache_use_render_cache_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3403);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(7973);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5139);








function getStepWrapper(slots) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
    class: 'q-stepper__step-content'
  }, [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
    class: 'q-stepper__step-inner'
  }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_4__/* .hSlot */ .zm)(slots.default))]);
}
const PanelWrapper = {
  setup(_, {
    slots
  }) {
    return () => getStepWrapper(slots);
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_5__/* .createComponent */ .a0)({
  name: 'QStep',
  props: {
    ..._composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_2__/* .usePanelChildProps */ .hb,
    icon: String,
    color: String,
    title: {
      type: String,
      required: true
    },
    caption: String,
    prefix: [String, Number],
    doneIcon: String,
    doneColor: String,
    activeIcon: String,
    activeColor: String,
    errorIcon: String,
    errorColor: String,
    headerNav: {
      type: Boolean,
      default: true
    },
    done: Boolean,
    error: Boolean,
    onScroll: [Function, Array]
  },
  setup(props, {
    slots,
    emit
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .getCurrentInstance */ .nI)();
    const $stepper = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .inject */ .WQ)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_6__/* .stepperKey */ .$3, _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_6__/* .emptyRenderFn */ .U_);
    if ($stepper === _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_6__/* .emptyRenderFn */ .U_) {
      console.error('QStep needs to be a child of QStepper');
      return _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_6__/* .emptyRenderFn */ .U_;
    }
    const {
      getCache
    } = (0,_composables_use_render_cache_use_render_cache_js__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .A)();
    const rootRef = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(null);
    const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => $stepper.value.modelValue === props.name);
    const scrollEvent = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => $q.platform.is.ios !== true && $q.platform.is.chrome === true || isActive.value !== true || $stepper.value.vertical !== true ? {} : {
      onScroll(e) {
        const {
          target
        } = e;
        if (target.scrollTop > 0) {
          target.scrollTop = 0;
        }
        props.onScroll !== void 0 && emit('scroll', e);
      }
    });
    const contentKey = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => typeof props.name === 'string' || typeof props.name === 'number' ? props.name : String(props.name));
    function getStepContent() {
      const vertical = $stepper.value.vertical;
      if (vertical === true && $stepper.value.keepAlive === true) {
        return (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)(vue__WEBPACK_IMPORTED_MODULE_3__/* .KeepAlive */ .PR, $stepper.value.keepAliveProps.value, isActive.value === true ? [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)($stepper.value.needsUniqueKeepAliveWrapper.value === true ? getCache(contentKey.value, () => ({
          ...PanelWrapper,
          name: contentKey.value
        })) : PanelWrapper, {
          key: contentKey.value
        }, slots.default)] : void 0);
      }
      return vertical !== true || isActive.value === true ? getStepWrapper(slots) : void 0;
    }
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
      ref: rootRef,
      class: 'q-stepper__step',
      role: 'tabpanel',
      ...scrollEvent.value
    }, $stepper.value.vertical === true ? [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)(_StepHeader_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
      stepper: $stepper.value,
      step: props,
      goToPanel: $stepper.value.goToPanel
    }), $stepper.value.animated === true ? (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)(_slide_transition_QSlideTransition_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A, getStepContent) : getStepContent()] : [getStepContent()]);
  }
}));

/***/ }),

/***/ 7222:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1758);
/* harmony import */ var _StepHeader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6729);
/* harmony import */ var _composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6372);
/* harmony import */ var _composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(447);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7973);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5139);







const camelRE = /(-\w)/g;
function camelizeProps(props) {
  const acc = {};
  for (const key in props) {
    const newKey = key.replace(camelRE, m => m[1].toUpperCase());
    acc[newKey] = props[key];
  }
  return acc;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__/* .createComponent */ .a0)({
  name: 'QStepper',
  props: {
    ..._composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_1__/* .useDarkProps */ .C,
    ..._composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_2__/* .usePanelProps */ .Qn,
    flat: Boolean,
    bordered: Boolean,
    alternativeLabels: Boolean,
    headerNav: Boolean,
    contracted: Boolean,
    headerClass: String,
    inactiveColor: String,
    inactiveIcon: String,
    doneIcon: String,
    doneColor: String,
    activeIcon: String,
    activeColor: String,
    errorIcon: String,
    errorColor: String
  },
  emits: _composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_2__/* .usePanelEmits */ .g,
  setup(props, {
    slots
  }) {
    const vm = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .getCurrentInstance */ .nI)();
    const isDark = (0,_composables_private_use_dark_use_dark_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A)(props, vm.proxy.$q);
    const {
      updatePanelsList,
      isValidPanelName,
      updatePanelIndex,
      getPanelContent,
      getPanels,
      panelDirectives,
      goToPanel,
      keepAliveProps,
      needsUniqueKeepAliveWrapper
    } = (0,_composables_private_use_panel_use_panel_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Ay)();
    (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .provide */ .Gt)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_5__/* .stepperKey */ .$3, (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => ({
      goToPanel,
      keepAliveProps,
      needsUniqueKeepAliveWrapper,
      ...props
    })));
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => `q-stepper q-stepper--${props.vertical === true ? 'vertical' : 'horizontal'}` + (props.flat === true ? ' q-stepper--flat' : '') + (props.bordered === true ? ' q-stepper--bordered' : '') + (isDark.value === true ? ' q-stepper--dark q-dark' : ''));
    const headerClasses = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => 'q-stepper__header row items-stretch justify-between' + ` q-stepper__header--${props.alternativeLabels === true ? 'alternative' : 'standard'}-labels` + (props.flat === false || props.bordered === true ? ' q-stepper__header--border' : '') + (props.contracted === true ? ' q-stepper__header--contracted' : '') + (props.headerClass !== void 0 ? ` ${props.headerClass}` : ''));
    function getContent() {
      const top = (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_6__/* .hSlot */ .zm)(slots.message, []);
      if (props.vertical === true) {
        isValidPanelName(props.modelValue) && updatePanelIndex();
        const content = (0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
          class: 'q-stepper__content'
        }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_6__/* .hSlot */ .zm)(slots.default));
        return top === void 0 ? [content] : top.concat(content);
      }
      return [(0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
        class: headerClasses.value
      }, getPanels().map(panel => {
        const step = camelizeProps(panel.props);
        return (0,vue__WEBPACK_IMPORTED_MODULE_4__.h)(_StepHeader_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A, {
          key: step.name,
          stepper: props,
          step,
          goToPanel
        });
      })), top, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_6__/* .hDir */ .Kf)('div', {
        class: 'q-stepper__content q-panel-parent'
      }, getPanelContent(), 'cont', props.swipeable, () => panelDirectives.value)];
    }
    return () => {
      updatePanelsList(slots);
      return (0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
        class: classes.value
      }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_6__/* .hMergeSlot */ .Hp)(slots.navigation, getContent()));
    };
  }
}));

/***/ }),

/***/ 14:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5139);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QStepperNavigation',
  setup(_, {
    slots
  }) {
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('div', {
      class: 'q-stepper__nav'
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 6729:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8734);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(492);
/* harmony import */ var _directives_ripple_Ripple_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9626);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9467);





/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_3__/* .createComponent */ .a0)({
  name: 'StepHeader',
  props: {
    stepper: {},
    step: {},
    goToPanel: Function
  },
  setup(props, {
    attrs
  }) {
    const {
      proxy: {
        $q
      }
    } = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .getCurrentInstance */ .nI)();
    const blurRef = (0,vue__WEBPACK_IMPORTED_MODULE_5__/* .ref */ .KR)(null);
    const isActive = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => props.stepper.modelValue === props.step.name);
    const isDisable = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
      const opt = props.step.disable;
      return opt === true || opt === '';
    });
    const isError = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
      const opt = props.step.error;
      return opt === true || opt === '';
    });
    const isDone = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
      const opt = props.step.done;
      return isDisable.value === false && (opt === true || opt === '');
    });
    const headerNav = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
      const opt = props.step.headerNav,
        nav = opt === true || opt === '' || opt === void 0;
      return isDisable.value === false && props.stepper.headerNav && nav;
    });
    const hasPrefix = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
      return props.step.prefix && (isActive.value === false || props.stepper.activeIcon === 'none') && (isError.value === false || props.stepper.errorIcon === 'none') && (isDone.value === false || props.stepper.doneIcon === 'none');
    });
    const icon = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
      const defaultIcon = props.step.icon || props.stepper.inactiveIcon;
      if (isActive.value === true) {
        const icon = props.step.activeIcon || props.stepper.activeIcon;
        return icon === 'none' ? defaultIcon : icon || $q.iconSet.stepper.active;
      }
      if (isError.value === true) {
        const icon = props.step.errorIcon || props.stepper.errorIcon;
        return icon === 'none' ? defaultIcon : icon || $q.iconSet.stepper.error;
      }
      if (isDisable.value === false && isDone.value === true) {
        const icon = props.step.doneIcon || props.stepper.doneIcon;
        return icon === 'none' ? defaultIcon : icon || $q.iconSet.stepper.done;
      }
      return defaultIcon;
    });
    const color = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
      const errorColor = isError.value === true ? props.step.errorColor || props.stepper.errorColor : void 0;
      if (isActive.value === true) {
        const color = props.step.activeColor || props.stepper.activeColor || props.step.color;
        return color !== void 0 ? color : errorColor;
      }
      if (errorColor !== void 0) {
        return errorColor;
      }
      if (isDisable.value === false && isDone.value === true) {
        return props.step.doneColor || props.stepper.doneColor || props.step.color || props.stepper.inactiveColor;
      }
      return props.step.color || props.stepper.inactiveColor;
    });
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => {
      return 'q-stepper__tab col-grow flex items-center no-wrap relative-position' + (color.value !== void 0 ? ` text-${color.value}` : '') + (isError.value === true ? ' q-stepper__tab--error q-stepper__tab--error-with-' + (hasPrefix.value === true ? 'prefix' : 'icon') : '') + (isActive.value === true ? ' q-stepper__tab--active' : '') + (isDone.value === true ? ' q-stepper__tab--done' : '') + (headerNav.value === true ? ' q-stepper__tab--navigation q-focusable q-hoverable' : '') + (isDisable.value === true ? ' q-stepper__tab--disabled' : '');
    });
    const ripple = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .computed */ .EW)(() => props.stepper.headerNav !== true ? false : headerNav.value);
    function onActivate() {
      blurRef.value !== null && blurRef.value.focus();
      isActive.value === false && props.goToPanel(props.step.name);
    }
    function onKeyup(e) {
      if (e.keyCode === 13 && isActive.value === false) {
        props.goToPanel(props.step.name);
      }
    }
    return () => {
      const data = {
        class: classes.value
      };
      if (headerNav.value === true) {
        data.onClick = onActivate;
        data.onKeyup = onKeyup;
        Object.assign(data, isDisable.value === true ? {
          tabindex: -1,
          'aria-disabled': 'true'
        } : {
          tabindex: attrs.tabindex || 0
        });
      }
      const child = [(0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
        class: 'q-focus-helper',
        tabindex: -1,
        ref: blurRef
      }), (0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
        class: 'q-stepper__dot row flex-center q-stepper__line relative-position'
      }, [(0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('span', {
        class: 'row flex-center'
      }, [hasPrefix.value === true ? props.step.prefix : (0,vue__WEBPACK_IMPORTED_MODULE_4__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
        name: icon.value
      })])])];
      if (props.step.title !== void 0 && props.step.title !== null) {
        const content = [(0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
          class: 'q-stepper__title'
        }, props.step.title)];
        if (props.step.caption !== void 0 && props.step.caption !== null) {
          content.push((0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
            class: 'q-stepper__caption'
          }, props.step.caption));
        }
        child.push((0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', {
          class: 'q-stepper__label q-stepper__line relative-position'
        }, content));
      }
      return (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .withDirectives */ .bo)((0,vue__WEBPACK_IMPORTED_MODULE_4__.h)('div', data, child), [[_directives_ripple_Ripple_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, ripple.value]]);
    };
  }
}));

/***/ }),

/***/ 6254:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ QTable)
});

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.push.js
var es_array_push = __webpack_require__(239);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(8734);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/icon/QIcon.js
var QIcon = __webpack_require__(492);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.render/render.js
var render = __webpack_require__(5139);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/QTh.js




/* harmony default export */ const QTh = ((0,create/* createComponent */.a0)({
  name: 'QTh',
  props: {
    props: Object,
    autoWidth: Boolean
  },
  emits: ['click'],
  setup(props, {
    slots,
    emit
  }) {
    const vm = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
    const {
      proxy: {
        $q
      }
    } = vm;
    const onClick = evt => {
      emit('click', evt);
    };
    return () => {
      if (props.props === void 0) {
        return (0,runtime_core_esm_bundler.h)('th', {
          class: props.autoWidth === true ? 'q-table--col-auto-width' : '',
          onClick
        }, (0,render/* hSlot */.zm)(slots.default));
      }
      let col, child;
      const name = vm.vnode.key;
      if (name) {
        col = props.props.colsMap[name];
        if (col === void 0) return;
      } else {
        col = props.props.col;
      }
      if (col.sortable === true) {
        const action = col.align === 'right' ? 'unshift' : 'push';
        child = (0,render/* hUniqueSlot */.Ij)(slots.default, []);
        child[action]((0,runtime_core_esm_bundler.h)(QIcon/* default */.A, {
          class: col.__iconClass,
          name: $q.iconSet.table.arrowUp
        }));
      } else {
        child = (0,render/* hSlot */.zm)(slots.default);
      }
      const data = {
        class: col.__thClass + (props.autoWidth === true ? ' q-table--col-auto-width' : ''),
        style: col.headerStyle,
        onClick: evt => {
          col.sortable === true && props.props.sort(col);
          onClick(evt);
        }
      };
      return (0,runtime_core_esm_bundler.h)('th', data, child);
    };
  }
}));
// EXTERNAL MODULE: ./node_modules/quasar/src/components/separator/QSeparator.js
var QSeparator = __webpack_require__(386);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/item/QList.js
var QList = __webpack_require__(3999);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-dark/use-dark.js
var use_dark = __webpack_require__(6372);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/markup-table/QMarkupTable.js




const separatorValues = ['horizontal', 'vertical', 'cell', 'none'];
/* harmony default export */ const QMarkupTable = ((0,create/* createComponent */.a0)({
  name: 'QMarkupTable',
  props: {
    ...use_dark/* useDarkProps */.C,
    dense: Boolean,
    flat: Boolean,
    bordered: Boolean,
    square: Boolean,
    wrapCells: Boolean,
    separator: {
      type: String,
      default: 'horizontal',
      validator: v => separatorValues.includes(v)
    }
  },
  setup(props, {
    slots
  }) {
    const vm = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
    const isDark = (0,use_dark/* default */.A)(props, vm.proxy.$q);
    const classes = (0,runtime_core_esm_bundler/* computed */.EW)(() => 'q-markup-table q-table__container q-table__card' + ` q-table--${props.separator}-separator` + (isDark.value === true ? ' q-table--dark q-table__card--dark q-dark' : '') + (props.dense === true ? ' q-table--dense' : '') + (props.flat === true ? ' q-table--flat' : '') + (props.bordered === true ? ' q-table--bordered' : '') + (props.square === true ? ' q-table--square' : '') + (props.wrapCells === false ? ' q-table--no-wrap' : ''));
    return () => (0,runtime_core_esm_bundler.h)('div', {
      class: classes.value
    }, [(0,runtime_core_esm_bundler.h)('table', {
      class: 'q-table'
    }, (0,render/* hSlot */.zm)(slots.default))]);
  }
}));
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/get-table-middle.js

/* harmony default export */ function get_table_middle(props, content) {
  return (0,runtime_core_esm_bundler.h)('div', props, [(0,runtime_core_esm_bundler.h)('table', {
    class: 'q-table'
  }, content)]);
}
// EXTERNAL MODULE: ./node_modules/quasar/src/components/virtual-scroll/use-virtual-scroll.js
var use_virtual_scroll = __webpack_require__(1503);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/scroll/scroll.js
var scroll_scroll = __webpack_require__(8336);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/virtual-scroll/QVirtualScroll.js









const comps = {
  list: QList/* default */.A,
  table: QMarkupTable
};
const typeOptions = ['list', 'table', '__qtable'];
/* harmony default export */ const QVirtualScroll = ((0,create/* createComponent */.a0)({
  name: 'QVirtualScroll',
  props: {
    ...use_virtual_scroll/* useVirtualScrollProps */.AV,
    type: {
      type: String,
      default: 'list',
      validator: v => typeOptions.includes(v)
    },
    items: {
      type: Array,
      default: () => []
    },
    itemsFn: Function,
    itemsSize: Number,
    scrollTarget: scroll_scroll/* scrollTargetProp */.cP
  },
  setup(props, {
    slots,
    attrs
  }) {
    let localScrollTarget;
    const rootRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const virtualScrollLength = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.itemsSize >= 0 && props.itemsFn !== void 0 ? parseInt(props.itemsSize, 10) : Array.isArray(props.items) ? props.items.length : 0);
    const {
      virtualScrollSliceRange,
      localResetVirtualScroll,
      padVirtualScroll,
      onVirtualScrollEvt
    } = (0,use_virtual_scroll/* useVirtualScroll */.Iq)({
      virtualScrollLength,
      getVirtualScrollTarget,
      getVirtualScrollEl
    });
    const virtualScrollScope = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      if (virtualScrollLength.value === 0) {
        return [];
      }
      const mapFn = (item, i) => ({
        index: virtualScrollSliceRange.value.from + i,
        item
      });
      return props.itemsFn === void 0 ? props.items.slice(virtualScrollSliceRange.value.from, virtualScrollSliceRange.value.to).map(mapFn) : props.itemsFn(virtualScrollSliceRange.value.from, virtualScrollSliceRange.value.to - virtualScrollSliceRange.value.from).map(mapFn);
    });
    const classes = (0,runtime_core_esm_bundler/* computed */.EW)(() => 'q-virtual-scroll q-virtual-scroll' + (props.virtualScrollHorizontal === true ? '--horizontal' : '--vertical') + (props.scrollTarget !== void 0 ? '' : ' scroll'));
    const attributes = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.scrollTarget !== void 0 ? {} : {
      tabindex: 0
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(virtualScrollLength, () => {
      localResetVirtualScroll();
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(() => props.scrollTarget, () => {
      unconfigureScrollTarget();
      configureScrollTarget();
    });
    function getVirtualScrollEl() {
      return rootRef.value.$el || rootRef.value;
    }
    function getVirtualScrollTarget() {
      return localScrollTarget;
    }
    function configureScrollTarget() {
      localScrollTarget = (0,scroll_scroll/* getScrollTarget */.hD)(getVirtualScrollEl(), props.scrollTarget);
      localScrollTarget.addEventListener('scroll', onVirtualScrollEvt, event_event/* listenOpts */.mG.passive);
    }
    function unconfigureScrollTarget() {
      if (localScrollTarget !== void 0) {
        localScrollTarget.removeEventListener('scroll', onVirtualScrollEvt, event_event/* listenOpts */.mG.passive);
        localScrollTarget = void 0;
      }
    }
    function __getVirtualChildren() {
      let child = padVirtualScroll(props.type === 'list' ? 'div' : 'tbody', virtualScrollScope.value.map(slots.default));
      if (slots.before !== void 0) {
        child = slots.before().concat(child);
      }
      return (0,render/* hMergeSlot */.Hp)(slots.after, child);
    }
    (0,runtime_core_esm_bundler/* onBeforeMount */.KC)(() => {
      localResetVirtualScroll();
    });
    (0,runtime_core_esm_bundler/* onMounted */.sV)(() => {
      configureScrollTarget();
    });
    (0,runtime_core_esm_bundler/* onActivated */.n)(() => {
      configureScrollTarget();
    });
    (0,runtime_core_esm_bundler/* onDeactivated */.Y4)(() => {
      unconfigureScrollTarget();
    });
    (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(() => {
      unconfigureScrollTarget();
    });
    return () => {
      if (slots.default === void 0) {
        console.error('QVirtualScroll: default scoped slot is required for rendering');
        return;
      }
      return props.type === '__qtable' ? get_table_middle({
        ref: rootRef,
        class: 'q-table__middle ' + classes.value
      }, __getVirtualChildren()) : (0,runtime_core_esm_bundler.h)(comps[props.type], {
        ...attrs,
        ref: rootRef,
        class: [attrs.class, classes.value],
        ...attributes.value
      }, __getVirtualChildren);
    };
  }
}));
// EXTERNAL MODULE: ./node_modules/quasar/src/components/select/QSelect.js + 7 modules
var QSelect = __webpack_require__(8005);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/linear-progress/QLinearProgress.js
var QLinearProgress = __webpack_require__(8240);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/checkbox/QCheckbox.js
var QCheckbox = __webpack_require__(460);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/btn/QBtn.js
var QBtn = __webpack_require__(6384);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-fullscreen/use-fullscreen.js
var use_fullscreen = __webpack_require__(8450);
;// CONCATENATED MODULE: ./node_modules/quasar/src/utils/private.sort/sort.js
function sortDate(a, b) {
  return new Date(a) - new Date(b);
}
function sortBoolean(a, b) {
  return a && !b ? -1 : !a && b ? 1 : 0;
}
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/is/is.js
var is = __webpack_require__(1054);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-sort.js



const useTableSortProps = {
  sortMethod: Function,
  binaryStateSort: Boolean,
  columnSortOrder: {
    type: String,
    validator: v => v === 'ad' || v === 'da',
    default: 'ad'
  }
};
function useTableSort(props, computedPagination, colList, setPagination) {
  const columnToSort = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const {
      sortBy
    } = computedPagination.value;
    return sortBy ? colList.value.find(def => def.name === sortBy) || null : null;
  });
  const computedSortMethod = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.sortMethod !== void 0 ? props.sortMethod : (data, sortBy, descending) => {
    const col = colList.value.find(def => def.name === sortBy);
    if (col === void 0 || col.field === void 0) {
      return data;
    }
    const dir = descending === true ? -1 : 1,
      val = typeof col.field === 'function' ? v => col.field(v) : v => v[col.field];
    return data.sort((a, b) => {
      let A = val(a),
        B = val(b);
      if (col.rawSort !== void 0) {
        return col.rawSort(A, B, a, b) * dir;
      }
      if (A === null || A === void 0) {
        return -1 * dir;
      }
      if (B === null || B === void 0) {
        return 1 * dir;
      }
      if (col.sort !== void 0) {
        // gets called without rows that have null/undefined as value
        // due to the above two statements
        return col.sort(A, B, a, b) * dir;
      }
      if ((0,is/* isNumber */.Et)(A) === true && (0,is/* isNumber */.Et)(B) === true) {
        return (A - B) * dir;
      }
      if ((0,is/* isDate */.$P)(A) === true && (0,is/* isDate */.$P)(B) === true) {
        return sortDate(A, B) * dir;
      }
      if (typeof A === 'boolean' && typeof B === 'boolean') {
        return (A - B) * dir;
      }
      [A, B] = [A, B].map(s => (s + '').toLocaleString().toLowerCase());
      return A < B ? -1 * dir : A === B ? 0 : dir;
    });
  });
  function sort(col /* String(col name) or Object(col definition) */) {
    let sortOrder = props.columnSortOrder;
    if ((0,is/* isObject */.Gv)(col) === true) {
      if (col.sortOrder) {
        sortOrder = col.sortOrder;
      }
      col = col.name;
    } else {
      const def = colList.value.find(def => def.name === col);
      if (def !== void 0 && def.sortOrder) {
        sortOrder = def.sortOrder;
      }
    }
    let {
      sortBy,
      descending
    } = computedPagination.value;
    if (sortBy !== col) {
      sortBy = col;
      descending = sortOrder === 'da';
    } else if (props.binaryStateSort === true) {
      descending = !descending;
    } else if (descending === true) {
      if (sortOrder === 'ad') {
        sortBy = null;
      } else {
        descending = false;
      }
    } else {
      // ascending
      if (sortOrder === 'ad') {
        descending = true;
      } else {
        sortBy = null;
      }
    }
    setPagination({
      sortBy,
      descending,
      page: 1
    });
  }
  return {
    columnToSort,
    computedSortMethod,
    sort
  };
}
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-filter.js

const useTableFilterProps = {
  filter: [String, Object],
  filterMethod: Function
};
function useTableFilter(props, setPagination) {
  const computedFilterMethod = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.filterMethod !== void 0 ? props.filterMethod : (rows, terms, cols, cellValue) => {
    const lowerTerms = terms ? terms.toLowerCase() : '';
    return rows.filter(row => cols.some(col => {
      const val = cellValue(col, row) + '';
      const haystack = val === 'undefined' || val === 'null' ? '' : val.toLowerCase();
      return haystack.indexOf(lowerTerms) !== -1;
    }));
  });
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.filter, () => {
    (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
      setPagination({
        page: 1
      }, true);
    });
  }, {
    deep: true
  });
  return {
    computedFilterMethod
  };
}
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-pagination.js

function samePagination(oldPag, newPag) {
  for (const prop in newPag) {
    if (newPag[prop] !== oldPag[prop]) {
      return false;
    }
  }
  return true;
}
function fixPagination(p) {
  if (p.page < 1) {
    p.page = 1;
  }
  if (p.rowsPerPage !== void 0 && p.rowsPerPage < 1) {
    p.rowsPerPage = 0;
  }
  return p;
}
const useTablePaginationProps = {
  pagination: Object,
  rowsPerPageOptions: {
    type: Array,
    default: () => [5, 7, 10, 15, 20, 25, 50, 0]
  },
  'onUpdate:pagination': [Function, Array]
};
function useTablePaginationState(vm, getCellValue) {
  const {
    props,
    emit
  } = vm;
  const innerPagination = (0,reactivity_esm_bundler/* ref */.KR)(Object.assign({
    sortBy: null,
    descending: false,
    page: 1,
    rowsPerPage: props.rowsPerPageOptions.length !== 0 ? props.rowsPerPageOptions[0] : 5
  }, props.pagination));
  const computedPagination = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const pag = props['onUpdate:pagination'] !== void 0 ? {
      ...innerPagination.value,
      ...props.pagination
    } : innerPagination.value;
    return fixPagination(pag);
  });
  const isServerSide = (0,runtime_core_esm_bundler/* computed */.EW)(() => computedPagination.value.rowsNumber !== void 0);
  function sendServerRequest(pagination) {
    requestServerInteraction({
      pagination,
      filter: props.filter
    });
  }
  function requestServerInteraction(prop = {}) {
    (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
      emit('request', {
        pagination: prop.pagination || computedPagination.value,
        filter: prop.filter || props.filter,
        getCellValue
      });
    });
  }
  function setPagination(val, forceServerRequest) {
    const newPagination = fixPagination({
      ...computedPagination.value,
      ...val
    });
    if (samePagination(computedPagination.value, newPagination) === true) {
      if (isServerSide.value === true && forceServerRequest === true) {
        sendServerRequest(newPagination);
      }
      return;
    }
    if (isServerSide.value === true) {
      sendServerRequest(newPagination);
      return;
    }
    if (props.pagination !== void 0 && props['onUpdate:pagination'] !== void 0) {
      emit('update:pagination', newPagination);
    } else {
      innerPagination.value = newPagination;
    }
  }
  return {
    innerPagination,
    computedPagination,
    isServerSide,
    requestServerInteraction,
    setPagination
  };
}
function useTablePagination(vm, innerPagination, computedPagination, isServerSide, setPagination, filteredSortedRowsNumber) {
  const {
    props,
    emit,
    proxy: {
      $q
    }
  } = vm;
  const computedRowsNumber = (0,runtime_core_esm_bundler/* computed */.EW)(() => isServerSide.value === true ? computedPagination.value.rowsNumber || 0 : filteredSortedRowsNumber.value);
  const firstRowIndex = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const {
      page,
      rowsPerPage
    } = computedPagination.value;
    return (page - 1) * rowsPerPage;
  });
  const lastRowIndex = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const {
      page,
      rowsPerPage
    } = computedPagination.value;
    return page * rowsPerPage;
  });
  const isFirstPage = (0,runtime_core_esm_bundler/* computed */.EW)(() => computedPagination.value.page === 1);
  const pagesNumber = (0,runtime_core_esm_bundler/* computed */.EW)(() => computedPagination.value.rowsPerPage === 0 ? 1 : Math.max(1, Math.ceil(computedRowsNumber.value / computedPagination.value.rowsPerPage)));
  const isLastPage = (0,runtime_core_esm_bundler/* computed */.EW)(() => lastRowIndex.value === 0 ? true : computedPagination.value.page >= pagesNumber.value);
  const computedRowsPerPageOptions = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const opts = props.rowsPerPageOptions.includes(innerPagination.value.rowsPerPage) ? props.rowsPerPageOptions : [innerPagination.value.rowsPerPage].concat(props.rowsPerPageOptions);
    return opts.map(count => ({
      label: count === 0 ? $q.lang.table.allRows : '' + count,
      value: count
    }));
  });
  (0,runtime_core_esm_bundler/* watch */.wB)(pagesNumber, (lastPage, oldLastPage) => {
    if (lastPage === oldLastPage) {
      return;
    }
    const currentPage = computedPagination.value.page;
    if (lastPage && !currentPage) {
      setPagination({
        page: 1
      });
    } else if (lastPage < currentPage) {
      setPagination({
        page: lastPage
      });
    }
  });
  function firstPage() {
    setPagination({
      page: 1
    });
  }
  function prevPage() {
    const {
      page
    } = computedPagination.value;
    if (page > 1) {
      setPagination({
        page: page - 1
      });
    }
  }
  function nextPage() {
    const {
      page,
      rowsPerPage
    } = computedPagination.value;
    if (lastRowIndex.value > 0 && page * rowsPerPage < computedRowsNumber.value) {
      setPagination({
        page: page + 1
      });
    }
  }
  function lastPage() {
    setPagination({
      page: pagesNumber.value
    });
  }
  if (props['onUpdate:pagination'] !== void 0) {
    emit('update:pagination', {
      ...computedPagination.value
    });
  }
  return {
    firstRowIndex,
    lastRowIndex,
    isFirstPage,
    isLastPage,
    pagesNumber,
    computedRowsPerPageOptions,
    computedRowsNumber,
    firstPage,
    prevPage,
    nextPage,
    lastPage
  };
}
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-row-selection.js

const useTableRowSelectionProps = {
  selection: {
    type: String,
    default: 'none',
    validator: v => ['single', 'multiple', 'none'].includes(v)
  },
  selected: {
    type: Array,
    default: () => []
  }
};
const useTableRowSelectionEmits = ['update:selected', 'selection'];
function useTableRowSelection(props, emit, computedRows, getRowKey) {
  const selectedKeys = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const keys = {};
    props.selected.map(getRowKey.value).forEach(key => {
      keys[key] = true;
    });
    return keys;
  });
  const hasSelectionMode = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    return props.selection !== 'none';
  });
  const singleSelection = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    return props.selection === 'single';
  });
  const multipleSelection = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    return props.selection === 'multiple';
  });
  const allRowsSelected = (0,runtime_core_esm_bundler/* computed */.EW)(() => computedRows.value.length !== 0 && computedRows.value.every(row => selectedKeys.value[getRowKey.value(row)] === true));
  const someRowsSelected = (0,runtime_core_esm_bundler/* computed */.EW)(() => allRowsSelected.value !== true && computedRows.value.some(row => selectedKeys.value[getRowKey.value(row)] === true));
  const rowsSelectedNumber = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.selected.length);
  function isRowSelected(key) {
    return selectedKeys.value[key] === true;
  }
  function clearSelection() {
    emit('update:selected', []);
  }
  function updateSelection(keys, rows, added, evt) {
    emit('selection', {
      rows,
      added,
      keys,
      evt
    });
    const payload = singleSelection.value === true ? added === true ? rows : [] : added === true ? props.selected.concat(rows) : props.selected.filter(row => keys.includes(getRowKey.value(row)) === false);
    emit('update:selected', payload);
  }
  return {
    hasSelectionMode,
    singleSelection,
    multipleSelection,
    allRowsSelected,
    someRowsSelected,
    rowsSelectedNumber,
    isRowSelected,
    clearSelection,
    updateSelection
  };
}
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-row-expand.js


function getVal(val) {
  return Array.isArray(val) ? val.slice() : [];
}
const useTableRowExpandProps = {
  expanded: Array // v-model:expanded
};
const useTableRowExpandEmits = ['update:expanded'];
function useTableRowExpand(props, emit) {
  const innerExpanded = (0,reactivity_esm_bundler/* ref */.KR)(getVal(props.expanded));
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.expanded, val => {
    innerExpanded.value = getVal(val);
  });
  function isRowExpanded(key) {
    return innerExpanded.value.includes(key);
  }
  function setExpanded(val) {
    if (props.expanded !== void 0) {
      emit('update:expanded', val);
    } else {
      innerExpanded.value = val;
    }
  }
  function updateExpanded(key, add) {
    const target = innerExpanded.value.slice();
    const index = target.indexOf(key);
    if (add === true) {
      if (index === -1) {
        target.push(key);
        setExpanded(target);
      }
    } else if (index !== -1) {
      target.splice(index, 1);
      setExpanded(target);
    }
  }
  return {
    isRowExpanded,
    setExpanded,
    updateExpanded
  };
}
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/table-column-selection.js


const useTableColumnSelectionProps = {
  visibleColumns: Array
};
function useTableColumnSelection(props, computedPagination, hasSelectionMode) {
  const colList = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    if (props.columns !== void 0) {
      return props.columns;
    }

    // we infer columns from first row
    const row = props.rows[0];
    return row !== void 0 ? Object.keys(row).map(name => ({
      name,
      label: name.toUpperCase(),
      field: name,
      align: (0,is/* isNumber */.Et)(row[name]) ? 'right' : 'left',
      sortable: true
    })) : [];
  });
  const computedCols = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const {
      sortBy,
      descending
    } = computedPagination.value;
    const cols = props.visibleColumns !== void 0 ? colList.value.filter(col => col.required === true || props.visibleColumns.includes(col.name) === true) : colList.value;
    return cols.map(col => {
      const align = col.align || 'right';
      const alignClass = `text-${align}`;
      return {
        ...col,
        align,
        __iconClass: `q-table__sort-icon q-table__sort-icon--${align}`,
        __thClass: alignClass + (col.headerClasses !== void 0 ? ' ' + col.headerClasses : '') + (col.sortable === true ? ' sortable' : '') + (col.name === sortBy ? ` sorted ${descending === true ? 'sort-desc' : ''}` : ''),
        __tdStyle: col.style !== void 0 ? typeof col.style !== 'function' ? () => col.style : col.style : () => null,
        __tdClass: col.classes !== void 0 ? typeof col.classes !== 'function' ? () => alignClass + ' ' + col.classes : row => alignClass + ' ' + col.classes(row) : () => alignClass
      };
    });
  });
  const computedColsMap = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const names = {};
    computedCols.value.forEach(col => {
      names[col.name] = col;
    });
    return names;
  });
  const computedColspan = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    return props.tableColspan !== void 0 ? props.tableColspan : computedCols.value.length + (hasSelectionMode.value === true ? 1 : 0);
  });
  return {
    colList,
    computedCols,
    computedColsMap,
    computedColspan
  };
}
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.inject-obj-prop/inject-obj-prop.js
var inject_obj_prop = __webpack_require__(2453);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/table/QTable.js






















const bottomClass = 'q-table__bottom row items-center';
const virtScrollPassthroughProps = {};
use_virtual_scroll/* commonVirtScrollPropsList */.kP.forEach(p => {
  virtScrollPassthroughProps[p] = {};
});
/* harmony default export */ const QTable = ((0,create/* createComponent */.a0)({
  name: 'QTable',
  props: {
    rows: {
      type: Array,
      required: true
    },
    rowKey: {
      type: [String, Function],
      default: 'id'
    },
    columns: Array,
    loading: Boolean,
    iconFirstPage: String,
    iconPrevPage: String,
    iconNextPage: String,
    iconLastPage: String,
    title: String,
    hideHeader: Boolean,
    grid: Boolean,
    gridHeader: Boolean,
    dense: Boolean,
    flat: Boolean,
    bordered: Boolean,
    square: Boolean,
    separator: {
      type: String,
      default: 'horizontal',
      validator: v => ['horizontal', 'vertical', 'cell', 'none'].includes(v)
    },
    wrapCells: Boolean,
    virtualScroll: Boolean,
    virtualScrollTarget: {},
    ...virtScrollPassthroughProps,
    noDataLabel: String,
    noResultsLabel: String,
    loadingLabel: String,
    selectedRowsLabel: Function,
    rowsPerPageLabel: String,
    paginationLabel: Function,
    color: {
      type: String,
      default: 'grey-8'
    },
    titleClass: [String, Array, Object],
    tableStyle: [String, Array, Object],
    tableClass: [String, Array, Object],
    tableHeaderStyle: [String, Array, Object],
    tableHeaderClass: [String, Array, Object],
    cardContainerClass: [String, Array, Object],
    cardContainerStyle: [String, Array, Object],
    cardStyle: [String, Array, Object],
    cardClass: [String, Array, Object],
    hideBottom: Boolean,
    hideSelectedBanner: Boolean,
    hideNoData: Boolean,
    hidePagination: Boolean,
    onRowClick: Function,
    onRowDblclick: Function,
    onRowContextmenu: Function,
    ...use_dark/* useDarkProps */.C,
    ...use_fullscreen/* useFullscreenProps */.xw,
    ...useTableColumnSelectionProps,
    ...useTableFilterProps,
    ...useTablePaginationProps,
    ...useTableRowExpandProps,
    ...useTableRowSelectionProps,
    ...useTableSortProps
  },
  emits: ['request', 'virtualScroll', ...use_fullscreen/* useFullscreenEmits */.b8, ...useTableRowExpandEmits, ...useTableRowSelectionEmits],
  setup(props, {
    slots,
    emit
  }) {
    const vm = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
    const {
      proxy: {
        $q
      }
    } = vm;
    const isDark = (0,use_dark/* default */.A)(props, $q);
    const {
      inFullscreen,
      toggleFullscreen
    } = (0,use_fullscreen/* default */.Ay)();
    const getRowKey = (0,runtime_core_esm_bundler/* computed */.EW)(() => typeof props.rowKey === 'function' ? props.rowKey : row => row[props.rowKey]);
    const rootRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const virtScrollRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
    const hasVirtScroll = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.grid !== true && props.virtualScroll === true);
    const cardDefaultClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => ' q-table__card' + (isDark.value === true ? ' q-table__card--dark q-dark' : '') + (props.square === true ? ' q-table--square' : '') + (props.flat === true ? ' q-table--flat' : '') + (props.bordered === true ? ' q-table--bordered' : ''));
    const __containerClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => `q-table__container q-table--${props.separator}-separator column no-wrap` + (props.grid === true ? ' q-table--grid' : cardDefaultClass.value) + (isDark.value === true ? ' q-table--dark' : '') + (props.dense === true ? ' q-table--dense' : '') + (props.wrapCells === false ? ' q-table--no-wrap' : '') + (inFullscreen.value === true ? ' fullscreen scroll' : ''));
    const containerClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => __containerClass.value + (props.loading === true ? ' q-table--loading' : ''));
    (0,runtime_core_esm_bundler/* watch */.wB)(() => props.tableStyle + props.tableClass + props.tableHeaderStyle + props.tableHeaderClass + __containerClass.value, () => {
      hasVirtScroll.value === true && virtScrollRef.value !== null && virtScrollRef.value.reset();
    });
    const {
      innerPagination,
      computedPagination,
      isServerSide,
      requestServerInteraction,
      setPagination
    } = useTablePaginationState(vm, getCellValue);
    const {
      computedFilterMethod
    } = useTableFilter(props, setPagination);
    const {
      isRowExpanded,
      setExpanded,
      updateExpanded
    } = useTableRowExpand(props, emit);
    const filteredSortedRows = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      let rows = props.rows;
      if (isServerSide.value === true || rows.length === 0) {
        return rows;
      }
      const {
        sortBy,
        descending
      } = computedPagination.value;
      if (props.filter) {
        rows = computedFilterMethod.value(rows, props.filter, computedCols.value, getCellValue);
      }
      if (columnToSort.value !== null) {
        rows = computedSortMethod.value(props.rows === rows ? rows.slice() : rows, sortBy, descending);
      }
      return rows;
    });
    const filteredSortedRowsNumber = (0,runtime_core_esm_bundler/* computed */.EW)(() => filteredSortedRows.value.length);
    const computedRows = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      let rows = filteredSortedRows.value;
      if (isServerSide.value === true) {
        return rows;
      }
      const {
        rowsPerPage
      } = computedPagination.value;
      if (rowsPerPage !== 0) {
        if (firstRowIndex.value === 0 && props.rows !== rows) {
          if (rows.length > lastRowIndex.value) {
            rows = rows.slice(0, lastRowIndex.value);
          }
        } else {
          rows = rows.slice(firstRowIndex.value, lastRowIndex.value);
        }
      }
      return rows;
    });
    const {
      hasSelectionMode,
      singleSelection,
      multipleSelection,
      allRowsSelected,
      someRowsSelected,
      rowsSelectedNumber,
      isRowSelected,
      clearSelection,
      updateSelection
    } = useTableRowSelection(props, emit, computedRows, getRowKey);
    const {
      colList,
      computedCols,
      computedColsMap,
      computedColspan
    } = useTableColumnSelection(props, computedPagination, hasSelectionMode);
    const {
      columnToSort,
      computedSortMethod,
      sort
    } = useTableSort(props, computedPagination, colList, setPagination);
    const {
      firstRowIndex,
      lastRowIndex,
      isFirstPage,
      isLastPage,
      pagesNumber,
      computedRowsPerPageOptions,
      computedRowsNumber,
      firstPage,
      prevPage,
      nextPage,
      lastPage
    } = useTablePagination(vm, innerPagination, computedPagination, isServerSide, setPagination, filteredSortedRowsNumber);
    const nothingToDisplay = (0,runtime_core_esm_bundler/* computed */.EW)(() => computedRows.value.length === 0);
    const virtProps = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const acc = {};
      use_virtual_scroll/* commonVirtScrollPropsList */.kP.forEach(p => {
        acc[p] = props[p];
      });
      if (acc.virtualScrollItemSize === void 0) {
        acc.virtualScrollItemSize = props.dense === true ? 28 : 48;
      }
      return acc;
    });
    function resetVirtualScroll() {
      hasVirtScroll.value === true && virtScrollRef.value.reset();
    }
    function getBody() {
      if (props.grid === true) {
        return getGridBody();
      }
      const header = props.hideHeader !== true ? getTHead : null;
      if (hasVirtScroll.value === true) {
        const topRow = slots['top-row'];
        const bottomRow = slots['bottom-row'];
        const virtSlots = {
          default: props => getTBodyTR(props.item, slots.body, props.index)
        };
        if (topRow !== void 0) {
          const topContent = (0,runtime_core_esm_bundler.h)('tbody', topRow({
            cols: computedCols.value
          }));
          virtSlots.before = header === null ? () => topContent : () => [header()].concat(topContent);
        } else if (header !== null) {
          virtSlots.before = header;
        }
        if (bottomRow !== void 0) {
          virtSlots.after = () => (0,runtime_core_esm_bundler.h)('tbody', bottomRow({
            cols: computedCols.value
          }));
        }
        return (0,runtime_core_esm_bundler.h)(QVirtualScroll, {
          ref: virtScrollRef,
          class: props.tableClass,
          style: props.tableStyle,
          ...virtProps.value,
          scrollTarget: props.virtualScrollTarget,
          items: computedRows.value,
          type: '__qtable',
          tableColspan: computedColspan.value,
          onVirtualScroll: onVScroll
        }, virtSlots);
      }
      const child = [getTBody()];
      if (header !== null) {
        child.unshift(header());
      }
      return get_table_middle({
        class: ['q-table__middle scroll', props.tableClass],
        style: props.tableStyle
      }, child);
    }
    function scrollTo(toIndex, edge) {
      if (virtScrollRef.value !== null) {
        virtScrollRef.value.scrollTo(toIndex, edge);
        return;
      }
      toIndex = parseInt(toIndex, 10);
      const rowEl = rootRef.value.querySelector(`tbody tr:nth-of-type(${toIndex + 1})`);
      if (rowEl !== null) {
        const scrollTarget = rootRef.value.querySelector('.q-table__middle.scroll');
        const offsetTop = rowEl.offsetTop - props.virtualScrollStickySizeStart;
        const direction = offsetTop < scrollTarget.scrollTop ? 'decrease' : 'increase';
        scrollTarget.scrollTop = offsetTop;
        emit('virtualScroll', {
          index: toIndex,
          from: 0,
          to: innerPagination.value.rowsPerPage - 1,
          direction
        });
      }
    }
    function onVScroll(info) {
      emit('virtualScroll', info);
    }
    function getProgress() {
      return [(0,runtime_core_esm_bundler.h)(QLinearProgress/* default */.A, {
        class: 'q-table__linear-progress',
        color: props.color,
        dark: isDark.value,
        indeterminate: true,
        trackColor: 'transparent'
      })];
    }
    function getTBodyTR(row, bodySlot, pageIndex) {
      const key = getRowKey.value(row),
        selected = isRowSelected(key);
      if (bodySlot !== void 0) {
        return bodySlot(getBodyScope({
          key,
          row,
          pageIndex,
          __trClass: selected ? 'selected' : ''
        }));
      }
      const bodyCell = slots['body-cell'],
        child = computedCols.value.map(col => {
          const bodyCellCol = slots[`body-cell-${col.name}`],
            slot = bodyCellCol !== void 0 ? bodyCellCol : bodyCell;
          return slot !== void 0 ? slot(getBodyCellScope({
            key,
            row,
            pageIndex,
            col
          })) : (0,runtime_core_esm_bundler.h)('td', {
            class: col.__tdClass(row),
            style: col.__tdStyle(row)
          }, getCellValue(col, row));
        });
      if (hasSelectionMode.value === true) {
        const slot = slots['body-selection'];
        const content = slot !== void 0 ? slot(getBodySelectionScope({
          key,
          row,
          pageIndex
        })) : [(0,runtime_core_esm_bundler.h)(QCheckbox/* default */.A, {
          modelValue: selected,
          color: props.color,
          dark: isDark.value,
          dense: props.dense,
          'onUpdate:modelValue': (adding, evt) => {
            updateSelection([key], [row], adding, evt);
          }
        })];
        child.unshift((0,runtime_core_esm_bundler.h)('td', {
          class: 'q-table--col-auto-width'
        }, content));
      }
      const data = {
        key,
        class: {
          selected
        }
      };
      if (props.onRowClick !== void 0) {
        data.class['cursor-pointer'] = true;
        data.onClick = evt => {
          emit('rowClick', evt, row, pageIndex);
        };
      }
      if (props.onRowDblclick !== void 0) {
        data.class['cursor-pointer'] = true;
        data.onDblclick = evt => {
          emit('rowDblclick', evt, row, pageIndex);
        };
      }
      if (props.onRowContextmenu !== void 0) {
        data.class['cursor-pointer'] = true;
        data.onContextmenu = evt => {
          emit('rowContextmenu', evt, row, pageIndex);
        };
      }
      return (0,runtime_core_esm_bundler.h)('tr', data, child);
    }
    function getTBody() {
      const body = slots.body,
        topRow = slots['top-row'],
        bottomRow = slots['bottom-row'];
      let child = computedRows.value.map((row, pageIndex) => getTBodyTR(row, body, pageIndex));
      if (topRow !== void 0) {
        child = topRow({
          cols: computedCols.value
        }).concat(child);
      }
      if (bottomRow !== void 0) {
        child = child.concat(bottomRow({
          cols: computedCols.value
        }));
      }
      return (0,runtime_core_esm_bundler.h)('tbody', child);
    }
    function getBodyScope(data) {
      injectBodyCommonScope(data);
      data.cols = data.cols.map(col => (0,inject_obj_prop/* injectProp */.$)({
        ...col
      }, 'value', () => getCellValue(col, data.row)));
      return data;
    }
    function getBodyCellScope(data) {
      injectBodyCommonScope(data);
      (0,inject_obj_prop/* injectProp */.$)(data, 'value', () => getCellValue(data.col, data.row));
      return data;
    }
    function getBodySelectionScope(data) {
      injectBodyCommonScope(data);
      return data;
    }
    function injectBodyCommonScope(data) {
      Object.assign(data, {
        cols: computedCols.value,
        colsMap: computedColsMap.value,
        sort,
        rowIndex: firstRowIndex.value + data.pageIndex,
        color: props.color,
        dark: isDark.value,
        dense: props.dense
      });
      hasSelectionMode.value === true && (0,inject_obj_prop/* injectProp */.$)(data, 'selected', () => isRowSelected(data.key), (adding, evt) => {
        updateSelection([data.key], [data.row], adding, evt);
      });
      (0,inject_obj_prop/* injectProp */.$)(data, 'expand', () => isRowExpanded(data.key), adding => {
        updateExpanded(data.key, adding);
      });
    }
    function getCellValue(col, row) {
      const val = typeof col.field === 'function' ? col.field(row) : row[col.field];
      return col.format !== void 0 ? col.format(val, row) : val;
    }
    const marginalsScope = (0,runtime_core_esm_bundler/* computed */.EW)(() => ({
      pagination: computedPagination.value,
      pagesNumber: pagesNumber.value,
      isFirstPage: isFirstPage.value,
      isLastPage: isLastPage.value,
      firstPage,
      prevPage,
      nextPage,
      lastPage,
      inFullscreen: inFullscreen.value,
      toggleFullscreen
    }));
    function getTopDiv() {
      const top = slots.top,
        topLeft = slots['top-left'],
        topRight = slots['top-right'],
        topSelection = slots['top-selection'],
        hasSelection = hasSelectionMode.value === true && topSelection !== void 0 && rowsSelectedNumber.value > 0,
        topClass = 'q-table__top relative-position row items-center';
      if (top !== void 0) {
        return (0,runtime_core_esm_bundler.h)('div', {
          class: topClass
        }, [top(marginalsScope.value)]);
      }
      let child;
      if (hasSelection === true) {
        child = topSelection(marginalsScope.value).slice();
      } else {
        child = [];
        if (topLeft !== void 0) {
          child.push((0,runtime_core_esm_bundler.h)('div', {
            class: 'q-table__control'
          }, [topLeft(marginalsScope.value)]));
        } else if (props.title) {
          child.push((0,runtime_core_esm_bundler.h)('div', {
            class: 'q-table__control'
          }, [(0,runtime_core_esm_bundler.h)('div', {
            class: ['q-table__title', props.titleClass]
          }, props.title)]));
        }
      }
      if (topRight !== void 0) {
        child.push((0,runtime_core_esm_bundler.h)('div', {
          class: 'q-table__separator col'
        }));
        child.push((0,runtime_core_esm_bundler.h)('div', {
          class: 'q-table__control'
        }, [topRight(marginalsScope.value)]));
      }
      if (child.length === 0) {
        return;
      }
      return (0,runtime_core_esm_bundler.h)('div', {
        class: topClass
      }, child);
    }
    const headerSelectedValue = (0,runtime_core_esm_bundler/* computed */.EW)(() => someRowsSelected.value === true ? null : allRowsSelected.value);
    function getTHead() {
      const child = getTHeadTR();
      if (props.loading === true && slots.loading === void 0) {
        child.push((0,runtime_core_esm_bundler.h)('tr', {
          class: 'q-table__progress'
        }, [(0,runtime_core_esm_bundler.h)('th', {
          class: 'relative-position',
          colspan: computedColspan.value
        }, getProgress())]));
      }
      return (0,runtime_core_esm_bundler.h)('thead', child);
    }
    function getTHeadTR() {
      const header = slots.header,
        headerCell = slots['header-cell'];
      if (header !== void 0) {
        return header(getHeaderScope({
          header: true
        })).slice();
      }
      const child = computedCols.value.map(col => {
        const headerCellCol = slots[`header-cell-${col.name}`],
          slot = headerCellCol !== void 0 ? headerCellCol : headerCell,
          props = getHeaderScope({
            col
          });
        return slot !== void 0 ? slot(props) : (0,runtime_core_esm_bundler.h)(QTh, {
          key: col.name,
          props
        }, () => col.label);
      });
      if (singleSelection.value === true && props.grid !== true) {
        child.unshift((0,runtime_core_esm_bundler.h)('th', {
          class: 'q-table--col-auto-width'
        }, ' '));
      } else if (multipleSelection.value === true) {
        const slot = slots['header-selection'];
        const content = slot !== void 0 ? slot(getHeaderScope({})) : [(0,runtime_core_esm_bundler.h)(QCheckbox/* default */.A, {
          color: props.color,
          modelValue: headerSelectedValue.value,
          dark: isDark.value,
          dense: props.dense,
          'onUpdate:modelValue': onMultipleSelectionSet
        })];
        child.unshift((0,runtime_core_esm_bundler.h)('th', {
          class: 'q-table--col-auto-width'
        }, content));
      }
      return [(0,runtime_core_esm_bundler.h)('tr', {
        class: props.tableHeaderClass,
        style: props.tableHeaderStyle
      }, child)];
    }
    function getHeaderScope(data) {
      Object.assign(data, {
        cols: computedCols.value,
        sort,
        colsMap: computedColsMap.value,
        color: props.color,
        dark: isDark.value,
        dense: props.dense
      });
      if (multipleSelection.value === true) {
        (0,inject_obj_prop/* injectProp */.$)(data, 'selected', () => headerSelectedValue.value, onMultipleSelectionSet);
      }
      return data;
    }
    function onMultipleSelectionSet(val) {
      if (someRowsSelected.value === true) {
        val = false;
      }
      updateSelection(computedRows.value.map(getRowKey.value), computedRows.value, val);
    }
    const navIcon = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      const ico = [props.iconFirstPage || $q.iconSet.table.firstPage, props.iconPrevPage || $q.iconSet.table.prevPage, props.iconNextPage || $q.iconSet.table.nextPage, props.iconLastPage || $q.iconSet.table.lastPage];
      return $q.lang.rtl === true ? ico.reverse() : ico;
    });
    function getBottomDiv() {
      if (props.hideBottom === true) {
        return;
      }
      if (nothingToDisplay.value === true) {
        if (props.hideNoData === true) {
          return;
        }
        const message = props.loading === true ? props.loadingLabel || $q.lang.table.loading : props.filter ? props.noResultsLabel || $q.lang.table.noResults : props.noDataLabel || $q.lang.table.noData;
        const noData = slots['no-data'];
        const children = noData !== void 0 ? [noData({
          message,
          icon: $q.iconSet.table.warning,
          filter: props.filter
        })] : [(0,runtime_core_esm_bundler.h)(QIcon/* default */.A, {
          class: 'q-table__bottom-nodata-icon',
          name: $q.iconSet.table.warning
        }), message];
        return (0,runtime_core_esm_bundler.h)('div', {
          class: bottomClass + ' q-table__bottom--nodata'
        }, children);
      }
      const bottom = slots.bottom;
      if (bottom !== void 0) {
        return (0,runtime_core_esm_bundler.h)('div', {
          class: bottomClass
        }, [bottom(marginalsScope.value)]);
      }
      const child = props.hideSelectedBanner !== true && hasSelectionMode.value === true && rowsSelectedNumber.value > 0 ? [(0,runtime_core_esm_bundler.h)('div', {
        class: 'q-table__control'
      }, [(0,runtime_core_esm_bundler.h)('div', [(props.selectedRowsLabel || $q.lang.table.selectedRecords)(rowsSelectedNumber.value)])])] : [];
      if (props.hidePagination !== true) {
        return (0,runtime_core_esm_bundler.h)('div', {
          class: bottomClass + ' justify-end'
        }, getPaginationDiv(child));
      }
      if (child.length !== 0) {
        return (0,runtime_core_esm_bundler.h)('div', {
          class: bottomClass
        }, child);
      }
    }
    function onPagSelection(pag) {
      setPagination({
        page: 1,
        rowsPerPage: pag.value
      });
    }
    function getPaginationDiv(child) {
      let control;
      const {
          rowsPerPage
        } = computedPagination.value,
        paginationLabel = props.paginationLabel || $q.lang.table.pagination,
        paginationSlot = slots.pagination,
        hasOpts = props.rowsPerPageOptions.length > 1;
      child.push((0,runtime_core_esm_bundler.h)('div', {
        class: 'q-table__separator col'
      }));
      if (hasOpts === true) {
        child.push((0,runtime_core_esm_bundler.h)('div', {
          class: 'q-table__control'
        }, [(0,runtime_core_esm_bundler.h)('span', {
          class: 'q-table__bottom-item'
        }, [props.rowsPerPageLabel || $q.lang.table.recordsPerPage]), (0,runtime_core_esm_bundler.h)(QSelect/* default */.A, {
          class: 'q-table__select inline q-table__bottom-item',
          color: props.color,
          modelValue: rowsPerPage,
          options: computedRowsPerPageOptions.value,
          displayValue: rowsPerPage === 0 ? $q.lang.table.allRows : rowsPerPage,
          dark: isDark.value,
          borderless: true,
          dense: true,
          optionsDense: true,
          optionsCover: true,
          'onUpdate:modelValue': onPagSelection
        })]));
      }
      if (paginationSlot !== void 0) {
        control = paginationSlot(marginalsScope.value);
      } else {
        control = [(0,runtime_core_esm_bundler.h)('span', rowsPerPage !== 0 ? {
          class: 'q-table__bottom-item'
        } : {}, [rowsPerPage ? paginationLabel(firstRowIndex.value + 1, Math.min(lastRowIndex.value, computedRowsNumber.value), computedRowsNumber.value) : paginationLabel(1, filteredSortedRowsNumber.value, computedRowsNumber.value)])];
        if (rowsPerPage !== 0 && pagesNumber.value > 1) {
          const btnProps = {
            color: props.color,
            round: true,
            dense: true,
            flat: true
          };
          if (props.dense === true) {
            btnProps.size = 'sm';
          }
          pagesNumber.value > 2 && control.push((0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
            key: 'pgFirst',
            ...btnProps,
            icon: navIcon.value[0],
            disable: isFirstPage.value,
            onClick: firstPage
          }));
          control.push((0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
            key: 'pgPrev',
            ...btnProps,
            icon: navIcon.value[1],
            disable: isFirstPage.value,
            onClick: prevPage
          }), (0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
            key: 'pgNext',
            ...btnProps,
            icon: navIcon.value[2],
            disable: isLastPage.value,
            onClick: nextPage
          }));
          pagesNumber.value > 2 && control.push((0,runtime_core_esm_bundler.h)(QBtn/* default */.A, {
            key: 'pgLast',
            ...btnProps,
            icon: navIcon.value[3],
            disable: isLastPage.value,
            onClick: lastPage
          }));
        }
      }
      child.push((0,runtime_core_esm_bundler.h)('div', {
        class: 'q-table__control'
      }, control));
      return child;
    }
    function getGridHeader() {
      const child = props.gridHeader === true ? [(0,runtime_core_esm_bundler.h)('table', {
        class: 'q-table'
      }, [getTHead(runtime_core_esm_bundler.h)])] : props.loading === true && slots.loading === void 0 ? getProgress(runtime_core_esm_bundler.h) : void 0;
      return (0,runtime_core_esm_bundler.h)('div', {
        class: 'q-table__middle'
      }, child);
    }
    function getGridBody() {
      const item = slots.item !== void 0 ? slots.item : scope => {
        const child = scope.cols.map(col => (0,runtime_core_esm_bundler.h)('div', {
          class: 'q-table__grid-item-row'
        }, [(0,runtime_core_esm_bundler.h)('div', {
          class: 'q-table__grid-item-title'
        }, [col.label]), (0,runtime_core_esm_bundler.h)('div', {
          class: 'q-table__grid-item-value'
        }, [col.value])]));
        if (hasSelectionMode.value === true) {
          const slot = slots['body-selection'];
          const content = slot !== void 0 ? slot(scope) : [(0,runtime_core_esm_bundler.h)(QCheckbox/* default */.A, {
            modelValue: scope.selected,
            color: props.color,
            dark: isDark.value,
            dense: props.dense,
            'onUpdate:modelValue': (adding, evt) => {
              updateSelection([scope.key], [scope.row], adding, evt);
            }
          })];
          child.unshift((0,runtime_core_esm_bundler.h)('div', {
            class: 'q-table__grid-item-row'
          }, content), (0,runtime_core_esm_bundler.h)(QSeparator/* default */.A, {
            dark: isDark.value
          }));
        }
        const data = {
          class: ['q-table__grid-item-card' + cardDefaultClass.value, props.cardClass],
          style: props.cardStyle
        };
        if (props.onRowClick !== void 0 || props.onRowDblclick !== void 0) {
          data.class[0] += ' cursor-pointer';
          if (props.onRowClick !== void 0) {
            data.onClick = evt => {
              emit('RowClick', evt, scope.row, scope.pageIndex);
            };
          }
          if (props.onRowDblclick !== void 0) {
            data.onDblclick = evt => {
              emit('RowDblclick', evt, scope.row, scope.pageIndex);
            };
          }
        }
        return (0,runtime_core_esm_bundler.h)('div', {
          class: 'q-table__grid-item col-xs-12 col-sm-6 col-md-4 col-lg-3' + (scope.selected === true ? ' q-table__grid-item--selected' : '')
        }, [(0,runtime_core_esm_bundler.h)('div', data, child)]);
      };
      return (0,runtime_core_esm_bundler.h)('div', {
        class: ['q-table__grid-content row', props.cardContainerClass],
        style: props.cardContainerStyle
      }, computedRows.value.map((row, pageIndex) => {
        return item(getBodyScope({
          key: getRowKey.value(row),
          row,
          pageIndex
        }));
      }));
    }

    // expose public methods and needed computed props
    Object.assign(vm.proxy, {
      requestServerInteraction,
      setPagination,
      firstPage,
      prevPage,
      nextPage,
      lastPage,
      isRowSelected,
      clearSelection,
      isRowExpanded,
      setExpanded,
      sort,
      resetVirtualScroll,
      scrollTo,
      getCellValue
    });
    (0,inject_obj_prop/* injectMultipleProps */.M)(vm.proxy, {
      filteredSortedRows: () => filteredSortedRows.value,
      computedRows: () => computedRows.value,
      computedRowsNumber: () => computedRowsNumber.value
    });
    return () => {
      const child = [getTopDiv()];
      const data = {
        ref: rootRef,
        class: containerClass.value
      };
      if (props.grid === true) {
        child.push(getGridHeader());
      } else {
        Object.assign(data, {
          class: [data.class, props.cardClass],
          style: props.cardStyle
        });
      }
      child.push(getBody(), getBottomDiv());
      if (props.loading === true && slots.loading !== void 0) {
        child.push(slots.loading());
      }
      return (0,runtime_core_esm_bundler.h)('div', data, child);
    };
  }
}));

/***/ }),

/***/ 5262:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5139);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QTd',
  props: {
    props: Object,
    autoWidth: Boolean,
    noHover: Boolean
  },
  setup(props, {
    slots
  }) {
    const vm = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .getCurrentInstance */ .nI)();
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => 'q-td' + (props.autoWidth === true ? ' q-table--col-auto-width' : '') + (props.noHover === true ? ' q-td--no-hover' : '') + ' ');
    return () => {
      if (props.props === void 0) {
        return (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('td', {
          class: classes.value
        }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__/* .hSlot */ .zm)(slots.default));
      }
      const name = vm.vnode.key;
      const col = (props.props.colsMap !== void 0 ? props.props.colsMap[name] : null) || props.props.col;
      if (col === void 0) return;
      const {
        row
      } = props.props;
      return (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('td', {
        class: classes.value + col.__tdClass(row),
        style: col.__tdStyle(row)
      }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__/* .hSlot */ .zm)(slots.default));
    };
  }
}));

/***/ }),

/***/ 4488:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5139);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QTr',
  props: {
    props: Object,
    noHover: Boolean
  },
  setup(props, {
    slots
  }) {
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => 'q-tr' + (props.props === void 0 || props.props.header === true ? '' : ' ' + props.props.__trClass) + (props.noHover === true ? ' q-tr--no-hover' : ''));
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('tr', {
      class: classes.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 878:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ QRouteTab)
});

// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-router-link/use-router-link.js
var use_router_link = __webpack_require__(7502);
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.push.js
var es_array_push = __webpack_require__(239);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(8734);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/icon/QIcon.js
var QIcon = __webpack_require__(492);
// EXTERNAL MODULE: ./node_modules/quasar/src/directives/ripple/Ripple.js + 1 modules
var Ripple = __webpack_require__(9626);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.render/render.js
var render = __webpack_require__(5139);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.keyboard/key-composition.js
var key_composition = __webpack_require__(2906);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.symbols/symbols.js
var symbols = __webpack_require__(7973);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/uid/uid.js
var uid = __webpack_require__(5192);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/is/is.js
var is = __webpack_require__(1054);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/tabs/use-tab.js










let id = 0;
const useTabEmits = ['click', 'keydown'];
const useTabProps = {
  icon: String,
  label: [Number, String],
  alert: [Boolean, String],
  alertIcon: String,
  name: {
    type: [Number, String],
    default: () => `t_${id++}`
  },
  noCaps: Boolean,
  tabindex: [String, Number],
  disable: Boolean,
  contentClass: String,
  ripple: {
    type: [Boolean, Object],
    default: true
  }
};
/* harmony default export */ function use_tab(props, slots, emit, routeData) {
  const $tabs = (0,runtime_core_esm_bundler/* inject */.WQ)(symbols/* tabsKey */.Uv, symbols/* emptyRenderFn */.U_);
  if ($tabs === symbols/* emptyRenderFn */.U_) {
    console.error('QTab/QRouteTab component needs to be child of QTabs');
    return symbols/* emptyRenderFn */.U_;
  }
  const {
    proxy
  } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
  const blurTargetRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
  const rootRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
  const tabIndicatorRef = (0,reactivity_esm_bundler/* ref */.KR)(null);
  const ripple = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.disable === true || props.ripple === false ? false : Object.assign({
    keyCodes: [13, 32],
    early: true
  }, props.ripple === true ? {} : props.ripple));
  const isActive = (0,runtime_core_esm_bundler/* computed */.EW)(() => $tabs.currentModel.value === props.name);
  const classes = (0,runtime_core_esm_bundler/* computed */.EW)(() => 'q-tab relative-position self-stretch flex flex-center text-center' + (isActive.value === true ? ' q-tab--active' + ($tabs.tabProps.value.activeClass ? ' ' + $tabs.tabProps.value.activeClass : '') + ($tabs.tabProps.value.activeColor ? ` text-${$tabs.tabProps.value.activeColor}` : '') + ($tabs.tabProps.value.activeBgColor ? ` bg-${$tabs.tabProps.value.activeBgColor}` : '') : ' q-tab--inactive') + (props.icon && props.label && $tabs.tabProps.value.inlineLabel === false ? ' q-tab--full' : '') + (props.noCaps === true || $tabs.tabProps.value.noCaps === true ? ' q-tab--no-caps' : '') + (props.disable === true ? ' disabled' : ' q-focusable q-hoverable cursor-pointer') + (routeData !== void 0 ? routeData.linkClass.value : ''));
  const innerClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => 'q-tab__content self-stretch flex-center relative-position q-anchor--skip non-selectable ' + ($tabs.tabProps.value.inlineLabel === true ? 'row no-wrap q-tab__content--inline' : 'column') + (props.contentClass !== void 0 ? ` ${props.contentClass}` : ''));
  const tabIndex = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.disable === true || $tabs.hasFocus.value === true || isActive.value === false && $tabs.hasActiveTab.value === true ? -1 : props.tabindex || 0);
  function onClick(e, keyboard) {
    if (keyboard !== true && blurTargetRef.value !== null) {
      blurTargetRef.value.focus();
    }
    if (props.disable === true) {
      // we should hinder native navigation though
      if (routeData !== void 0 && routeData.hasRouterLink.value === true) {
        (0,event_event/* stopAndPrevent */.Gu)(e);
      }
      return;
    }

    // do we have a QTab?
    if (routeData === void 0) {
      $tabs.updateModel({
        name: props.name
      });
      emit('click', e);
      return;
    }
    if (routeData.hasRouterLink.value === true) {
      const go = (opts = {}) => {
        // if requiring to go to another route, then we
        // let the QTabs route watcher do its job,
        // otherwise directly select this
        let hardError;
        const reqId = opts.to === void 0 || (0,is/* isDeepEqual */.Hv)(opts.to, props.to) === true ? $tabs.avoidRouteWatcher = (0,uid/* default */.A)() : null;
        return routeData.navigateToRouterLink(e, {
          ...opts,
          returnRouterError: true
        }).catch(err => {
          hardError = err;
        }).then(softError => {
          if (reqId === $tabs.avoidRouteWatcher) {
            $tabs.avoidRouteWatcher = false;

            // if we don't have any hard errors or any soft errors, except for
            // when navigating to the same route (on all other soft errors,
            // like when navigation was aborted in a nav guard, we don't activate this tab)
            if (hardError === void 0 && (softError === void 0 || softError.message !== void 0 && softError.message.startsWith('Avoided redundant navigation') === true)) {
              $tabs.updateModel({
                name: props.name
              });
            }
          }
          if (opts.returnRouterError === true) {
            return hardError !== void 0 ? Promise.reject(hardError) : softError;
          }
        });
      };
      emit('click', e, go);
      e.defaultPrevented !== true && go();
      return;
    }
    emit('click', e);
  }
  function onKeydown(e) {
    if ((0,key_composition/* isKeyCode */.Dv)(e, [13, 32])) {
      onClick(e, true);
    } else if ((0,key_composition/* shouldIgnoreKey */.JL)(e) !== true && e.keyCode >= 35 && e.keyCode <= 40 && e.altKey !== true && e.metaKey !== true) {
      $tabs.onKbdNavigate(e.keyCode, proxy.$el) === true && (0,event_event/* stopAndPrevent */.Gu)(e);
    }
    emit('keydown', e);
  }
  function getContent() {
    const narrow = $tabs.tabProps.value.narrowIndicator,
      content = [],
      indicator = (0,runtime_core_esm_bundler.h)('div', {
        ref: tabIndicatorRef,
        class: ['q-tab__indicator', $tabs.tabProps.value.indicatorClass]
      });
    props.icon !== void 0 && content.push((0,runtime_core_esm_bundler.h)(QIcon/* default */.A, {
      class: 'q-tab__icon',
      name: props.icon
    }));
    props.label !== void 0 && content.push((0,runtime_core_esm_bundler.h)('div', {
      class: 'q-tab__label'
    }, props.label));
    props.alert !== false && content.push(props.alertIcon !== void 0 ? (0,runtime_core_esm_bundler.h)(QIcon/* default */.A, {
      class: 'q-tab__alert-icon',
      color: props.alert !== true ? props.alert : void 0,
      name: props.alertIcon
    }) : (0,runtime_core_esm_bundler.h)('div', {
      class: 'q-tab__alert' + (props.alert !== true ? ` text-${props.alert}` : '')
    }));
    narrow === true && content.push(indicator);
    const node = [(0,runtime_core_esm_bundler.h)('div', {
      class: 'q-focus-helper',
      tabindex: -1,
      ref: blurTargetRef
    }), (0,runtime_core_esm_bundler.h)('div', {
      class: innerClass.value
    }, (0,render/* hMergeSlot */.Hp)(slots.default, content))];
    narrow === false && node.push(indicator);
    return node;
  }
  const tabData = {
    name: (0,runtime_core_esm_bundler/* computed */.EW)(() => props.name),
    rootRef,
    tabIndicatorRef,
    routeData
  };
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(() => {
    $tabs.unregisterTab(tabData);
  });
  (0,runtime_core_esm_bundler/* onMounted */.sV)(() => {
    $tabs.registerTab(tabData);
  });
  function renderTab(tag, customData) {
    const data = {
      ref: rootRef,
      class: classes.value,
      tabindex: tabIndex.value,
      role: 'tab',
      'aria-selected': isActive.value === true ? 'true' : 'false',
      'aria-disabled': props.disable === true ? 'true' : void 0,
      onClick,
      onKeydown,
      ...customData
    };
    return (0,runtime_core_esm_bundler/* withDirectives */.bo)((0,runtime_core_esm_bundler.h)(tag, data, getContent()), [[Ripple/* default */.A, ripple.value]]);
  }
  return {
    renderTab,
    $tabs
  };
}
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
;// CONCATENATED MODULE: ./node_modules/quasar/src/components/tabs/QRouteTab.js




/* harmony default export */ const QRouteTab = ((0,create/* createComponent */.a0)({
  name: 'QRouteTab',
  props: {
    ...use_router_link/* useRouterLinkProps */.Ji,
    ...useTabProps
  },
  emits: useTabEmits,
  setup(props, {
    slots,
    emit
  }) {
    const routeData = (0,use_router_link/* default */.Ay)({
      useDisableForRouterLinkProps: false
    });
    const {
      renderTab,
      $tabs
    } = use_tab(props, slots, emit, {
      exact: (0,runtime_core_esm_bundler/* computed */.EW)(() => props.exact),
      ...routeData
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(() => `${props.name} | ${props.exact} | ${(routeData.resolvedLink.value || {}).href}`, () => {
      $tabs.verifyRouteModel();
    });
    return () => renderTab(routeData.linkTag.value, routeData.linkAttrs.value);
  }
}));

/***/ }),

/***/ 2980:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8734);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(492);
/* harmony import */ var _resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1096);
/* harmony import */ var _composables_use_tick_use_tick_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6019);
/* harmony import */ var _composables_use_timeout_use_timeout_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4667);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(5139);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(7973);
/* harmony import */ var _utils_private_rtl_rtl_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4897);










function getIndicatorClass(color, top, vertical) {
  const pos = vertical === true ? ['left', 'right'] : ['top', 'bottom'];
  return `absolute-${top === true ? pos[0] : pos[1]}${color ? ` text-${color}` : ''}`;
}
const alignValues = ['left', 'center', 'right', 'justify'];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_6__/* .createComponent */ .a0)({
  name: 'QTabs',
  props: {
    modelValue: [Number, String],
    align: {
      type: String,
      default: 'center',
      validator: v => alignValues.includes(v)
    },
    breakpoint: {
      type: [String, Number],
      default: 600
    },
    vertical: Boolean,
    shrink: Boolean,
    stretch: Boolean,
    activeClass: String,
    activeColor: String,
    activeBgColor: String,
    indicatorColor: String,
    leftIcon: String,
    rightIcon: String,
    outsideArrows: Boolean,
    mobileArrows: Boolean,
    switchIndicator: Boolean,
    narrowIndicator: Boolean,
    inlineLabel: Boolean,
    noCaps: Boolean,
    dense: Boolean,
    contentClass: String,
    'onUpdate:modelValue': [Function, Array]
  },
  setup(props, {
    slots,
    emit
  }) {
    const {
      proxy
    } = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .getCurrentInstance */ .nI)();
    const {
      $q
    } = proxy;
    const {
      registerTick: registerScrollTick
    } = (0,_composables_use_tick_use_tick_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A)();
    const {
      registerTick: registerUpdateArrowsTick
    } = (0,_composables_use_tick_use_tick_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A)();
    const {
      registerTick: registerAnimateTick
    } = (0,_composables_use_tick_use_tick_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A)();
    const {
      registerTimeout: registerFocusTimeout,
      removeTimeout: removeFocusTimeout
    } = (0,_composables_use_timeout_use_timeout_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A)();
    const {
      registerTimeout: registerScrollToTabTimeout,
      removeTimeout: removeScrollToTabTimeout
    } = (0,_composables_use_timeout_use_timeout_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A)();
    const rootRef = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(null);
    const contentRef = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(null);
    const currentModel = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(props.modelValue);
    const scrollable = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(false);
    const leftArrow = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(true);
    const rightArrow = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(false);
    const justify = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(false);
    const tabDataList = [];
    const tabDataListLen = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(0);
    const hasFocus = (0,vue__WEBPACK_IMPORTED_MODULE_8__/* .ref */ .KR)(false);
    let animateTimer = null,
      scrollTimer = null,
      unwatchRoute;
    const tabProps = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => ({
      activeClass: props.activeClass,
      activeColor: props.activeColor,
      activeBgColor: props.activeBgColor,
      indicatorClass: getIndicatorClass(props.indicatorColor, props.switchIndicator, props.vertical),
      narrowIndicator: props.narrowIndicator,
      inlineLabel: props.inlineLabel,
      noCaps: props.noCaps
    }));
    const hasActiveTab = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => {
      const len = tabDataListLen.value;
      const val = currentModel.value;
      for (let i = 0; i < len; i++) {
        if (tabDataList[i].name.value === val) {
          return true;
        }
      }
      return false;
    });
    const alignClass = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => {
      const align = scrollable.value === true ? 'left' : justify.value === true ? 'justify' : props.align;
      return `q-tabs__content--align-${align}`;
    });
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => 'q-tabs row no-wrap items-center' + ` q-tabs--${scrollable.value === true ? '' : 'not-'}scrollable` + ` q-tabs--${props.vertical === true ? 'vertical' : 'horizontal'}` + ` q-tabs__arrows--${props.outsideArrows === true ? 'outside' : 'inside'}` + ` q-tabs--mobile-with${props.mobileArrows === true ? '' : 'out'}-arrows` + (props.dense === true ? ' q-tabs--dense' : '') + (props.shrink === true ? ' col-shrink' : '') + (props.stretch === true ? ' self-stretch' : ''));
    const innerClass = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => 'q-tabs__content scroll--mobile row no-wrap items-center self-stretch hide-scrollbar relative-position ' + alignClass.value + (props.contentClass !== void 0 ? ` ${props.contentClass}` : ''));
    const domProps = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => props.vertical === true ? {
      container: 'height',
      content: 'offsetHeight',
      scroll: 'scrollHeight'
    } : {
      container: 'width',
      content: 'offsetWidth',
      scroll: 'scrollWidth'
    });
    const isRTL = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => props.vertical !== true && $q.lang.rtl === true);
    const rtlPosCorrection = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => _utils_private_rtl_rtl_js__WEBPACK_IMPORTED_MODULE_5__/* .rtlHasScrollBug */ .E === false && isRTL.value === true);
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .watch */ .wB)(isRTL, updateArrows);
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .watch */ .wB)(() => props.modelValue, name => {
      updateModel({
        name,
        setCurrent: true,
        skipEmit: true
      });
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .watch */ .wB)(() => props.outsideArrows, recalculateScroll);
    function updateModel({
      name,
      setCurrent,
      skipEmit
    }) {
      if (currentModel.value !== name) {
        if (skipEmit !== true && props['onUpdate:modelValue'] !== void 0) {
          emit('update:modelValue', name);
        }
        if (setCurrent === true || props['onUpdate:modelValue'] === void 0) {
          animate(currentModel.value, name);
          currentModel.value = name;
        }
      }
    }
    function recalculateScroll() {
      registerScrollTick(() => {
        updateContainer({
          width: rootRef.value.offsetWidth,
          height: rootRef.value.offsetHeight
        });
      });
    }
    function updateContainer(domSize) {
      // it can be called faster than component being initialized
      // so we need to protect against that case
      // (one example of such case is the docs release notes page)
      if (domProps.value === void 0 || contentRef.value === null) return;
      const size = domSize[domProps.value.container],
        scrollSize = Math.min(contentRef.value[domProps.value.scroll], Array.prototype.reduce.call(contentRef.value.children, (acc, el) => acc + (el[domProps.value.content] || 0), 0)),
        scroll = size > 0 && scrollSize > size; // when there is no tab, in Chrome, size === 0 and scrollSize === 1

      scrollable.value = scroll;

      // Arrows need to be updated even if the scroll status was already true
      scroll === true && registerUpdateArrowsTick(updateArrows);
      justify.value = size < parseInt(props.breakpoint, 10);
    }
    function animate(oldName, newName) {
      const oldTab = oldName !== void 0 && oldName !== null && oldName !== '' ? tabDataList.find(tab => tab.name.value === oldName) : null,
        newTab = newName !== void 0 && newName !== null && newName !== '' ? tabDataList.find(tab => tab.name.value === newName) : null;
      if (oldTab && newTab) {
        const oldEl = oldTab.tabIndicatorRef.value,
          newEl = newTab.tabIndicatorRef.value;
        if (animateTimer !== null) {
          clearTimeout(animateTimer);
          animateTimer = null;
        }
        oldEl.style.transition = 'none';
        oldEl.style.transform = 'none';
        newEl.style.transition = 'none';
        newEl.style.transform = 'none';
        const oldPos = oldEl.getBoundingClientRect(),
          newPos = newEl.getBoundingClientRect();
        newEl.style.transform = props.vertical === true ? `translate3d(0,${oldPos.top - newPos.top}px,0) scale3d(1,${newPos.height ? oldPos.height / newPos.height : 1},1)` : `translate3d(${oldPos.left - newPos.left}px,0,0) scale3d(${newPos.width ? oldPos.width / newPos.width : 1},1,1)`;

        // allow scope updates to kick in (QRouteTab needs more time)
        registerAnimateTick(() => {
          animateTimer = setTimeout(() => {
            animateTimer = null;
            newEl.style.transition = 'transform .25s cubic-bezier(.4, 0, .2, 1)';
            newEl.style.transform = 'none';
          }, 70);
        });
      }
      if (newTab && scrollable.value === true) {
        scrollToTabEl(newTab.rootRef.value);
      }
    }
    function scrollToTabEl(el) {
      const {
          left,
          width,
          top,
          height
        } = contentRef.value.getBoundingClientRect(),
        newPos = el.getBoundingClientRect();
      let offset = props.vertical === true ? newPos.top - top : newPos.left - left;
      if (offset < 0) {
        contentRef.value[props.vertical === true ? 'scrollTop' : 'scrollLeft'] += Math.floor(offset);
        updateArrows();
        return;
      }
      offset += props.vertical === true ? newPos.height - height : newPos.width - width;
      if (offset > 0) {
        contentRef.value[props.vertical === true ? 'scrollTop' : 'scrollLeft'] += Math.ceil(offset);
        updateArrows();
      }
    }
    function updateArrows() {
      const content = contentRef.value;
      if (content === null) return;
      const rect = content.getBoundingClientRect(),
        pos = props.vertical === true ? content.scrollTop : Math.abs(content.scrollLeft);
      if (isRTL.value === true) {
        leftArrow.value = Math.ceil(pos + rect.width) < content.scrollWidth - 1;
        rightArrow.value = pos > 0;
      } else {
        leftArrow.value = pos > 0;
        rightArrow.value = props.vertical === true ? Math.ceil(pos + rect.height) < content.scrollHeight : Math.ceil(pos + rect.width) < content.scrollWidth;
      }
    }
    function animScrollTo(value) {
      scrollTimer !== null && clearInterval(scrollTimer);
      scrollTimer = setInterval(() => {
        if (scrollTowards(value) === true) {
          stopAnimScroll();
        }
      }, 5);
    }
    function scrollToStart() {
      animScrollTo(rtlPosCorrection.value === true ? Number.MAX_SAFE_INTEGER : 0);
    }
    function scrollToEnd() {
      animScrollTo(rtlPosCorrection.value === true ? 0 : Number.MAX_SAFE_INTEGER);
    }
    function stopAnimScroll() {
      if (scrollTimer !== null) {
        clearInterval(scrollTimer);
        scrollTimer = null;
      }
    }
    function onKbdNavigate(keyCode, fromEl) {
      const tabs = Array.prototype.filter.call(contentRef.value.children, el => el === fromEl || el.matches && el.matches('.q-tab.q-focusable') === true);
      const len = tabs.length;
      if (len === 0) return;
      if (keyCode === 36) {
        // Home
        scrollToTabEl(tabs[0]);
        tabs[0].focus();
        return true;
      }
      if (keyCode === 35) {
        // End
        scrollToTabEl(tabs[len - 1]);
        tabs[len - 1].focus();
        return true;
      }
      const dirPrev = keyCode === (props.vertical === true ? 38 /* ArrowUp */ : 37 /* ArrowLeft */);
      const dirNext = keyCode === (props.vertical === true ? 40 /* ArrowDown */ : 39 /* ArrowRight */);
      const dir = dirPrev === true ? -1 : dirNext === true ? 1 : void 0;
      if (dir !== void 0) {
        const rtlDir = isRTL.value === true ? -1 : 1;
        const index = tabs.indexOf(fromEl) + dir * rtlDir;
        if (index >= 0 && index < len) {
          scrollToTabEl(tabs[index]);
          tabs[index].focus({
            preventScroll: true
          });
        }
        return true;
      }
    }

    // let's speed up execution of time-sensitive scrollTowards()
    // with a computed variable by directly applying the minimal
    // number of instructions on get/set functions
    const posFn = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .computed */ .EW)(() => rtlPosCorrection.value === true ? {
      get: content => Math.abs(content.scrollLeft),
      set: (content, pos) => {
        content.scrollLeft = -pos;
      }
    } : props.vertical === true ? {
      get: content => content.scrollTop,
      set: (content, pos) => {
        content.scrollTop = pos;
      }
    } : {
      get: content => content.scrollLeft,
      set: (content, pos) => {
        content.scrollLeft = pos;
      }
    });
    function scrollTowards(value) {
      const content = contentRef.value,
        {
          get,
          set
        } = posFn.value;
      let done = false,
        pos = get(content);
      const direction = value < pos ? -1 : 1;
      pos += direction * 5;
      if (pos < 0) {
        done = true;
        pos = 0;
      } else if (direction === -1 && pos <= value || direction === 1 && pos >= value) {
        done = true;
        pos = value;
      }
      set(content, pos);
      updateArrows();
      return done;
    }
    function hasQueryIncluded(targetQuery, matchingQuery) {
      for (const key in targetQuery) {
        if (targetQuery[key] !== matchingQuery[key]) {
          return false;
        }
      }
      return true;
    }

    // do not use directly; use verifyRouteModel() instead
    function updateActiveRoute() {
      let name = null,
        bestScore = {
          matchedLen: 0,
          queryDiff: 9999,
          hrefLen: 0
        };
      const list = tabDataList.filter(tab => tab.routeData !== void 0 && tab.routeData.hasRouterLink.value === true);
      const {
        hash: currentHash,
        query: currentQuery
      } = proxy.$route;
      const currentQueryLen = Object.keys(currentQuery).length;

      // Vue Router does not keep account of hash & query when matching
      // so we're doing this as well

      for (const tab of list) {
        const exact = tab.routeData.exact.value === true;
        if (tab.routeData[exact === true ? 'linkIsExactActive' : 'linkIsActive'].value !== true) {
          // it cannot match anything as it's not active nor exact-active
          continue;
        }
        const {
          hash,
          query,
          matched,
          href
        } = tab.routeData.resolvedLink.value;
        const queryLen = Object.keys(query).length;
        if (exact === true) {
          if (hash !== currentHash) {
            // it's set to exact but it doesn't matches the hash
            continue;
          }
          if (queryLen !== currentQueryLen || hasQueryIncluded(currentQuery, query) === false) {
            // it's set to exact but it doesn't matches the query
            continue;
          }

          // yey, we found the perfect match (route + hash + query)
          name = tab.name.value;
          break;
        }
        if (hash !== '' && hash !== currentHash) {
          // it has hash and it doesn't matches
          continue;
        }
        if (queryLen !== 0 && hasQueryIncluded(query, currentQuery) === false) {
          // it has query and it doesn't includes the current one
          continue;
        }
        const newScore = {
          matchedLen: matched.length,
          queryDiff: currentQueryLen - queryLen,
          hrefLen: href.length - hash.length
        };
        if (newScore.matchedLen > bestScore.matchedLen) {
          // it matches more routes so it's more specific so we set it as current champion
          name = tab.name.value;
          bestScore = newScore;
          continue;
        } else if (newScore.matchedLen !== bestScore.matchedLen) {
          // it matches less routes than the current champion so we discard it
          continue;
        }
        if (newScore.queryDiff < bestScore.queryDiff) {
          // query is closer to the current one so we set it as current champion
          name = tab.name.value;
          bestScore = newScore;
        } else if (newScore.queryDiff !== bestScore.queryDiff) {
          // it matches less routes than the current champion so we discard it
          continue;
        }
        if (newScore.hrefLen > bestScore.hrefLen) {
          // href is lengthier so it's more specific so we set it as current champion
          name = tab.name.value;
          bestScore = newScore;
        }
      }
      if (name === null && tabDataList.some(tab => tab.routeData === void 0 && tab.name.value === currentModel.value) === true) {
        // we shouldn't interfere if non-route tab is active
        return;
      }
      updateModel({
        name,
        setCurrent: true
      });
    }
    function onFocusin(e) {
      removeFocusTimeout();
      if (hasFocus.value !== true && rootRef.value !== null && e.target && typeof e.target.closest === 'function') {
        const tab = e.target.closest('.q-tab');

        // if the target is contained by a QTab/QRouteTab
        // (it might be other elements focused, like additional QBtn)
        if (tab && rootRef.value.contains(tab) === true) {
          hasFocus.value = true;
          scrollable.value === true && scrollToTabEl(tab);
        }
      }
    }
    function onFocusout() {
      registerFocusTimeout(() => {
        hasFocus.value = false;
      }, 30);
    }
    function verifyRouteModel() {
      if ($tabs.avoidRouteWatcher === false) {
        registerScrollToTabTimeout(updateActiveRoute);
      } else {
        removeScrollToTabTimeout();
      }
    }
    function watchRoute() {
      if (unwatchRoute === void 0) {
        const unwatch = (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .watch */ .wB)(() => proxy.$route.fullPath, verifyRouteModel);
        unwatchRoute = () => {
          unwatch();
          unwatchRoute = void 0;
        };
      }
    }
    function registerTab(tabData) {
      tabDataList.push(tabData);
      tabDataListLen.value++;
      recalculateScroll();

      // if it's a QTab or we don't have Vue Router
      if (tabData.routeData === void 0 || proxy.$route === void 0) {
        // we should position to the currently active tab (if any)
        registerScrollToTabTimeout(() => {
          if (scrollable.value === true) {
            const value = currentModel.value;
            const newTab = value !== void 0 && value !== null && value !== '' ? tabDataList.find(tab => tab.name.value === value) : null;
            newTab && scrollToTabEl(newTab.rootRef.value);
          }
        });
      }
      // else if it's a QRouteTab with a valid link
      else {
        // start watching route
        watchRoute();
        if (tabData.routeData.hasRouterLink.value === true) {
          verifyRouteModel();
        }
      }
    }
    function unregisterTab(tabData) {
      tabDataList.splice(tabDataList.indexOf(tabData), 1);
      tabDataListLen.value--;
      recalculateScroll();
      if (unwatchRoute !== void 0 && tabData.routeData !== void 0) {
        // unwatch route if we don't have any QRouteTabs left
        if (tabDataList.every(tab => tab.routeData === void 0) === true) {
          unwatchRoute();
        }

        // then update model
        verifyRouteModel();
      }
    }
    const $tabs = {
      currentModel,
      tabProps,
      hasFocus,
      hasActiveTab,
      registerTab,
      unregisterTab,
      verifyRouteModel,
      updateModel,
      onKbdNavigate,
      avoidRouteWatcher: false // false | string (uid)
    };
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .provide */ .Gt)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_9__/* .tabsKey */ .Uv, $tabs);
    function cleanup() {
      animateTimer !== null && clearTimeout(animateTimer);
      stopAnimScroll();
      unwatchRoute !== void 0 && unwatchRoute();
    }
    let hadRouteWatcher;
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .onBeforeUnmount */ .xo)(cleanup);
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .onDeactivated */ .Y4)(() => {
      hadRouteWatcher = unwatchRoute !== void 0;
      cleanup();
    });
    (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .onActivated */ .n)(() => {
      hadRouteWatcher === true && watchRoute();
      recalculateScroll();
    });
    return () => {
      return (0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('div', {
        ref: rootRef,
        class: classes.value,
        role: 'tablist',
        onFocusin,
        onFocusout
      }, [(0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(_resize_observer_QResizeObserver_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, {
        onResize: updateContainer
      }), (0,vue__WEBPACK_IMPORTED_MODULE_7__.h)('div', {
        ref: contentRef,
        class: innerClass.value,
        onScroll: updateArrows
      }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_10__/* .hSlot */ .zm)(slots.default)), (0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
        class: 'q-tabs__arrow q-tabs__arrow--left absolute q-tab__icon' + (leftArrow.value === true ? '' : ' q-tabs__arrow--faded'),
        name: props.leftIcon || $q.iconSet.tabs[props.vertical === true ? 'up' : 'left'],
        onMousedownPassive: scrollToStart,
        onTouchstartPassive: scrollToStart,
        onMouseupPassive: stopAnimScroll,
        onMouseleavePassive: stopAnimScroll,
        onTouchendPassive: stopAnimScroll
      }), (0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
        class: 'q-tabs__arrow q-tabs__arrow--right absolute q-tab__icon' + (rightArrow.value === true ? '' : ' q-tabs__arrow--faded'),
        name: props.rightIcon || $q.iconSet.tabs[props.vertical === true ? 'down' : 'right'],
        onMousedownPassive: scrollToEnd,
        onTouchstartPassive: scrollToEnd,
        onMouseupPassive: stopAnimScroll,
        onMouseleavePassive: stopAnimScroll,
        onTouchendPassive: stopAnimScroll
      })]);
    };
  }
}));

/***/ }),

/***/ 6908:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1758);
/* harmony import */ var _icon_QIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(492);
/* harmony import */ var _checkbox_use_checkbox_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8018);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9467);




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_2__/* .createComponent */ .a0)({
  name: 'QToggle',
  props: {
    ..._checkbox_use_checkbox_js__WEBPACK_IMPORTED_MODULE_1__/* .useCheckboxProps */ .jh,
    icon: String,
    iconColor: String
  },
  emits: _checkbox_use_checkbox_js__WEBPACK_IMPORTED_MODULE_1__/* .useCheckboxEmits */ .LA,
  setup(props) {
    function getInner(isTrue, isIndeterminate) {
      const icon = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => (isTrue.value === true ? props.checkedIcon : isIndeterminate.value === true ? props.indeterminateIcon : props.uncheckedIcon) || props.icon);
      const color = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => isTrue.value === true ? props.iconColor : null);
      return () => [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
        class: 'q-toggle__track'
      }), (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('div', {
        class: 'q-toggle__thumb absolute flex flex-center no-wrap'
      }, icon.value !== void 0 ? [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)(_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A, {
        name: icon.value,
        color: color.value
      })] : void 0)];
    }
    return (0,_checkbox_use_checkbox_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Ay)('toggle', getInner);
  }
}));

/***/ }),

/***/ 6914:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5139);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QToolbar',
  props: {
    inset: Boolean
  },
  setup(props, {
    slots
  }) {
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => 'q-toolbar row no-wrap items-center' + (props.inset === true ? ' q-toolbar--inset' : ''));
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('div', {
      class: classes.value,
      role: 'toolbar'
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 9150:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5139);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_0__/* .createComponent */ .a0)({
  name: 'QToolbarTitle',
  props: {
    shrink: Boolean
  },
  setup(props, {
    slots
  }) {
    const classes = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => 'q-toolbar__title ellipsis' + (props.shrink === true ? ' col-shrink' : ''));
    return () => (0,vue__WEBPACK_IMPORTED_MODULE_1__.h)('div', {
      class: classes.value
    }, (0,_utils_private_render_render_js__WEBPACK_IMPORTED_MODULE_2__/* .hSlot */ .zm)(slots.default));
  }
}));

/***/ }),

/***/ 1503:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AV: () => (/* binding */ useVirtualScrollProps),
/* harmony export */   Iq: () => (/* binding */ useVirtualScroll),
/* harmony export */   kP: () => (/* binding */ commonVirtScrollPropsList)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8734);
/* harmony import */ var _utils_debounce_debounce_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3500);
/* harmony import */ var _utils_event_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2500);
/* harmony import */ var _utils_private_rtl_rtl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4897);





const aggBucketSize = 1000;
const scrollToEdges = ['start', 'center', 'end', 'start-force', 'center-force', 'end-force'];
const filterProto = Array.prototype.filter;
const setOverflowAnchor =  false || window.getComputedStyle(document.body).overflowAnchor === void 0 ? _utils_event_event_js__WEBPACK_IMPORTED_MODULE_1__/* .noop */ .lQ : function (contentEl, index) {
  if (contentEl === null) {
    return;
  }
  if (contentEl._qOverflowAnimationFrame !== void 0) {
    cancelAnimationFrame(contentEl._qOverflowAnimationFrame);
  }
  contentEl._qOverflowAnimationFrame = requestAnimationFrame(() => {
    if (contentEl === null) {
      return;
    }
    contentEl._qOverflowAnimationFrame = void 0;
    const children = contentEl.children || [];
    filterProto.call(children, el => el.dataset && el.dataset.qVsAnchor !== void 0).forEach(el => {
      delete el.dataset.qVsAnchor;
    });
    const el = children[index];
    if (el && el.dataset) {
      el.dataset.qVsAnchor = '';
    }
  });
};
function sumFn(acc, h) {
  return acc + h;
}
function getScrollDetails(parent, child, beforeRef, afterRef, horizontal, rtl, stickyStart, stickyEnd) {
  const parentCalc = parent === window ? document.scrollingElement || document.documentElement : parent,
    propElSize = horizontal === true ? 'offsetWidth' : 'offsetHeight',
    details = {
      scrollStart: 0,
      scrollViewSize: -stickyStart - stickyEnd,
      scrollMaxSize: 0,
      offsetStart: -stickyStart,
      offsetEnd: -stickyEnd
    };
  if (horizontal === true) {
    if (parent === window) {
      details.scrollStart = window.pageXOffset || window.scrollX || document.body.scrollLeft || 0;
      details.scrollViewSize += document.documentElement.clientWidth;
    } else {
      details.scrollStart = parentCalc.scrollLeft;
      details.scrollViewSize += parentCalc.clientWidth;
    }
    details.scrollMaxSize = parentCalc.scrollWidth;
    if (rtl === true) {
      details.scrollStart = (_utils_private_rtl_rtl_js__WEBPACK_IMPORTED_MODULE_2__/* .rtlHasScrollBug */ .E === true ? details.scrollMaxSize - details.scrollViewSize : 0) - details.scrollStart;
    }
  } else {
    if (parent === window) {
      details.scrollStart = window.pageYOffset || window.scrollY || document.body.scrollTop || 0;
      details.scrollViewSize += document.documentElement.clientHeight;
    } else {
      details.scrollStart = parentCalc.scrollTop;
      details.scrollViewSize += parentCalc.clientHeight;
    }
    details.scrollMaxSize = parentCalc.scrollHeight;
  }
  if (beforeRef !== null) {
    for (let el = beforeRef.previousElementSibling; el !== null; el = el.previousElementSibling) {
      if (el.classList.contains('q-virtual-scroll--skip') === false) {
        details.offsetStart += el[propElSize];
      }
    }
  }
  if (afterRef !== null) {
    for (let el = afterRef.nextElementSibling; el !== null; el = el.nextElementSibling) {
      if (el.classList.contains('q-virtual-scroll--skip') === false) {
        details.offsetEnd += el[propElSize];
      }
    }
  }
  if (child !== parent) {
    const parentRect = parentCalc.getBoundingClientRect(),
      childRect = child.getBoundingClientRect();
    if (horizontal === true) {
      details.offsetStart += childRect.left - parentRect.left;
      details.offsetEnd -= childRect.width;
    } else {
      details.offsetStart += childRect.top - parentRect.top;
      details.offsetEnd -= childRect.height;
    }
    if (parent !== window) {
      details.offsetStart += details.scrollStart;
    }
    details.offsetEnd += details.scrollMaxSize - details.offsetStart;
  }
  return details;
}
function setScroll(parent, scroll, horizontal, rtl) {
  if (scroll === 'end') {
    scroll = (parent === window ? document.body : parent)[horizontal === true ? 'scrollWidth' : 'scrollHeight'];
  }
  if (parent === window) {
    if (horizontal === true) {
      if (rtl === true) {
        scroll = (_utils_private_rtl_rtl_js__WEBPACK_IMPORTED_MODULE_2__/* .rtlHasScrollBug */ .E === true ? document.body.scrollWidth - document.documentElement.clientWidth : 0) - scroll;
      }
      window.scrollTo(scroll, window.pageYOffset || window.scrollY || document.body.scrollTop || 0);
    } else {
      window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, scroll);
    }
  } else if (horizontal === true) {
    if (rtl === true) {
      scroll = (_utils_private_rtl_rtl_js__WEBPACK_IMPORTED_MODULE_2__/* .rtlHasScrollBug */ .E === true ? parent.scrollWidth - parent.offsetWidth : 0) - scroll;
    }
    parent.scrollLeft = scroll;
  } else {
    parent.scrollTop = scroll;
  }
}
function sumSize(sizeAgg, size, from, to) {
  if (from >= to) {
    return 0;
  }
  const lastTo = size.length,
    fromAgg = Math.floor(from / aggBucketSize),
    toAgg = Math.floor((to - 1) / aggBucketSize) + 1;
  let total = sizeAgg.slice(fromAgg, toAgg).reduce(sumFn, 0);
  if (from % aggBucketSize !== 0) {
    total -= size.slice(fromAgg * aggBucketSize, from).reduce(sumFn, 0);
  }
  if (to % aggBucketSize !== 0 && to !== lastTo) {
    total -= size.slice(to, toAgg * aggBucketSize).reduce(sumFn, 0);
  }
  return total;
}
const commonVirtScrollProps = {
  virtualScrollSliceSize: {
    type: [Number, String],
    default: 10
  },
  virtualScrollSliceRatioBefore: {
    type: [Number, String],
    default: 1
  },
  virtualScrollSliceRatioAfter: {
    type: [Number, String],
    default: 1
  },
  virtualScrollItemSize: {
    type: [Number, String],
    default: 24
  },
  virtualScrollStickySizeStart: {
    type: [Number, String],
    default: 0
  },
  virtualScrollStickySizeEnd: {
    type: [Number, String],
    default: 0
  },
  tableColspan: [Number, String]
};
const commonVirtScrollPropsList = Object.keys(commonVirtScrollProps);
const useVirtualScrollProps = {
  virtualScrollHorizontal: Boolean,
  onVirtualScroll: Function,
  ...commonVirtScrollProps
};
function useVirtualScroll({
  virtualScrollLength,
  getVirtualScrollTarget,
  getVirtualScrollEl,
  virtualScrollItemSizeComputed // optional
}) {
  const vm = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .getCurrentInstance */ .nI)();
  const {
    props,
    emit,
    proxy
  } = vm;
  const {
    $q
  } = proxy;
  let prevScrollStart,
    prevToIndex,
    localScrollViewSize,
    virtualScrollSizesAgg = [],
    virtualScrollSizes;
  const virtualScrollPaddingBefore = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .ref */ .KR)(0);
  const virtualScrollPaddingAfter = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .ref */ .KR)(0);
  const virtualScrollSliceSizeComputed = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .ref */ .KR)({});
  const beforeRef = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .ref */ .KR)(null);
  const afterRef = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .ref */ .KR)(null);
  const contentRef = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .ref */ .KR)(null);
  const virtualScrollSliceRange = (0,vue__WEBPACK_IMPORTED_MODULE_4__/* .ref */ .KR)({
    from: 0,
    to: 0
  });
  const colspanAttr = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => props.tableColspan !== void 0 ? props.tableColspan : 100);
  if (virtualScrollItemSizeComputed === void 0) {
    virtualScrollItemSizeComputed = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => props.virtualScrollItemSize);
  }
  const needsReset = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => virtualScrollItemSizeComputed.value + ';' + props.virtualScrollHorizontal);
  const needsSliceRecalc = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => needsReset.value + ';' + props.virtualScrollSliceRatioBefore + ';' + props.virtualScrollSliceRatioAfter);
  (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .watch */ .wB)(needsSliceRecalc, () => {
    setVirtualScrollSize();
  });
  (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .watch */ .wB)(needsReset, reset);
  function reset() {
    localResetVirtualScroll(prevToIndex, true);
  }
  function refresh(toIndex) {
    localResetVirtualScroll(toIndex === void 0 ? prevToIndex : toIndex);
  }
  function scrollTo(toIndex, edge) {
    const scrollEl = getVirtualScrollTarget();
    if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {
      return;
    }
    const scrollDetails = getScrollDetails(scrollEl, getVirtualScrollEl(), beforeRef.value, afterRef.value, props.virtualScrollHorizontal, $q.lang.rtl, props.virtualScrollStickySizeStart, props.virtualScrollStickySizeEnd);
    localScrollViewSize !== scrollDetails.scrollViewSize && setVirtualScrollSize(scrollDetails.scrollViewSize);
    setVirtualScrollSliceRange(scrollEl, scrollDetails, Math.min(virtualScrollLength.value - 1, Math.max(0, parseInt(toIndex, 10) || 0)), 0, scrollToEdges.indexOf(edge) !== -1 ? edge : prevToIndex !== -1 && toIndex > prevToIndex ? 'end' : 'start');
  }
  function localOnVirtualScrollEvt() {
    const scrollEl = getVirtualScrollTarget();
    if (scrollEl === void 0 || scrollEl === null || scrollEl.nodeType === 8) {
      return;
    }
    const scrollDetails = getScrollDetails(scrollEl, getVirtualScrollEl(), beforeRef.value, afterRef.value, props.virtualScrollHorizontal, $q.lang.rtl, props.virtualScrollStickySizeStart, props.virtualScrollStickySizeEnd),
      listLastIndex = virtualScrollLength.value - 1,
      listEndOffset = scrollDetails.scrollMaxSize - scrollDetails.offsetStart - scrollDetails.offsetEnd - virtualScrollPaddingAfter.value;
    if (prevScrollStart === scrollDetails.scrollStart) {
      return;
    }
    if (scrollDetails.scrollMaxSize <= 0) {
      setVirtualScrollSliceRange(scrollEl, scrollDetails, 0, 0);
      return;
    }
    localScrollViewSize !== scrollDetails.scrollViewSize && setVirtualScrollSize(scrollDetails.scrollViewSize);
    updateVirtualScrollSizes(virtualScrollSliceRange.value.from);
    const scrollMaxStart = Math.floor(scrollDetails.scrollMaxSize - Math.max(scrollDetails.scrollViewSize, scrollDetails.offsetEnd) - Math.min(virtualScrollSizes[listLastIndex], scrollDetails.scrollViewSize / 2));
    if (scrollMaxStart > 0 && Math.ceil(scrollDetails.scrollStart) >= scrollMaxStart) {
      setVirtualScrollSliceRange(scrollEl, scrollDetails, listLastIndex, scrollDetails.scrollMaxSize - scrollDetails.offsetEnd - virtualScrollSizesAgg.reduce(sumFn, 0));
      return;
    }
    let toIndex = 0,
      listOffset = scrollDetails.scrollStart - scrollDetails.offsetStart,
      offset = listOffset;
    if (listOffset <= listEndOffset && listOffset + scrollDetails.scrollViewSize >= virtualScrollPaddingBefore.value) {
      listOffset -= virtualScrollPaddingBefore.value;
      toIndex = virtualScrollSliceRange.value.from;
      offset = listOffset;
    } else {
      for (let j = 0; listOffset >= virtualScrollSizesAgg[j] && toIndex < listLastIndex; j++) {
        listOffset -= virtualScrollSizesAgg[j];
        toIndex += aggBucketSize;
      }
    }
    while (listOffset > 0 && toIndex < listLastIndex) {
      listOffset -= virtualScrollSizes[toIndex];
      if (listOffset > -scrollDetails.scrollViewSize) {
        toIndex++;
        offset = listOffset;
      } else {
        offset = virtualScrollSizes[toIndex] + listOffset;
      }
    }
    setVirtualScrollSliceRange(scrollEl, scrollDetails, toIndex, offset);
  }
  function setVirtualScrollSliceRange(scrollEl, scrollDetails, toIndex, offset, align) {
    const alignForce = typeof align === 'string' && align.indexOf('-force') !== -1;
    const alignEnd = alignForce === true ? align.replace('-force', '') : align;
    const alignRange = alignEnd !== void 0 ? alignEnd : 'start';
    let from = Math.max(0, toIndex - virtualScrollSliceSizeComputed.value[alignRange]),
      to = from + virtualScrollSliceSizeComputed.value.total;
    if (to > virtualScrollLength.value) {
      to = virtualScrollLength.value;
      from = Math.max(0, to - virtualScrollSliceSizeComputed.value.total);
    }
    prevScrollStart = scrollDetails.scrollStart;
    const rangeChanged = from !== virtualScrollSliceRange.value.from || to !== virtualScrollSliceRange.value.to;
    if (rangeChanged === false && alignEnd === void 0) {
      emitScroll(toIndex);
      return;
    }
    const {
      activeElement
    } = document;
    const contentEl = contentRef.value;
    if (rangeChanged === true && contentEl !== null && contentEl !== activeElement && contentEl.contains(activeElement) === true) {
      contentEl.addEventListener('focusout', onBlurRefocusFn);
      setTimeout(() => {
        contentEl !== null && contentEl.removeEventListener('focusout', onBlurRefocusFn);
      });
    }
    setOverflowAnchor(contentEl, toIndex - from);
    const sizeBefore = alignEnd !== void 0 ? virtualScrollSizes.slice(from, toIndex).reduce(sumFn, 0) : 0;
    if (rangeChanged === true) {
      // vue key matching algorithm works only if
      // the array of VNodes changes on only one of the ends
      // so we first change one end and then the other

      const tempTo = to >= virtualScrollSliceRange.value.from && from <= virtualScrollSliceRange.value.to ? virtualScrollSliceRange.value.to : to;
      virtualScrollSliceRange.value = {
        from,
        to: tempTo
      };
      virtualScrollPaddingBefore.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, 0, from);
      virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, to, virtualScrollLength.value);
      requestAnimationFrame(() => {
        if (virtualScrollSliceRange.value.to !== to && prevScrollStart === scrollDetails.scrollStart) {
          virtualScrollSliceRange.value = {
            from: virtualScrollSliceRange.value.from,
            to
          };
          virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, to, virtualScrollLength.value);
        }
      });
    }
    requestAnimationFrame(() => {
      // if the scroll was changed give up
      // (another call to setVirtualScrollSliceRange before animation frame)
      if (prevScrollStart !== scrollDetails.scrollStart) {
        return;
      }
      if (rangeChanged === true) {
        updateVirtualScrollSizes(from);
      }
      const sizeAfter = virtualScrollSizes.slice(from, toIndex).reduce(sumFn, 0),
        posStart = sizeAfter + scrollDetails.offsetStart + virtualScrollPaddingBefore.value,
        posEnd = posStart + virtualScrollSizes[toIndex];
      let scrollPosition = posStart + offset;
      if (alignEnd !== void 0) {
        const sizeDiff = sizeAfter - sizeBefore;
        const scrollStart = scrollDetails.scrollStart + sizeDiff;
        scrollPosition = alignForce !== true && scrollStart < posStart && posEnd < scrollStart + scrollDetails.scrollViewSize ? scrollStart : alignEnd === 'end' ? posEnd - scrollDetails.scrollViewSize : posStart - (alignEnd === 'start' ? 0 : Math.round((scrollDetails.scrollViewSize - virtualScrollSizes[toIndex]) / 2));
      }
      prevScrollStart = scrollPosition;
      setScroll(scrollEl, scrollPosition, props.virtualScrollHorizontal, $q.lang.rtl);
      emitScroll(toIndex);
    });
  }
  function updateVirtualScrollSizes(from) {
    const contentEl = contentRef.value;
    if (contentEl) {
      const children = filterProto.call(contentEl.children, el => el.classList && el.classList.contains('q-virtual-scroll--skip') === false),
        childrenLength = children.length,
        sizeFn = props.virtualScrollHorizontal === true ? el => el.getBoundingClientRect().width : el => el.offsetHeight;
      let index = from,
        size,
        diff;
      for (let i = 0; i < childrenLength;) {
        size = sizeFn(children[i]);
        i++;
        while (i < childrenLength && children[i].classList.contains('q-virtual-scroll--with-prev') === true) {
          size += sizeFn(children[i]);
          i++;
        }
        diff = size - virtualScrollSizes[index];
        if (diff !== 0) {
          virtualScrollSizes[index] += diff;
          virtualScrollSizesAgg[Math.floor(index / aggBucketSize)] += diff;
        }
        index++;
      }
    }
  }
  function onBlurRefocusFn() {
    contentRef.value !== null && contentRef.value !== void 0 && contentRef.value.focus();
  }
  function localResetVirtualScroll(toIndex, fullReset) {
    const defaultSize = 1 * virtualScrollItemSizeComputed.value;
    if (fullReset === true || Array.isArray(virtualScrollSizes) === false) {
      virtualScrollSizes = [];
    }
    const oldVirtualScrollSizesLength = virtualScrollSizes.length;
    virtualScrollSizes.length = virtualScrollLength.value;
    for (let i = virtualScrollLength.value - 1; i >= oldVirtualScrollSizesLength; i--) {
      virtualScrollSizes[i] = defaultSize;
    }
    const jMax = Math.floor((virtualScrollLength.value - 1) / aggBucketSize);
    virtualScrollSizesAgg = [];
    for (let j = 0; j <= jMax; j++) {
      let size = 0;
      const iMax = Math.min((j + 1) * aggBucketSize, virtualScrollLength.value);
      for (let i = j * aggBucketSize; i < iMax; i++) {
        size += virtualScrollSizes[i];
      }
      virtualScrollSizesAgg.push(size);
    }
    prevToIndex = -1;
    prevScrollStart = void 0;
    virtualScrollPaddingBefore.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, 0, virtualScrollSliceRange.value.from);
    virtualScrollPaddingAfter.value = sumSize(virtualScrollSizesAgg, virtualScrollSizes, virtualScrollSliceRange.value.to, virtualScrollLength.value);
    if (toIndex >= 0) {
      updateVirtualScrollSizes(virtualScrollSliceRange.value.from);
      (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .nextTick */ .dY)(() => {
        scrollTo(toIndex);
      });
    } else {
      onVirtualScrollEvt();
    }
  }
  function setVirtualScrollSize(scrollViewSize) {
    if (scrollViewSize === void 0 && typeof window !== 'undefined') {
      const scrollEl = getVirtualScrollTarget();
      if (scrollEl !== void 0 && scrollEl !== null && scrollEl.nodeType !== 8) {
        scrollViewSize = getScrollDetails(scrollEl, getVirtualScrollEl(), beforeRef.value, afterRef.value, props.virtualScrollHorizontal, $q.lang.rtl, props.virtualScrollStickySizeStart, props.virtualScrollStickySizeEnd).scrollViewSize;
      }
    }
    localScrollViewSize = scrollViewSize;
    const virtualScrollSliceRatioBefore = parseFloat(props.virtualScrollSliceRatioBefore) || 0;
    const virtualScrollSliceRatioAfter = parseFloat(props.virtualScrollSliceRatioAfter) || 0;
    const multiplier = 1 + virtualScrollSliceRatioBefore + virtualScrollSliceRatioAfter;
    const view = scrollViewSize === void 0 || scrollViewSize <= 0 ? 1 : Math.ceil(scrollViewSize / virtualScrollItemSizeComputed.value);
    const baseSize = Math.max(1, view, Math.ceil((props.virtualScrollSliceSize > 0 ? props.virtualScrollSliceSize : 10) / multiplier));
    virtualScrollSliceSizeComputed.value = {
      total: Math.ceil(baseSize * multiplier),
      start: Math.ceil(baseSize * virtualScrollSliceRatioBefore),
      center: Math.ceil(baseSize * (0.5 + virtualScrollSliceRatioBefore)),
      end: Math.ceil(baseSize * (1 + virtualScrollSliceRatioBefore)),
      view
    };
  }
  function padVirtualScroll(tag, content) {
    const paddingSize = props.virtualScrollHorizontal === true ? 'width' : 'height';
    const style = {
      ['--q-virtual-scroll-item-' + paddingSize]: virtualScrollItemSizeComputed.value + 'px'
    };
    return [tag === 'tbody' ? (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)(tag, {
      class: 'q-virtual-scroll__padding',
      key: 'before',
      ref: beforeRef
    }, [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('tr', [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('td', {
      style: {
        [paddingSize]: `${virtualScrollPaddingBefore.value}px`,
        ...style
      },
      colspan: colspanAttr.value
    })])]) : (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)(tag, {
      class: 'q-virtual-scroll__padding',
      key: 'before',
      ref: beforeRef,
      style: {
        [paddingSize]: `${virtualScrollPaddingBefore.value}px`,
        ...style
      }
    }), (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)(tag, {
      class: 'q-virtual-scroll__content',
      key: 'content',
      ref: contentRef,
      tabindex: -1
    }, content.flat()), tag === 'tbody' ? (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)(tag, {
      class: 'q-virtual-scroll__padding',
      key: 'after',
      ref: afterRef
    }, [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('tr', [(0,vue__WEBPACK_IMPORTED_MODULE_3__.h)('td', {
      style: {
        [paddingSize]: `${virtualScrollPaddingAfter.value}px`,
        ...style
      },
      colspan: colspanAttr.value
    })])]) : (0,vue__WEBPACK_IMPORTED_MODULE_3__.h)(tag, {
      class: 'q-virtual-scroll__padding',
      key: 'after',
      ref: afterRef,
      style: {
        [paddingSize]: `${virtualScrollPaddingAfter.value}px`,
        ...style
      }
    })];
  }
  function emitScroll(index) {
    if (prevToIndex !== index) {
      props.onVirtualScroll !== void 0 && emit('virtualScroll', {
        index,
        from: virtualScrollSliceRange.value.from,
        to: virtualScrollSliceRange.value.to - 1,
        direction: index < prevToIndex ? 'decrease' : 'increase',
        ref: proxy
      });
      prevToIndex = index;
    }
  }
  setVirtualScrollSize();
  const onVirtualScrollEvt = (0,_utils_debounce_debounce_js__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .A)(localOnVirtualScrollEvt, $q.platform.is.ios === true ? 120 : 35);
  (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .onBeforeMount */ .KC)(() => {
    setVirtualScrollSize();
  });
  let shouldActivate = false;
  (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .onDeactivated */ .Y4)(() => {
    shouldActivate = true;
  });
  (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .onActivated */ .n)(() => {
    if (shouldActivate !== true) return;
    const scrollEl = getVirtualScrollTarget();
    if (prevScrollStart !== void 0 && scrollEl !== void 0 && scrollEl !== null && scrollEl.nodeType !== 8) {
      setScroll(scrollEl, prevScrollStart, props.virtualScrollHorizontal, $q.lang.rtl);
    } else {
      scrollTo(prevToIndex);
    }
  });
   false || (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .onBeforeUnmount */ .xo)(() => {
    onVirtualScrollEvt.cancel();
  });

  // expose public methods
  Object.assign(proxy, {
    scrollTo,
    reset,
    refresh
  });
  return {
    virtualScrollSliceRange,
    virtualScrollSliceSizeComputed,
    setVirtualScrollSize,
    onVirtualScrollEvt,
    localResetVirtualScroll,
    padVirtualScroll,
    scrollTo,
    reset,
    refresh
  };
}

/***/ }),

/***/ 18:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   fR: () => (/* binding */ useAlignProps)
/* harmony export */ });
/* unused harmony exports alignMap, alignValues */
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1758);

const alignMap = {
  left: 'start',
  center: 'center',
  right: 'end',
  between: 'between',
  around: 'around',
  evenly: 'evenly',
  stretch: 'stretch'
};
const alignValues = Object.keys(alignMap);
const useAlignProps = {
  align: {
    type: String,
    validator: v => alignValues.includes(v)
  }
};
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(props) {
  // return alignClass
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => {
    const align = props.align === void 0 ? props.vertical === true ? 'stretch' : 'left' : props.align;
    return `${props.vertical === true ? 'items' : 'justify'}-${alignMap[align]}`;
  });
}

/***/ }),

/***/ 6372:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   C: () => (/* binding */ useDarkProps)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1758);

const useDarkProps = {
  dark: {
    type: Boolean,
    default: null
  }
};
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(props, $q) {
  // return isDark
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => props.dark === null ? $q.dark.isActive : props.dark);
}

/***/ }),

/***/ 7617:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Ay: () => (/* binding */ use_field),
  o9: () => (/* binding */ fieldValueIsFilled),
  mU: () => (/* binding */ useFieldEmits),
  OJ: () => (/* binding */ useFieldProps),
  $7: () => (/* binding */ useFieldState)
});

// UNUSED EXPORTS: useNonInputFieldProps

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.push.js
var es_array_push = __webpack_require__(239);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(8734);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js
var runtime_dom_esm_bundler = __webpack_require__(9104);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/icon/QIcon.js
var QIcon = __webpack_require__(492);
// EXTERNAL MODULE: ./node_modules/quasar/src/components/spinner/QSpinner.js
var QSpinner = __webpack_require__(8210);
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/use-id/use-id.js
var use_id = __webpack_require__(4915);
;// CONCATENATED MODULE: ./node_modules/quasar/src/composables/use-split-attrs/use-split-attrs.js

const listenerRE = /^on[A-Z]/;
/* harmony default export */ function use_split_attrs() {
  const {
    attrs,
    vnode
  } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
  const acc = {
    listeners: (0,reactivity_esm_bundler/* ref */.KR)({}),
    attributes: (0,reactivity_esm_bundler/* ref */.KR)({})
  };
  function update() {
    const attributes = {};
    const listeners = {};
    for (const key in attrs) {
      if (key !== 'class' && key !== 'style' && listenerRE.test(key) === false) {
        attributes[key] = attrs[key];
      }
    }
    for (const key in vnode.props) {
      if (listenerRE.test(key) === true) {
        listeners[key] = vnode.props[key];
      }
    }
    acc.attributes.value = attributes;
    acc.listeners.value = listeners;
  }
  (0,runtime_core_esm_bundler/* onBeforeUpdate */.Ic)(update);
  update();
  return acc;
}
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/private.use-dark/use-dark.js
var use_dark = __webpack_require__(6372);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.symbols/symbols.js
var symbols = __webpack_require__(7973);
;// CONCATENATED MODULE: ./node_modules/quasar/src/composables/use-form/use-form-child.js


/* harmony default export */ function use_form_child({
  validate,
  resetValidation,
  requiresQForm
}) {
  const $form = (0,runtime_core_esm_bundler/* inject */.WQ)(symbols/* formKey */.q3, false);
  if ($form !== false) {
    const {
      props,
      proxy
    } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();

    // export public method (so it can be used in QForm)
    Object.assign(proxy, {
      validate,
      resetValidation
    });
    (0,runtime_core_esm_bundler/* watch */.wB)(() => props.disable, val => {
      if (val === true) {
        typeof resetValidation === 'function' && resetValidation();
        $form.unbindComponent(proxy);
      } else {
        $form.bindComponent(proxy);
      }
    });
    (0,runtime_core_esm_bundler/* onMounted */.sV)(() => {
      // register to parent QForm
      props.disable !== true && $form.bindComponent(proxy);
    });
    (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(() => {
      // un-register from parent QForm
      props.disable !== true && $form.unbindComponent(proxy);
    });
  } else if (requiresQForm === true) {
    console.error('Parent QForm not found on useFormChild()!');
  }
}
;// CONCATENATED MODULE: ./node_modules/quasar/src/utils/patterns/patterns.js
// file referenced from docs

const hex = /^#[0-9a-fA-F]{3}([0-9a-fA-F]{3})?$/,
  hexa = /^#[0-9a-fA-F]{4}([0-9a-fA-F]{4})?$/,
  hexOrHexa = /^#([0-9a-fA-F]{3}|[0-9a-fA-F]{4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/,
  rgb = /^rgb\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5])\)$/,
  rgba = /^rgba\(((0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),){2}(0|[1-9][\d]?|1[\d]{0,2}|2[\d]?|2[0-4][\d]|25[0-5]),(0|0\.[0-9]+[1-9]|0\.[1-9]+|1)\)$/;

// Keep in sync with ui/types/api/validation.d.ts
const testPattern = {
  date: v => /^-?[\d]+\/[0-1]\d\/[0-3]\d$/.test(v),
  time: v => /^([0-1]?\d|2[0-3]):[0-5]\d$/.test(v),
  fulltime: v => /^([0-1]?\d|2[0-3]):[0-5]\d:[0-5]\d$/.test(v),
  timeOrFulltime: v => /^([0-1]?\d|2[0-3]):[0-5]\d(:[0-5]\d)?$/.test(v),
  // -- RFC 5322 --
  // -- Added in v2.6.6 --
  // This is a basic helper validation.
  // For something more complex (like RFC 822) you should write and use your own rule.
  // We won't be accepting PRs to enhance the one below because of the reason above.
  // eslint-disable-next-line
  email: v => /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(v),
  hexColor: v => hex.test(v),
  hexaColor: v => hexa.test(v),
  hexOrHexaColor: v => hexOrHexa.test(v),
  rgbColor: v => rgb.test(v),
  rgbaColor: v => rgba.test(v),
  rgbOrRgbaColor: v => rgb.test(v) || rgba.test(v),
  hexOrRgbColor: v => hex.test(v) || rgb.test(v),
  hexaOrRgbaColor: v => hexa.test(v) || rgba.test(v),
  anyColor: v => hexOrHexa.test(v) || rgb.test(v) || rgba.test(v)
};
/* harmony default export */ const patterns = ({
  testPattern
});
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/debounce/debounce.js
var debounce = __webpack_require__(3500);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.inject-obj-prop/inject-obj-prop.js
var inject_obj_prop = __webpack_require__(2453);
;// CONCATENATED MODULE: ./node_modules/quasar/src/composables/private.use-validate/use-validate.js






const lazyRulesValues = [true, false, 'ondemand'];
const useValidateProps = {
  modelValue: {},
  error: {
    type: Boolean,
    default: null
  },
  errorMessage: String,
  noErrorIcon: Boolean,
  rules: Array,
  reactiveRules: Boolean,
  lazyRules: {
    type: [Boolean, String],
    default: false,
    // statement unneeded but avoids future vue implementation changes
    validator: v => lazyRulesValues.includes(v)
  }
};
/* harmony default export */ function use_validate(focused, innerLoading) {
  const {
    props,
    proxy
  } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
  const innerError = (0,reactivity_esm_bundler/* ref */.KR)(false);
  const innerErrorMessage = (0,reactivity_esm_bundler/* ref */.KR)(null);
  const isDirtyModel = (0,reactivity_esm_bundler/* ref */.KR)(false);
  use_form_child({
    validate,
    resetValidation
  });
  let validateIndex = 0,
    unwatchRules;
  const hasRules = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.rules !== void 0 && props.rules !== null && props.rules.length !== 0);
  const canDebounceValidate = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.disable !== true && hasRules.value === true
  // Should not have a validation in progress already;
  // It might mean that focus switched to submit btn and
  // QForm's submit() has been called already (ENTER key)
  && innerLoading.value === false);
  const hasError = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.error === true || innerError.value === true);
  const errorMessage = (0,runtime_core_esm_bundler/* computed */.EW)(() => typeof props.errorMessage === 'string' && props.errorMessage.length !== 0 ? props.errorMessage : innerErrorMessage.value);
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.modelValue, () => {
    isDirtyModel.value = true;
    if (canDebounceValidate.value === true
    // trigger validation if not using any kind of lazy-rules
    && props.lazyRules === false) {
      debouncedValidate();
    }
  });
  function onRulesChange() {
    if (props.lazyRules !== 'ondemand' && canDebounceValidate.value === true && isDirtyModel.value === true) {
      debouncedValidate();
    }
  }
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.reactiveRules, val => {
    if (val === true) {
      if (unwatchRules === void 0) {
        unwatchRules = (0,runtime_core_esm_bundler/* watch */.wB)(() => props.rules, onRulesChange, {
          immediate: true,
          deep: true
        });
      }
    } else if (unwatchRules !== void 0) {
      unwatchRules();
      unwatchRules = void 0;
    }
  }, {
    immediate: true
  });
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.lazyRules, onRulesChange);
  (0,runtime_core_esm_bundler/* watch */.wB)(focused, val => {
    if (val === true) {
      isDirtyModel.value = true;
    } else if (canDebounceValidate.value === true && props.lazyRules !== 'ondemand') {
      debouncedValidate();
    }
  });
  function resetValidation() {
    validateIndex++;
    innerLoading.value = false;
    isDirtyModel.value = false;
    innerError.value = false;
    innerErrorMessage.value = null;
    debouncedValidate.cancel();
  }

  /*
   * Return value
   *   - true (validation succeeded)
   *   - false (validation failed)
   *   - Promise (pending async validation)
   */
  function validate(val = props.modelValue) {
    if (props.disable === true || hasRules.value === false) {
      return true;
    }
    const index = ++validateIndex;
    const setDirty = innerLoading.value !== true ? () => {
      isDirtyModel.value = true;
    } : () => {};
    const update = (err, msg) => {
      err === true && setDirty();
      innerError.value = err;
      innerErrorMessage.value = msg || null;
      innerLoading.value = false;
    };
    const promises = [];
    for (let i = 0; i < props.rules.length; i++) {
      const rule = props.rules[i];
      let res;
      if (typeof rule === 'function') {
        res = rule(val, testPattern);
      } else if (typeof rule === 'string' && testPattern[rule] !== void 0) {
        res = testPattern[rule](val);
      }
      if (res === false || typeof res === 'string') {
        update(true, res);
        return false;
      } else if (res !== true && res !== void 0) {
        promises.push(res);
      }
    }
    if (promises.length === 0) {
      update(false);
      return true;
    }
    innerLoading.value = true;
    return Promise.all(promises).then(res => {
      if (res === void 0 || Array.isArray(res) === false || res.length === 0) {
        index === validateIndex && update(false);
        return true;
      }
      const msg = res.find(r => r === false || typeof r === 'string');
      index === validateIndex && update(msg !== void 0, msg);
      return msg === void 0;
    }, e => {
      if (index === validateIndex) {
        console.error(e);
        update(true);
      }
      return false;
    });
  }
  const debouncedValidate = (0,debounce/* default */.A)(validate, 0);
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(() => {
    unwatchRules !== void 0 && unwatchRules();
    debouncedValidate.cancel();
  });

  // expose public methods & props
  Object.assign(proxy, {
    resetValidation,
    validate
  });
  (0,inject_obj_prop/* injectProp */.$)(proxy, 'hasError', () => hasError.value);
  return {
    isDirtyModel,
    hasRules,
    hasError,
    errorMessage,
    validate,
    resetValidation
  };
}
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.render/render.js
var render = __webpack_require__(5139);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.focus/focus-manager.js
var focus_manager = __webpack_require__(8983);
;// CONCATENATED MODULE: ./node_modules/quasar/src/composables/private.use-field/use-field.js











function fieldValueIsFilled(val) {
  return val !== void 0 && val !== null && ('' + val).length !== 0;
}
const useNonInputFieldProps = {
  ...use_dark/* useDarkProps */.C,
  ...useValidateProps,
  label: String,
  stackLabel: Boolean,
  hint: String,
  hideHint: Boolean,
  prefix: String,
  suffix: String,
  labelColor: String,
  color: String,
  bgColor: String,
  filled: Boolean,
  outlined: Boolean,
  borderless: Boolean,
  standout: [Boolean, String],
  square: Boolean,
  loading: Boolean,
  labelSlot: Boolean,
  bottomSlots: Boolean,
  hideBottomSpace: Boolean,
  rounded: Boolean,
  dense: Boolean,
  itemAligned: Boolean,
  counter: Boolean,
  clearable: Boolean,
  clearIcon: String,
  disable: Boolean,
  readonly: Boolean,
  autofocus: Boolean,
  for: String
};
const useFieldProps = {
  ...useNonInputFieldProps,
  maxlength: [Number, String]
};
const useFieldEmits = ['update:modelValue', 'clear', 'focus', 'blur'];
function useFieldState({
  requiredForAttr = true,
  tagProp,
  changeEvent = false
} = {}) {
  const {
    props,
    proxy
  } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
  const isDark = (0,use_dark/* default */.A)(props, proxy.$q);
  const targetUid = (0,use_id/* default */.A)({
    required: requiredForAttr,
    getValue: () => props.for
  });
  return {
    requiredForAttr,
    changeEvent,
    tag: tagProp === true ? (0,runtime_core_esm_bundler/* computed */.EW)(() => props.tag) : {
      value: 'label'
    },
    isDark,
    editable: (0,runtime_core_esm_bundler/* computed */.EW)(() => props.disable !== true && props.readonly !== true),
    innerLoading: (0,reactivity_esm_bundler/* ref */.KR)(false),
    focused: (0,reactivity_esm_bundler/* ref */.KR)(false),
    hasPopupOpen: false,
    splitAttrs: use_split_attrs(),
    targetUid,
    rootRef: (0,reactivity_esm_bundler/* ref */.KR)(null),
    targetRef: (0,reactivity_esm_bundler/* ref */.KR)(null),
    controlRef: (0,reactivity_esm_bundler/* ref */.KR)(null)

    /**
     * user supplied additionals:
      * innerValue - computed
     * floatingLabel - computed
     * inputRef - computed
      * fieldClass - computed
     * hasShadow - computed
      * controlEvents - Object with fn(e)
      * getControl - fn
     * getInnerAppend - fn
     * getControlChild - fn
     * getShadowControl - fn
     * showPopup - fn
     */
  };
}
/* harmony default export */ function use_field(state) {
  const {
    props,
    emit,
    slots,
    attrs,
    proxy
  } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
  const {
    $q
  } = proxy;
  let focusoutTimer = null;
  if (state.hasValue === void 0) {
    state.hasValue = (0,runtime_core_esm_bundler/* computed */.EW)(() => fieldValueIsFilled(props.modelValue));
  }
  if (state.emitValue === void 0) {
    state.emitValue = value => {
      emit('update:modelValue', value);
    };
  }
  if (state.controlEvents === void 0) {
    state.controlEvents = {
      onFocusin: onControlFocusin,
      onFocusout: onControlFocusout
    };
  }
  Object.assign(state, {
    clearValue,
    onControlFocusin,
    onControlFocusout,
    focus
  });
  if (state.computedCounter === void 0) {
    state.computedCounter = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
      if (props.counter !== false) {
        const len = typeof props.modelValue === 'string' || typeof props.modelValue === 'number' ? ('' + props.modelValue).length : Array.isArray(props.modelValue) === true ? props.modelValue.length : 0;
        const max = props.maxlength !== void 0 ? props.maxlength : props.maxValues;
        return len + (max !== void 0 ? ' / ' + max : '');
      }
    });
  }
  const {
    isDirtyModel,
    hasRules,
    hasError,
    errorMessage,
    resetValidation
  } = use_validate(state.focused, state.innerLoading);
  const floatingLabel = state.floatingLabel !== void 0 ? (0,runtime_core_esm_bundler/* computed */.EW)(() => props.stackLabel === true || state.focused.value === true || state.floatingLabel.value === true) : (0,runtime_core_esm_bundler/* computed */.EW)(() => props.stackLabel === true || state.focused.value === true || state.hasValue.value === true);
  const shouldRenderBottom = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.bottomSlots === true || props.hint !== void 0 || hasRules.value === true || props.counter === true || props.error !== null);
  const styleType = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    if (props.filled === true) {
      return 'filled';
    }
    if (props.outlined === true) {
      return 'outlined';
    }
    if (props.borderless === true) {
      return 'borderless';
    }
    if (props.standout) {
      return 'standout';
    }
    return 'standard';
  });
  const classes = (0,runtime_core_esm_bundler/* computed */.EW)(() => `q-field row no-wrap items-start q-field--${styleType.value}` + (state.fieldClass !== void 0 ? ` ${state.fieldClass.value}` : '') + (props.rounded === true ? ' q-field--rounded' : '') + (props.square === true ? ' q-field--square' : '') + (floatingLabel.value === true ? ' q-field--float' : '') + (hasLabel.value === true ? ' q-field--labeled' : '') + (props.dense === true ? ' q-field--dense' : '') + (props.itemAligned === true ? ' q-field--item-aligned q-item-type' : '') + (state.isDark.value === true ? ' q-field--dark' : '') + (state.getControl === void 0 ? ' q-field--auto-height' : '') + (state.focused.value === true ? ' q-field--focused' : '') + (hasError.value === true ? ' q-field--error' : '') + (hasError.value === true || state.focused.value === true ? ' q-field--highlighted' : '') + (props.hideBottomSpace !== true && shouldRenderBottom.value === true ? ' q-field--with-bottom' : '') + (props.disable === true ? ' q-field--disabled' : props.readonly === true ? ' q-field--readonly' : ''));
  const contentClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => 'q-field__control relative-position row no-wrap' + (props.bgColor !== void 0 ? ` bg-${props.bgColor}` : '') + (hasError.value === true ? ' text-negative' : typeof props.standout === 'string' && props.standout.length !== 0 && state.focused.value === true ? ` ${props.standout}` : props.color !== void 0 ? ` text-${props.color}` : ''));
  const hasLabel = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.labelSlot === true || props.label !== void 0);
  const labelClass = (0,runtime_core_esm_bundler/* computed */.EW)(() => 'q-field__label no-pointer-events absolute ellipsis' + (props.labelColor !== void 0 && hasError.value !== true ? ` text-${props.labelColor}` : ''));
  const controlSlotScope = (0,runtime_core_esm_bundler/* computed */.EW)(() => ({
    id: state.targetUid.value,
    editable: state.editable.value,
    focused: state.focused.value,
    floatingLabel: floatingLabel.value,
    modelValue: props.modelValue,
    emitValue: state.emitValue
  }));
  const attributes = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    const acc = {};
    if (state.targetUid.value) {
      acc.for = state.targetUid.value;
    }
    if (props.disable === true) {
      acc['aria-disabled'] = 'true';
    }
    return acc;
  });
  function focusHandler() {
    const el = document.activeElement;
    let target = state.targetRef !== void 0 && state.targetRef.value;
    if (target && (el === null || el.id !== state.targetUid.value)) {
      target.hasAttribute('tabindex') === true || (target = target.querySelector('[tabindex]'));
      if (target && target !== el) {
        target.focus({
          preventScroll: true
        });
      }
    }
  }
  function focus() {
    (0,focus_manager/* addFocusFn */.Gy)(focusHandler);
  }
  function blur() {
    (0,focus_manager/* removeFocusFn */.vQ)(focusHandler);
    const el = document.activeElement;
    if (el !== null && state.rootRef.value.contains(el)) {
      el.blur();
    }
  }
  function onControlFocusin(e) {
    if (focusoutTimer !== null) {
      clearTimeout(focusoutTimer);
      focusoutTimer = null;
    }
    if (state.editable.value === true && state.focused.value === false) {
      state.focused.value = true;
      emit('focus', e);
    }
  }
  function onControlFocusout(e, then) {
    focusoutTimer !== null && clearTimeout(focusoutTimer);
    focusoutTimer = setTimeout(() => {
      focusoutTimer = null;
      if (document.hasFocus() === true && (state.hasPopupOpen === true || state.controlRef === void 0 || state.controlRef.value === null || state.controlRef.value.contains(document.activeElement) !== false)) {
        return;
      }
      if (state.focused.value === true) {
        state.focused.value = false;
        emit('blur', e);
      }
      then !== void 0 && then();
    });
  }
  function clearValue(e) {
    // prevent activating the field but keep focus on desktop
    (0,event_event/* stopAndPrevent */.Gu)(e);
    if ($q.platform.is.mobile !== true) {
      const el = state.targetRef !== void 0 && state.targetRef.value || state.rootRef.value;
      el.focus();
    } else if (state.rootRef.value.contains(document.activeElement) === true) {
      document.activeElement.blur();
    }
    if (props.type === 'file') {
      // do not let focus be triggered
      // as it will make the native file dialog
      // appear for another selection
      state.inputRef.value.value = null;
    }
    emit('update:modelValue', null);
    state.changeEvent === true && emit('change', null);
    emit('clear', props.modelValue);
    (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
      const isDirty = isDirtyModel.value;
      resetValidation();
      isDirtyModel.value = isDirty;
    });
  }
  function onClearableKeyup(evt) {
    [13, 32].includes(evt.keyCode) && clearValue(evt);
  }
  function getContent() {
    const node = [];
    slots.prepend !== void 0 && node.push((0,runtime_core_esm_bundler.h)('div', {
      class: 'q-field__prepend q-field__marginal row no-wrap items-center',
      key: 'prepend',
      onClick: event_event/* prevent */.F4
    }, slots.prepend()));
    node.push((0,runtime_core_esm_bundler.h)('div', {
      class: 'q-field__control-container col relative-position row no-wrap q-anchor--skip'
    }, getControlContainer()));
    hasError.value === true && props.noErrorIcon === false && node.push(getInnerAppendNode('error', [(0,runtime_core_esm_bundler.h)(QIcon/* default */.A, {
      name: $q.iconSet.field.error,
      color: 'negative'
    })]));
    if (props.loading === true || state.innerLoading.value === true) {
      node.push(getInnerAppendNode('inner-loading-append', slots.loading !== void 0 ? slots.loading() : [(0,runtime_core_esm_bundler.h)(QSpinner/* default */.A, {
        color: props.color
      })]));
    } else if (props.clearable === true && state.hasValue.value === true && state.editable.value === true) {
      node.push(getInnerAppendNode('inner-clearable-append', [(0,runtime_core_esm_bundler.h)(QIcon/* default */.A, {
        class: 'q-field__focusable-action',
        name: props.clearIcon || $q.iconSet.field.clear,
        tabindex: 0,
        role: 'button',
        'aria-label': $q.lang.label.clear,
        onKeyup: onClearableKeyup,
        onClick: clearValue
      })]));
    }
    slots.append !== void 0 && node.push((0,runtime_core_esm_bundler.h)('div', {
      class: 'q-field__append q-field__marginal row no-wrap items-center',
      key: 'append',
      onClick: event_event/* prevent */.F4
    }, slots.append()));
    state.getInnerAppend !== void 0 && node.push(getInnerAppendNode('inner-append', state.getInnerAppend()));
    state.getControlChild !== void 0 && node.push(state.getControlChild());
    return node;
  }
  function getControlContainer() {
    const node = [];
    props.prefix !== void 0 && props.prefix !== null && node.push((0,runtime_core_esm_bundler.h)('div', {
      class: 'q-field__prefix no-pointer-events row items-center'
    }, props.prefix));
    if (state.getShadowControl !== void 0 && state.hasShadow.value === true) {
      node.push(state.getShadowControl());
    }
    if (state.getControl !== void 0) {
      node.push(state.getControl());
    }
    // internal usage only:
    else if (slots.rawControl !== void 0) {
      node.push(slots.rawControl());
    } else if (slots.control !== void 0) {
      node.push((0,runtime_core_esm_bundler.h)('div', {
        ref: state.targetRef,
        class: 'q-field__native row',
        tabindex: -1,
        ...state.splitAttrs.attributes.value,
        'data-autofocus': props.autofocus === true || void 0
      }, slots.control(controlSlotScope.value)));
    }
    hasLabel.value === true && node.push((0,runtime_core_esm_bundler.h)('div', {
      class: labelClass.value
    }, (0,render/* hSlot */.zm)(slots.label, props.label)));
    props.suffix !== void 0 && props.suffix !== null && node.push((0,runtime_core_esm_bundler.h)('div', {
      class: 'q-field__suffix no-pointer-events row items-center'
    }, props.suffix));
    return node.concat((0,render/* hSlot */.zm)(slots.default));
  }
  function getBottom() {
    let msg, key;
    if (hasError.value === true) {
      if (errorMessage.value !== null) {
        msg = [(0,runtime_core_esm_bundler.h)('div', {
          role: 'alert'
        }, errorMessage.value)];
        key = `q--slot-error-${errorMessage.value}`;
      } else {
        msg = (0,render/* hSlot */.zm)(slots.error);
        key = 'q--slot-error';
      }
    } else if (props.hideHint !== true || state.focused.value === true) {
      if (props.hint !== void 0) {
        msg = [(0,runtime_core_esm_bundler.h)('div', props.hint)];
        key = `q--slot-hint-${props.hint}`;
      } else {
        msg = (0,render/* hSlot */.zm)(slots.hint);
        key = 'q--slot-hint';
      }
    }
    const hasCounter = props.counter === true || slots.counter !== void 0;
    if (props.hideBottomSpace === true && hasCounter === false && msg === void 0) {
      return;
    }
    const main = (0,runtime_core_esm_bundler.h)('div', {
      key,
      class: 'q-field__messages col'
    }, msg);
    return (0,runtime_core_esm_bundler.h)('div', {
      class: 'q-field__bottom row items-start q-field__bottom--' + (props.hideBottomSpace !== true ? 'animated' : 'stale'),
      onClick: event_event/* prevent */.F4
    }, [props.hideBottomSpace === true ? main : (0,runtime_core_esm_bundler.h)(runtime_dom_esm_bundler/* Transition */.eB, {
      name: 'q-transition--field-message'
    }, () => main), hasCounter === true ? (0,runtime_core_esm_bundler.h)('div', {
      class: 'q-field__counter'
    }, slots.counter !== void 0 ? slots.counter() : state.computedCounter.value) : null]);
  }
  function getInnerAppendNode(key, content) {
    return content === null ? null : (0,runtime_core_esm_bundler.h)('div', {
      key,
      class: 'q-field__append q-field__marginal row no-wrap items-center q-anchor--skip'
    }, content);
  }
  let shouldActivate = false;
  (0,runtime_core_esm_bundler/* onDeactivated */.Y4)(() => {
    shouldActivate = true;
  });
  (0,runtime_core_esm_bundler/* onActivated */.n)(() => {
    shouldActivate === true && props.autofocus === true && proxy.focus();
  });
  props.autofocus === true && (0,runtime_core_esm_bundler/* onMounted */.sV)(() => {
    proxy.focus();
  });
  (0,runtime_core_esm_bundler/* onBeforeUnmount */.xo)(() => {
    focusoutTimer !== null && clearTimeout(focusoutTimer);
  });

  // expose public methods
  Object.assign(proxy, {
    focus,
    blur
  });
  return function renderField() {
    const labelAttrs = state.getControl === void 0 && slots.control === void 0 ? {
      ...state.splitAttrs.attributes.value,
      'data-autofocus': props.autofocus === true || void 0,
      ...attributes.value
    } : attributes.value;
    return (0,runtime_core_esm_bundler.h)(state.tag.value, {
      ref: state.rootRef,
      class: [classes.value, attrs.class],
      style: attrs.style,
      ...labelAttrs
    }, [slots.before !== void 0 ? (0,runtime_core_esm_bundler.h)('div', {
      class: 'q-field__before q-field__marginal row no-wrap items-center',
      onClick: event_event/* prevent */.F4
    }, slots.before()) : null, (0,runtime_core_esm_bundler.h)('div', {
      class: 'q-field__inner relative-position col self-stretch'
    }, [(0,runtime_core_esm_bundler.h)('div', {
      ref: state.controlRef,
      class: contentClass.value,
      tabindex: -1,
      ...state.controlEvents
    }, getContent()), shouldRenderBottom.value === true ? getBottom() : null]), slots.after !== void 0 ? (0,runtime_core_esm_bundler.h)('div', {
      class: 'q-field__after q-field__marginal row no-wrap items-center',
      onClick: event_event/* prevent */.F4
    }, slots.after()) : null]);
  };
}

/***/ }),

/***/ 8450:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   b8: () => (/* binding */ useFullscreenEmits),
/* harmony export */   xw: () => (/* binding */ useFullscreenProps)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8734);
/* harmony import */ var _plugins_private_history_History_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4848);
/* harmony import */ var _utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5157);



let counter = 0;
const useFullscreenProps = {
  fullscreen: Boolean,
  noRouteFullscreenExit: Boolean
};
const useFullscreenEmits = ['update:fullscreen', 'fullscreen'];
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  const vm = (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .getCurrentInstance */ .nI)();
  const {
    props,
    emit,
    proxy
  } = vm;
  let historyEntry, fullscreenFillerNode, container;
  const inFullscreen = (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .ref */ .KR)(false);
  (0,_utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_1__/* .vmHasRouter */ .$b)(vm) === true && (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .watch */ .wB)(() => proxy.$route.fullPath, () => {
    props.noRouteFullscreenExit !== true && exitFullscreen();
  });
  (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .watch */ .wB)(() => props.fullscreen, v => {
    if (inFullscreen.value !== v) {
      toggleFullscreen();
    }
  });
  (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .watch */ .wB)(inFullscreen, v => {
    emit('update:fullscreen', v);
    emit('fullscreen', v);
  });
  function toggleFullscreen() {
    if (inFullscreen.value === true) {
      exitFullscreen();
    } else {
      setFullscreen();
    }
  }
  function setFullscreen() {
    if (inFullscreen.value === true) {
      return;
    }
    inFullscreen.value = true;
    container = proxy.$el.parentNode;
    container.replaceChild(fullscreenFillerNode, proxy.$el);
    document.body.appendChild(proxy.$el);
    counter++;
    if (counter === 1) {
      document.body.classList.add('q-body--fullscreen-mixin');
    }
    historyEntry = {
      handler: exitFullscreen
    };
    _plugins_private_history_History_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.add(historyEntry);
  }
  function exitFullscreen() {
    if (inFullscreen.value !== true) {
      return;
    }
    if (historyEntry !== void 0) {
      _plugins_private_history_History_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.remove(historyEntry);
      historyEntry = void 0;
    }
    container.replaceChild(proxy.$el, fullscreenFillerNode);
    inFullscreen.value = false;
    counter = Math.max(0, counter - 1);
    if (counter === 0) {
      document.body.classList.remove('q-body--fullscreen-mixin');
      if (proxy.$el.scrollIntoView !== void 0) {
        setTimeout(() => {
          proxy.$el.scrollIntoView();
        });
      }
    }
  }
  (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .onBeforeMount */ .KC)(() => {
    fullscreenFillerNode = document.createElement('span');
  });
  (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .onMounted */ .sV)(() => {
    props.fullscreen === true && setFullscreen();
  });
  (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .onBeforeUnmount */ .xo)(exitFullscreen);

  // expose public methods
  Object.assign(proxy, {
    toggleFullscreen,
    setFullscreen,
    exitFullscreen
  });
  return {
    inFullscreen,
    toggleFullscreen
  };
}

/***/ }),

/***/ 414:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _plugins_private_history_History_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4848);


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(showing, hide, hideOnRouteChange) {
  let historyEntry;
  function removeFromHistory() {
    if (historyEntry !== void 0) {
      _plugins_private_history_History_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.remove(historyEntry);
      historyEntry = void 0;
    }
  }
  (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .onBeforeUnmount */ .xo)(() => {
    showing.value === true && removeFromHistory();
  });
  return {
    removeFromHistory,
    addToHistory() {
      historyEntry = {
        condition: () => hideOnRouteChange.value === true,
        handler: hide
      };
      _plugins_private_history_History_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.add(historyEntry);
    }
  };
}

/***/ }),

/***/ 2342:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1597);

const isJapanese = /[\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uff9f\u4e00-\u9faf\u3400-\u4dbf]/;
const isChinese = /[\u4e00-\u9fff\u3400-\u4dbf\u{20000}-\u{2a6df}\u{2a700}-\u{2b73f}\u{2b740}-\u{2b81f}\u{2b820}-\u{2ceaf}\uf900-\ufaff\u3300-\u33ff\ufe30-\ufe4f\uf900-\ufaff\u{2f800}-\u{2fa1f}]/u;
const isKorean = /[\u3131-\u314e\u314f-\u3163\uac00-\ud7a3]/;
const isPlainText = /[a-z0-9_ -]$/i;
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(onInput) {
  return function onComposition(e) {
    if (e.type === 'compositionend' || e.type === 'change') {
      if (e.target.qComposing !== true) return;
      e.target.qComposing = false;
      onInput(e);
    } else if (e.type === 'compositionupdate' && e.target.qComposing !== true && typeof e.data === 'string') {
      const isComposing = _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__/* .client */ .Sn.is.firefox === true ? isPlainText.test(e.data) === false : isJapanese.test(e.data) === true || isChinese.test(e.data) === true || isKorean.test(e.data) === true;
      if (isComposing === true) {
        e.target.qComposing = true;
      }
    }
  };
}

/***/ }),

/***/ 2916:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   Jl: () => (/* binding */ useModelToggleEmits),
/* harmony export */   RI: () => (/* binding */ useModelToggleProps)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5157);


const useModelToggleProps = {
  modelValue: {
    type: Boolean,
    default: null
  },
  'onUpdate:modelValue': [Function, Array]
};
const useModelToggleEmits = ['beforeShow', 'show', 'beforeHide', 'hide'];

// handleShow/handleHide -> removeTick(), self (& emit show)

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__({
  showing,
  canShow,
  // optional
  hideOnRouteChange,
  // optional
  handleShow,
  // optional
  handleHide,
  // optional
  processOnMount // optional
}) {
  const vm = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .getCurrentInstance */ .nI)();
  const {
    props,
    emit,
    proxy
  } = vm;
  let payload;
  function toggle(evt) {
    if (showing.value === true) {
      hide(evt);
    } else {
      show(evt);
    }
  }
  function show(evt) {
    if (props.disable === true || evt !== void 0 && evt.qAnchorHandled === true || canShow !== void 0 && canShow(evt) !== true) {
      return;
    }
    const listener = props['onUpdate:modelValue'] !== void 0;
    if (listener === true && false !== true) {
      emit('update:modelValue', true);
      payload = evt;
      (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .nextTick */ .dY)(() => {
        if (payload === evt) {
          payload = void 0;
        }
      });
    }
    if (props.modelValue === null || listener === false || false) {
      processShow(evt);
    }
  }
  function processShow(evt) {
    if (showing.value === true) {
      return;
    }
    showing.value = true;
    emit('beforeShow', evt);
    if (handleShow !== void 0) {
      handleShow(evt);
    } else {
      emit('show', evt);
    }
  }
  function hide(evt) {
    if ( false || props.disable === true) {
      return;
    }
    const listener = props['onUpdate:modelValue'] !== void 0;
    if (listener === true && false !== true) {
      emit('update:modelValue', false);
      payload = evt;
      (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .nextTick */ .dY)(() => {
        if (payload === evt) {
          payload = void 0;
        }
      });
    }
    if (props.modelValue === null || listener === false || false) {
      processHide(evt);
    }
  }
  function processHide(evt) {
    if (showing.value === false) {
      return;
    }
    showing.value = false;
    emit('beforeHide', evt);
    if (handleHide !== void 0) {
      handleHide(evt);
    } else {
      emit('hide', evt);
    }
  }
  function processModelChange(val) {
    if (props.disable === true && val === true) {
      if (props['onUpdate:modelValue'] !== void 0) {
        emit('update:modelValue', false);
      }
    } else if (val === true !== showing.value) {
      const fn = val === true ? processShow : processHide;
      fn(payload);
    }
  }
  (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .watch */ .wB)(() => props.modelValue, processModelChange);
  if (hideOnRouteChange !== void 0 && (0,_utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__/* .vmHasRouter */ .$b)(vm) === true) {
    (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .watch */ .wB)(() => proxy.$route.fullPath, () => {
      if (hideOnRouteChange.value === true && showing.value === true) {
        hide();
      }
    });
  }
  processOnMount === true && (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .onMounted */ .sV)(() => {
    processModelChange(props.modelValue);
  });

  // expose public methods
  const publicMethods = {
    show,
    hide,
    toggle
  };
  Object.assign(proxy, publicMethods);
  return publicMethods;
}

/***/ }),

/***/ 447:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Ay: () => (/* binding */ use_panel),
  hb: () => (/* binding */ usePanelChildProps),
  g: () => (/* binding */ usePanelEmits),
  Qn: () => (/* binding */ usePanelProps)
});

// EXTERNAL MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(1758);
// EXTERNAL MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
var reactivity_esm_bundler = __webpack_require__(8734);
// EXTERNAL MODULE: ./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js
var runtime_dom_esm_bundler = __webpack_require__(9104);
// EXTERNAL MODULE: ./node_modules/quasar/src/plugins/platform/Platform.js
var Platform = __webpack_require__(1597);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.touch/touch.js
var touch = __webpack_require__(7677);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.selection/selection.js
var selection = __webpack_require__(2941);
;// CONCATENATED MODULE: ./node_modules/quasar/src/directives/touch-swipe/TouchSwipe.js






function parseArg(arg) {
  // delta (min velocity -- dist / time)
  // mobile min distance on first move
  // desktop min distance until deciding if it's a swipe or not
  const data = [0.06, 6, 50];
  if (typeof arg === 'string' && arg.length) {
    arg.split(':').forEach((val, index) => {
      const v = parseFloat(val);
      v && (data[index] = v);
    });
  }
  return data;
}
/* harmony default export */ const TouchSwipe = ((0,create/* createDirective */.Yg)( false ? 0 : {
  name: 'touch-swipe',
  beforeMount(el, {
    value,
    arg,
    modifiers
  }) {
    // early return, we don't need to do anything
    if (modifiers.mouse !== true && Platform/* client */.Sn.has.touch !== true) {
      return;
    }
    const mouseCapture = modifiers.mouseCapture === true ? 'Capture' : '';
    const ctx = {
      handler: value,
      sensitivity: parseArg(arg),
      direction: (0,touch/* getModifierDirections */.U)(modifiers),
      noop: event_event/* noop */.lQ,
      mouseStart(evt) {
        if ((0,touch/* shouldStart */.W)(evt, ctx) && (0,event_event/* leftClick */.w7)(evt)) {
          (0,event_event/* addEvt */.Z4)(ctx, 'temp', [[document, 'mousemove', 'move', `notPassive${mouseCapture}`], [document, 'mouseup', 'end', 'notPassiveCapture']]);
          ctx.start(evt, true);
        }
      },
      touchStart(evt) {
        if ((0,touch/* shouldStart */.W)(evt, ctx)) {
          const target = evt.target;
          (0,event_event/* addEvt */.Z4)(ctx, 'temp', [[target, 'touchmove', 'move', 'notPassiveCapture'], [target, 'touchcancel', 'end', 'notPassiveCapture'], [target, 'touchend', 'end', 'notPassiveCapture']]);
          ctx.start(evt);
        }
      },
      start(evt, mouseEvent) {
        Platform/* client */.Sn.is.firefox === true && (0,event_event/* preventDraggable */.M5)(el, true);
        const pos = (0,event_event/* position */.G1)(evt);
        ctx.event = {
          x: pos.left,
          y: pos.top,
          time: Date.now(),
          mouse: mouseEvent === true,
          dir: false
        };
      },
      move(evt) {
        if (ctx.event === void 0) {
          return;
        }
        if (ctx.event.dir !== false) {
          (0,event_event/* stopAndPrevent */.Gu)(evt);
          return;
        }
        const time = Date.now() - ctx.event.time;
        if (time === 0) {
          return;
        }
        const pos = (0,event_event/* position */.G1)(evt),
          distX = pos.left - ctx.event.x,
          absX = Math.abs(distX),
          distY = pos.top - ctx.event.y,
          absY = Math.abs(distY);
        if (ctx.event.mouse !== true) {
          if (absX < ctx.sensitivity[1] && absY < ctx.sensitivity[1]) {
            ctx.end(evt);
            return;
          }
        }
        // is user trying to select text?
        // if so, then something should be reported here
        // (previous selection, if any, was discarded when swipe started)
        else if (window.getSelection().toString() !== '') {
          ctx.end(evt);
          return;
        } else if (absX < ctx.sensitivity[2] && absY < ctx.sensitivity[2]) {
          return;
        }
        const velX = absX / time,
          velY = absY / time;
        if (ctx.direction.vertical === true && absX < absY && absX < 100 && velY > ctx.sensitivity[0]) {
          ctx.event.dir = distY < 0 ? 'up' : 'down';
        }
        if (ctx.direction.horizontal === true && absX > absY && absY < 100 && velX > ctx.sensitivity[0]) {
          ctx.event.dir = distX < 0 ? 'left' : 'right';
        }
        if (ctx.direction.up === true && absX < absY && distY < 0 && absX < 100 && velY > ctx.sensitivity[0]) {
          ctx.event.dir = 'up';
        }
        if (ctx.direction.down === true && absX < absY && distY > 0 && absX < 100 && velY > ctx.sensitivity[0]) {
          ctx.event.dir = 'down';
        }
        if (ctx.direction.left === true && absX > absY && distX < 0 && absY < 100 && velX > ctx.sensitivity[0]) {
          ctx.event.dir = 'left';
        }
        if (ctx.direction.right === true && absX > absY && distX > 0 && absY < 100 && velX > ctx.sensitivity[0]) {
          ctx.event.dir = 'right';
        }
        if (ctx.event.dir !== false) {
          (0,event_event/* stopAndPrevent */.Gu)(evt);
          if (ctx.event.mouse === true) {
            document.body.classList.add('no-pointer-events--children');
            document.body.classList.add('non-selectable');
            (0,selection/* clearSelection */.w)();
            ctx.styleCleanup = withDelay => {
              ctx.styleCleanup = void 0;
              document.body.classList.remove('non-selectable');
              const remove = () => {
                document.body.classList.remove('no-pointer-events--children');
              };
              if (withDelay === true) {
                setTimeout(remove, 50);
              } else {
                remove();
              }
            };
          }
          ctx.handler({
            evt,
            touch: ctx.event.mouse !== true,
            mouse: ctx.event.mouse,
            direction: ctx.event.dir,
            duration: time,
            distance: {
              x: absX,
              y: absY
            }
          });
        } else {
          ctx.end(evt);
        }
      },
      end(evt) {
        if (ctx.event === void 0) {
          return;
        }
        (0,event_event/* cleanEvt */.Fh)(ctx, 'temp');
        Platform/* client */.Sn.is.firefox === true && (0,event_event/* preventDraggable */.M5)(el, false);
        ctx.styleCleanup !== void 0 && ctx.styleCleanup(true);
        evt !== void 0 && ctx.event.dir !== false && (0,event_event/* stopAndPrevent */.Gu)(evt);
        ctx.event = void 0;
      }
    };
    el.__qtouchswipe = ctx;
    if (modifiers.mouse === true) {
      // account for UMD too where modifiers will be lowercased to work
      const capture = modifiers.mouseCapture === true || modifiers.mousecapture === true ? 'Capture' : '';
      (0,event_event/* addEvt */.Z4)(ctx, 'main', [[el, 'mousedown', 'mouseStart', `passive${capture}`]]);
    }
    Platform/* client */.Sn.has.touch === true && (0,event_event/* addEvt */.Z4)(ctx, 'main', [[el, 'touchstart', 'touchStart', `passive${modifiers.capture === true ? 'Capture' : ''}`], [el, 'touchmove', 'noop', 'notPassiveCapture'] // cannot be passive (ex: iOS scroll)
    ]);
  },
  updated(el, bindings) {
    const ctx = el.__qtouchswipe;
    if (ctx !== void 0) {
      if (bindings.oldValue !== bindings.value) {
        typeof bindings.value !== 'function' && ctx.end();
        ctx.handler = bindings.value;
      }
      ctx.direction = (0,touch/* getModifierDirections */.U)(bindings.modifiers);
    }
  },
  beforeUnmount(el) {
    const ctx = el.__qtouchswipe;
    if (ctx !== void 0) {
      (0,event_event/* cleanEvt */.Fh)(ctx, 'main');
      (0,event_event/* cleanEvt */.Fh)(ctx, 'temp');
      Platform/* client */.Sn.is.firefox === true && (0,event_event/* preventDraggable */.M5)(el, false);
      ctx.styleCleanup !== void 0 && ctx.styleCleanup();
      delete el.__qtouchswipe;
    }
  }
}));
// EXTERNAL MODULE: ./node_modules/quasar/src/composables/use-render-cache/use-render-cache.js
var use_render_cache = __webpack_require__(3403);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.render/render.js
var render = __webpack_require__(5139);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.vm/vm.js
var vm = __webpack_require__(5157);
;// CONCATENATED MODULE: ./node_modules/quasar/src/composables/private.use-panel/use-panel.js





const usePanelChildProps = {
  name: {
    required: true
  },
  disable: Boolean
};
const PanelWrapper = {
  setup(_, {
    slots
  }) {
    return () => (0,runtime_core_esm_bundler.h)('div', {
      class: 'q-panel scroll',
      role: 'tabpanel'
    }, (0,render/* hSlot */.zm)(slots.default));
  }
};
const usePanelProps = {
  modelValue: {
    required: true
  },
  animated: Boolean,
  infinite: Boolean,
  swipeable: Boolean,
  vertical: Boolean,
  transitionPrev: String,
  transitionNext: String,
  transitionDuration: {
    type: [String, Number],
    default: 300
  },
  keepAlive: Boolean,
  keepAliveInclude: [String, Array, RegExp],
  keepAliveExclude: [String, Array, RegExp],
  keepAliveMax: Number
};
const usePanelEmits = ['update:modelValue', 'beforeTransition', 'transition'];
/* harmony default export */ function use_panel() {
  const {
    props,
    emit,
    proxy
  } = (0,runtime_core_esm_bundler/* getCurrentInstance */.nI)();
  const {
    getCache
  } = (0,use_render_cache/* default */.A)();
  let panels, forcedPanelTransition;
  const panelIndex = (0,reactivity_esm_bundler/* ref */.KR)(null);
  const panelTransition = (0,reactivity_esm_bundler/* ref */.KR)(null);
  function onSwipe(evt) {
    const dir = props.vertical === true ? 'up' : 'left';
    goToPanelByOffset((proxy.$q.lang.rtl === true ? -1 : 1) * (evt.direction === dir ? 1 : -1));
  }
  const panelDirectives = (0,runtime_core_esm_bundler/* computed */.EW)(() => {
    // if props.swipeable
    return [[TouchSwipe, onSwipe, void 0, {
      horizontal: props.vertical !== true,
      vertical: props.vertical,
      mouse: true
    }]];
  });
  const transitionPrev = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.transitionPrev || `slide-${props.vertical === true ? 'down' : 'right'}`);
  const transitionNext = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.transitionNext || `slide-${props.vertical === true ? 'up' : 'left'}`);
  const transitionStyle = (0,runtime_core_esm_bundler/* computed */.EW)(() => `--q-transition-duration: ${props.transitionDuration}ms`);
  const contentKey = (0,runtime_core_esm_bundler/* computed */.EW)(() => typeof props.modelValue === 'string' || typeof props.modelValue === 'number' ? props.modelValue : String(props.modelValue));
  const keepAliveProps = (0,runtime_core_esm_bundler/* computed */.EW)(() => ({
    include: props.keepAliveInclude,
    exclude: props.keepAliveExclude,
    max: props.keepAliveMax
  }));
  const needsUniqueKeepAliveWrapper = (0,runtime_core_esm_bundler/* computed */.EW)(() => props.keepAliveInclude !== void 0 || props.keepAliveExclude !== void 0);
  (0,runtime_core_esm_bundler/* watch */.wB)(() => props.modelValue, (newVal, oldVal) => {
    const index = isValidPanelName(newVal) === true ? getPanelIndex(newVal) : -1;
    if (forcedPanelTransition !== true) {
      updatePanelTransition(index === -1 ? 0 : index < getPanelIndex(oldVal) ? -1 : 1);
    }
    if (panelIndex.value !== index) {
      panelIndex.value = index;
      emit('beforeTransition', newVal, oldVal);
      (0,runtime_core_esm_bundler/* nextTick */.dY)(() => {
        emit('transition', newVal, oldVal);
      });
    }
  });
  function nextPanel() {
    goToPanelByOffset(1);
  }
  function previousPanel() {
    goToPanelByOffset(-1);
  }
  function goToPanel(name) {
    emit('update:modelValue', name);
  }
  function isValidPanelName(name) {
    return name !== void 0 && name !== null && name !== '';
  }
  function getPanelIndex(name) {
    return panels.findIndex(panel => {
      return panel.props.name === name && panel.props.disable !== '' && panel.props.disable !== true;
    });
  }
  function getEnabledPanels() {
    return panels.filter(panel => {
      return panel.props.disable !== '' && panel.props.disable !== true;
    });
  }
  function updatePanelTransition(direction) {
    const val = direction !== 0 && props.animated === true && panelIndex.value !== -1 ? 'q-transition--' + (direction === -1 ? transitionPrev.value : transitionNext.value) : null;
    if (panelTransition.value !== val) {
      panelTransition.value = val;
    }
  }
  function goToPanelByOffset(direction, startIndex = panelIndex.value) {
    let index = startIndex + direction;
    while (index !== -1 && index < panels.length) {
      const opt = panels[index];
      if (opt !== void 0 && opt.props.disable !== '' && opt.props.disable !== true) {
        updatePanelTransition(direction);
        forcedPanelTransition = true;
        emit('update:modelValue', opt.props.name);
        setTimeout(() => {
          forcedPanelTransition = false;
        });
        return;
      }
      index += direction;
    }
    if (props.infinite === true && panels.length !== 0 && startIndex !== -1 && startIndex !== panels.length) {
      goToPanelByOffset(direction, direction === -1 ? panels.length : -1);
    }
  }
  function updatePanelIndex() {
    const index = getPanelIndex(props.modelValue);
    if (panelIndex.value !== index) {
      panelIndex.value = index;
    }
    return true;
  }
  function getPanelContentChild() {
    const panel = isValidPanelName(props.modelValue) === true && updatePanelIndex() && panels[panelIndex.value];
    return props.keepAlive === true ? [(0,runtime_core_esm_bundler.h)(runtime_core_esm_bundler/* KeepAlive */.PR, keepAliveProps.value, [(0,runtime_core_esm_bundler.h)(needsUniqueKeepAliveWrapper.value === true ? getCache(contentKey.value, () => ({
      ...PanelWrapper,
      name: contentKey.value
    })) : PanelWrapper, {
      key: contentKey.value,
      style: transitionStyle.value
    }, () => panel)])] : [(0,runtime_core_esm_bundler.h)('div', {
      class: 'q-panel scroll',
      style: transitionStyle.value,
      key: contentKey.value,
      role: 'tabpanel'
    }, [panel])];
  }
  function getPanelContent() {
    if (panels.length === 0) {
      return;
    }
    return props.animated === true ? [(0,runtime_core_esm_bundler.h)(runtime_dom_esm_bundler/* Transition */.eB, {
      name: panelTransition.value
    }, getPanelContentChild)] : getPanelContentChild();
  }
  function updatePanelsList(slots) {
    panels = (0,vm/* getNormalizedVNodes */.Hl)((0,render/* hSlot */.zm)(slots.default, [])).filter(panel => panel.props !== null && panel.props.slot === void 0 && isValidPanelName(panel.props.name) === true);
    return panels.length;
  }
  function getPanels() {
    return panels;
  }

  // expose public methods
  Object.assign(proxy, {
    next: nextPanel,
    previous: previousPanel,
    goTo: goToPanel
  });
  return {
    panelIndex,
    panelDirectives,
    updatePanelsList,
    updatePanelIndex,
    getPanelContent,
    getEnabledPanels,
    getPanels,
    isValidPanelName,
    keepAliveProps,
    needsUniqueKeepAliveWrapper,
    goToPanelByOffset,
    goToPanel,
    nextPanel,
    previousPanel
  };
}

/***/ }),

/***/ 2120:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8734);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9467);
/* harmony import */ var _utils_event_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2500);
/* harmony import */ var _utils_private_focus_focus_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8983);
/* harmony import */ var _utils_private_config_nodes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8536);
/* harmony import */ var _utils_private_portal_portal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5563);
/* harmony import */ var _utils_private_inject_obj_prop_inject_obj_prop_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(2453);









/**
 * Noop internal component to ease testing
 * of the teleported content.
 *
 * const wrapper = mount(QDialog, { ... })
 * const teleportedWrapper = wrapper.findComponent({ name: 'QPortal' })
 */
const QPortal = (0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_5__/* .createComponent */ .a0)({
  name: 'QPortal',
  setup(_, {
    slots
  }) {
    return () => slots.default();
  }
});
function isOnGlobalDialog(vm) {
  vm = vm.parent;
  while (vm !== void 0 && vm !== null) {
    if (vm.type.name === 'QGlobalDialog') {
      return true;
    }
    if (vm.type.name === 'QDialog' || vm.type.name === 'QMenu') {
      return false;
    }
    vm = vm.parent;
  }
  return false;
}

// Warning!
// You MUST specify "inheritAttrs: false" in your component

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(vm, innerRef, renderPortalContent, type) {
  // showing, including while in show/hide transition
  const portalIsActive = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)(false);

  // showing & not in any show/hide transition
  const portalIsAccessible = (0,vue__WEBPACK_IMPORTED_MODULE_6__/* .ref */ .KR)(false);
  if (false) {}
  let portalEl = null;
  const focusObj = {};
  const onGlobalDialog = type === 'dialog' && isOnGlobalDialog(vm);
  function showPortal(isReady) {
    if (isReady === true) {
      (0,_utils_private_focus_focus_manager_js__WEBPACK_IMPORTED_MODULE_2__/* .removeFocusWaitFlag */ .gv)(focusObj);
      portalIsAccessible.value = true;
      return;
    }
    portalIsAccessible.value = false;
    if (portalIsActive.value === false) {
      if (onGlobalDialog === false && portalEl === null) {
        portalEl = (0,_utils_private_config_nodes_js__WEBPACK_IMPORTED_MODULE_3__/* .createGlobalNode */ .US)(false, type);
      }
      portalIsActive.value = true;

      // register portal
      _utils_private_portal_portal_js__WEBPACK_IMPORTED_MODULE_4__/* .portalProxyList */ .jx.push(vm.proxy);
      (0,_utils_private_focus_focus_manager_js__WEBPACK_IMPORTED_MODULE_2__/* .addFocusWaitFlag */ .FD)(focusObj);
    }
  }
  function hidePortal(isReady) {
    portalIsAccessible.value = false;
    if (isReady !== true) return;
    (0,_utils_private_focus_focus_manager_js__WEBPACK_IMPORTED_MODULE_2__/* .removeFocusWaitFlag */ .gv)(focusObj);
    portalIsActive.value = false;

    // unregister portal
    const index = _utils_private_portal_portal_js__WEBPACK_IMPORTED_MODULE_4__/* .portalProxyList */ .jx.indexOf(vm.proxy);
    if (index !== -1) {
      _utils_private_portal_portal_js__WEBPACK_IMPORTED_MODULE_4__/* .portalProxyList */ .jx.splice(index, 1);
    }
    if (portalEl !== null) {
      (0,_utils_private_config_nodes_js__WEBPACK_IMPORTED_MODULE_3__/* .removeGlobalNode */ ._J)(portalEl);
      portalEl = null;
    }
  }
  (0,vue__WEBPACK_IMPORTED_MODULE_7__/* .onUnmounted */ .hi)(() => {
    hidePortal(true);
  });

  // needed for portal vm detection
  vm.proxy.__qPortal = true;

  // public way of accessing the rendered content
  (0,_utils_private_inject_obj_prop_inject_obj_prop_js__WEBPACK_IMPORTED_MODULE_8__/* .injectProp */ .$)(vm.proxy, 'contentEl', () => innerRef.value);
  return {
    showPortal,
    hidePortal,
    portalIsActive,
    portalIsAccessible,
    renderPortal: () => onGlobalDialog === true ? renderPortalContent() : portalIsActive.value === true ? [(0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(vue__WEBPACK_IMPORTED_MODULE_7__/* .Teleport */ .Im, {
      to: portalEl
    }, (0,vue__WEBPACK_IMPORTED_MODULE_7__.h)(QPortal, renderPortalContent))] : void 0
  };
}

/***/ }),

/***/ 4970:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ use_prevent_scroll)
});

// EXTERNAL MODULE: ./node_modules/quasar/src/utils/scroll/scroll.js
var scroll_scroll = __webpack_require__(8336);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
// EXTERNAL MODULE: ./node_modules/quasar/src/plugins/platform/Platform.js
var Platform = __webpack_require__(1597);
;// CONCATENATED MODULE: ./node_modules/quasar/src/utils/scroll/prevent-scroll.js



let registered = 0,
  scrollPositionX,
  scrollPositionY,
  maxScrollTop,
  vpPendingUpdate = false,
  bodyLeft,
  bodyTop,
  href,
  closeTimer = null;
function onWheel(e) {
  if (shouldPreventScroll(e)) {
    (0,event_event/* stopAndPrevent */.Gu)(e);
  }
}
function shouldPreventScroll(e) {
  if (e.target === document.body || e.target.classList.contains('q-layout__backdrop')) {
    return true;
  }
  const path = (0,event_event/* getEventPath */.en)(e),
    shift = e.shiftKey && !e.deltaX,
    scrollY = !shift && Math.abs(e.deltaX) <= Math.abs(e.deltaY),
    delta = shift || scrollY ? e.deltaY : e.deltaX;
  for (let index = 0; index < path.length; index++) {
    const el = path[index];
    if ((0,scroll_scroll/* hasScrollbar */.D_)(el, scrollY)) {
      return scrollY ? delta < 0 && el.scrollTop === 0 ? true : delta > 0 && el.scrollTop + el.clientHeight === el.scrollHeight : delta < 0 && el.scrollLeft === 0 ? true : delta > 0 && el.scrollLeft + el.clientWidth === el.scrollWidth;
    }
  }
  return true;
}
function onAppleScroll(e) {
  if (e.target === document) {
    // required, otherwise iOS blocks further scrolling
    // until the mobile scrollbar dissappears
    document.scrollingElement.scrollTop = document.scrollingElement.scrollTop; // eslint-disable-line
  }
}
function onAppleResize(evt) {
  if (vpPendingUpdate === true) {
    return;
  }
  vpPendingUpdate = true;
  requestAnimationFrame(() => {
    vpPendingUpdate = false;
    const {
        height
      } = evt.target,
      {
        clientHeight,
        scrollTop
      } = document.scrollingElement;
    if (maxScrollTop === void 0 || height !== window.innerHeight) {
      maxScrollTop = clientHeight - height;
      document.scrollingElement.scrollTop = scrollTop;
    }
    if (scrollTop > maxScrollTop) {
      document.scrollingElement.scrollTop -= Math.ceil((scrollTop - maxScrollTop) / 8);
    }
  });
}
function apply(action) {
  const body = document.body,
    hasViewport = window.visualViewport !== void 0;
  if (action === 'add') {
    const {
      overflowY,
      overflowX
    } = window.getComputedStyle(body);
    scrollPositionX = (0,scroll_scroll/* getHorizontalScrollPosition */.lS)(window);
    scrollPositionY = (0,scroll_scroll/* getVerticalScrollPosition */.fQ)(window);
    bodyLeft = body.style.left;
    bodyTop = body.style.top;
    href = window.location.href;
    body.style.left = `-${scrollPositionX}px`;
    body.style.top = `-${scrollPositionY}px`;
    if (overflowX !== 'hidden' && (overflowX === 'scroll' || body.scrollWidth > window.innerWidth)) {
      body.classList.add('q-body--force-scrollbar-x');
    }
    if (overflowY !== 'hidden' && (overflowY === 'scroll' || body.scrollHeight > window.innerHeight)) {
      body.classList.add('q-body--force-scrollbar-y');
    }
    body.classList.add('q-body--prevent-scroll');
    document.qScrollPrevented = true;
    if (Platform/* client */.Sn.is.ios === true) {
      if (hasViewport === true) {
        window.scrollTo(0, 0);
        window.visualViewport.addEventListener('resize', onAppleResize, event_event/* listenOpts */.mG.passiveCapture);
        window.visualViewport.addEventListener('scroll', onAppleResize, event_event/* listenOpts */.mG.passiveCapture);
        window.scrollTo(0, 0);
      } else {
        window.addEventListener('scroll', onAppleScroll, event_event/* listenOpts */.mG.passiveCapture);
      }
    }
  }
  if (Platform/* client */.Sn.is.desktop === true && Platform/* client */.Sn.is.mac === true) {
    // ref. https://developers.google.com/web/updates/2017/01/scrolling-intervention
    window[`${action}EventListener`]('wheel', onWheel, event_event/* listenOpts */.mG.notPassive);
  }
  if (action === 'remove') {
    if (Platform/* client */.Sn.is.ios === true) {
      if (hasViewport === true) {
        window.visualViewport.removeEventListener('resize', onAppleResize, event_event/* listenOpts */.mG.passiveCapture);
        window.visualViewport.removeEventListener('scroll', onAppleResize, event_event/* listenOpts */.mG.passiveCapture);
      } else {
        window.removeEventListener('scroll', onAppleScroll, event_event/* listenOpts */.mG.passiveCapture);
      }
    }
    body.classList.remove('q-body--prevent-scroll');
    body.classList.remove('q-body--force-scrollbar-x');
    body.classList.remove('q-body--force-scrollbar-y');
    document.qScrollPrevented = false;
    body.style.left = bodyLeft;
    body.style.top = bodyTop;

    // scroll back only if route has not changed
    if (window.location.href === href) {
      window.scrollTo(scrollPositionX, scrollPositionY);
    }
    maxScrollTop = void 0;
  }
}
/* harmony default export */ function prevent_scroll(state) {
  let action = 'add';
  if (state === true) {
    registered++;
    if (closeTimer !== null) {
      clearTimeout(closeTimer);
      closeTimer = null;
      return;
    }
    if (registered > 1) {
      return;
    }
  } else {
    if (registered === 0) {
      return;
    }
    registered--;
    if (registered > 0) {
      return;
    }
    action = 'remove';
    if (Platform/* client */.Sn.is.ios === true && Platform/* client */.Sn.is.nativeMobile === true) {
      closeTimer !== null && clearTimeout(closeTimer);
      closeTimer = setTimeout(() => {
        apply(action);
        closeTimer = null;
      }, 100);
      return;
    }
  }
  apply(action);
}
;// CONCATENATED MODULE: ./node_modules/quasar/src/composables/private.use-prevent-scroll/use-prevent-scroll.js

/* harmony default export */ function use_prevent_scroll() {
  let currentState;
  return {
    preventBodyScroll(state) {
      if (state !== currentState && (currentState !== void 0 || state === true)) {
        currentState = state;
        prevent_scroll(state);
      }
    }
  };
}

/***/ }),

/***/ 7502:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   Ji: () => (/* binding */ useRouterLinkProps),
/* harmony export */   ni: () => (/* binding */ useRouterLinkNonMatchingProps)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5157);
/*
 * Inspired by RouterLink from Vue Router
 *  --> API should match!
 */




// Get the original path value of a record by following its aliasOf
function getOriginalPath(record) {
  return record ? record.aliasOf ? record.aliasOf.path : record.path : '';
}
function isSameRouteRecord(a, b) {
  // since the original record has an undefined value for aliasOf
  // but all aliases point to the original record, this will always compare
  // the original record
  return (a.aliasOf || a) === (b.aliasOf || b);
}
function includesParams(outer, inner) {
  for (const key in inner) {
    const innerValue = inner[key],
      outerValue = outer[key];
    if (typeof innerValue === 'string') {
      if (innerValue !== outerValue) {
        return false;
      }
    } else if (Array.isArray(outerValue) === false || outerValue.length !== innerValue.length || innerValue.some((value, i) => value !== outerValue[i])) {
      return false;
    }
  }
  return true;
}
function isEquivalentArray(a, b) {
  return Array.isArray(b) === true ? a.length === b.length && a.every((value, i) => value === b[i]) : a.length === 1 && a[0] === b;
}
function isSameRouteLocationParamsValue(a, b) {
  return Array.isArray(a) === true ? isEquivalentArray(a, b) : Array.isArray(b) === true ? isEquivalentArray(b, a) : a === b;
}
function isSameRouteLocationParams(a, b) {
  if (Object.keys(a).length !== Object.keys(b).length) {
    return false;
  }
  for (const key in a) {
    if (isSameRouteLocationParamsValue(a[key], b[key]) === false) {
      return false;
    }
  }
  return true;
}
const useRouterLinkNonMatchingProps = {
  // router-link
  to: [String, Object],
  replace: Boolean,
  // regular <a> link
  href: String,
  target: String,
  // state
  disable: Boolean
};
const useRouterLinkProps = {
  ...useRouterLinkNonMatchingProps,
  // router-link
  exact: Boolean,
  activeClass: {
    type: String,
    default: 'q-router-link--active'
  },
  exactActiveClass: {
    type: String,
    default: 'q-router-link--exact-active'
  }
};

// external props: type, tag

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__({
  fallbackTag,
  useDisableForRouterLinkProps = true
} = {}) {
  const vm = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .getCurrentInstance */ .nI)();
  const {
    props,
    proxy,
    emit
  } = vm;
  const hasRouter = (0,_utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__/* .vmHasRouter */ .$b)(vm);
  const hasHrefLink = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => props.disable !== true && props.href !== void 0);

  // for perf reasons, we use minimum amount of runtime work
  const hasRouterLinkProps = useDisableForRouterLinkProps === true ? (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => hasRouter === true && props.disable !== true && hasHrefLink.value !== true && props.to !== void 0 && props.to !== null && props.to !== '') : (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => hasRouter === true && hasHrefLink.value !== true && props.to !== void 0 && props.to !== null && props.to !== '');
  const resolvedLink = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => hasRouterLinkProps.value === true ? getLink(props.to) : null);
  const hasRouterLink = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => resolvedLink.value !== null);
  const hasLink = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => hasHrefLink.value === true || hasRouterLink.value === true);
  const linkTag = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => props.type === 'a' || hasLink.value === true ? 'a' : props.tag || fallbackTag || 'div');
  const linkAttrs = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => hasHrefLink.value === true ? {
    href: props.href,
    target: props.target
  } : hasRouterLink.value === true ? {
    href: resolvedLink.value.href,
    target: props.target
  } : {});
  const linkActiveIndex = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => {
    if (hasRouterLink.value === false) {
      return -1;
    }
    const {
        matched
      } = resolvedLink.value,
      {
        length
      } = matched,
      routeMatched = matched[length - 1];
    if (routeMatched === void 0) {
      return -1;
    }
    const currentMatched = proxy.$route.matched;
    if (currentMatched.length === 0) {
      return -1;
    }
    const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));
    if (index !== -1) {
      return index;
    }

    // possible parent record
    const parentRecordPath = getOriginalPath(matched[length - 2]);
    return (
      // we are dealing with nested routes
      length > 1
      // if the parent and matched route have the same path, this link is
      // referring to the empty child. Or we currently are on a different
      // child of the same parent
      && getOriginalPath(routeMatched) === parentRecordPath
      // avoid comparing the child with its parent
      && currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index
    );
  });
  const linkIsActive = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => hasRouterLink.value === true && linkActiveIndex.value !== -1 && includesParams(proxy.$route.params, resolvedLink.value.params));
  const linkIsExactActive = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => linkIsActive.value === true && linkActiveIndex.value === proxy.$route.matched.length - 1 && isSameRouteLocationParams(proxy.$route.params, resolvedLink.value.params));
  const linkClass = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .computed */ .EW)(() => hasRouterLink.value === true ? linkIsExactActive.value === true ? ` ${props.exactActiveClass} ${props.activeClass}` : props.exact === true ? '' : linkIsActive.value === true ? ` ${props.activeClass}` : '' : '');
  function getLink(to) {
    try {
      return proxy.$router.resolve(to);
    } catch (_) {}
    return null;
  }

  /**
   * @returns Promise<RouterError | false | undefined>
   */
  function navigateToRouterLink(e, {
    returnRouterError,
    to = props.to,
    replace = props.replace
  } = {}) {
    if (props.disable === true) {
      // ensure native navigation is prevented in all cases,
      // like when useDisableForRouterLinkProps === false (QRouteTab)
      e.preventDefault();
      return Promise.resolve(false);
    }
    if (
    // don't redirect with control keys;
    // should match RouterLink from Vue Router
    e.metaKey || e.altKey || e.ctrlKey || e.shiftKey

    // don't redirect on right click
    || e.button !== void 0 && e.button !== 0

    // don't redirect if it should open in a new window
    || props.target === '_blank') {
      return Promise.resolve(false);
    }

    // hinder the native navigation
    e.preventDefault();

    // then() can also return a "soft" router error (Vue Router behavior)
    const promise = proxy.$router[replace === true ? 'replace' : 'push'](to);
    return returnRouterError === true ? promise
    // else catching hard errors and also "soft" ones - then(err => ...)
    : promise.then(() => {}).catch(() => {});
  }

  // warning! ensure that the component using it has 'click' included in its 'emits' definition prop
  function navigateOnClick(e) {
    if (hasRouterLink.value === true) {
      const go = opts => navigateToRouterLink(e, opts);
      emit('click', e, go);
      e.defaultPrevented !== true && go();
    } else {
      emit('click', e);
    }
  }
  return {
    hasRouterLink,
    hasHrefLink,
    hasLink,
    linkTag,
    resolvedLink,
    linkIsActive,
    linkIsExactActive,
    linkClass,
    linkAttrs,
    getLink,
    navigateToRouterLink,
    navigateOnClick
  };
}

/***/ }),

/***/ 1906:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   v0: () => (/* binding */ useSizeDefaults),
/* harmony export */   x_: () => (/* binding */ useSizeProps)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1758);

const useSizeDefaults = {
  xs: 18,
  sm: 24,
  md: 32,
  lg: 38,
  xl: 46
};
const useSizeProps = {
  size: String
};
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(props, sizes = useSizeDefaults) {
  // return sizeStyle
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => props.size !== void 0 ? {
    fontSize: props.size in sizes ? `${sizes[props.size]}px` : props.size
  } : null);
}

/***/ }),

/***/ 454:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   d: () => (/* binding */ useTransitionProps)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1758);

const useTransitionProps = {
  transitionShow: {
    type: String,
    default: 'fade'
  },
  transitionHide: {
    type: String,
    default: 'fade'
  },
  transitionDuration: {
    type: [String, Number],
    default: 300
  }
};
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(props, defaultShowFn = () => {}, defaultHideFn = () => {}) {
  return {
    transitionProps: (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => {
      const show = `q-transition--${props.transitionShow || defaultShowFn()}`;
      const hide = `q-transition--${props.transitionHide || defaultHideFn()}`;
      return {
        appear: true,
        enterFromClass: `${show}-enter-from`,
        enterActiveClass: `${show}-enter-active`,
        enterToClass: `${show}-enter-to`,
        leaveFromClass: `${hide}-leave-from`,
        leaveActiveClass: `${hide}-leave-active`,
        leaveToClass: `${hide}-leave-to`
      };
    }),
    transitionStyle: (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => `--q-transition-duration: ${props.transitionDuration}ms`)
  };
}

/***/ }),

/***/ 2510:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   M4: () => (/* binding */ useFormInputNameAttr),
/* harmony export */   Sc: () => (/* binding */ useFormProps),
/* harmony export */   mj: () => (/* binding */ useFormAttrs),
/* harmony export */   vq: () => (/* binding */ useFormInject)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1758);

const useFormProps = {
  name: String
};
function useFormAttrs(props) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => ({
    type: 'hidden',
    name: props.name,
    value: props.modelValue
  }));
}
function useFormInject(formAttrs = {}) {
  return (child, action, className) => {
    child[action]((0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('input', {
      class: 'hidden' + (className || ''),
      ...formAttrs.value
    }));
  };
}
function useFormInputNameAttr(props) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .computed */ .EW)(() => props.name || props.for);
}

/***/ }),

/***/ 4915:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8734);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1758);
/* harmony import */ var _utils_uid_uid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5192);
/* harmony import */ var _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1597);



function parseValue(val) {
  return val === void 0 || val === null ? null : val;
}
function getId(val, required) {
  return val === void 0 || val === null ? required === true ? `f_${(0,_utils_uid_uid_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)()}` : null : val;
}

/**
 * Returns an "id" which is a ref() that can be used as
 * a unique identifier to apply to a DOM node attribute.
 *
 * On SSR, it takes care of generating the id on the client side (only) to
 * avoid hydration errors.
 */
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__({
  getValue,
  required = true
} = {}) {
  if (_plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_1__/* .isRuntimeSsrPreHydration */ .ot.value === true) {
    const id = getValue !== void 0 ? (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .ref */ .KR)(parseValue(getValue())) : (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .ref */ .KR)(null);
    if (required === true && id.value === null) {
      (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .onMounted */ .sV)(() => {
        id.value = `f_${(0,_utils_uid_uid_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)()}`; // getId(null, true)
      });
    }
    if (getValue !== void 0) {
      (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .watch */ .wB)(getValue, newId => {
        id.value = getId(newId, required);
      });
    }
    return id;
  }
  return getValue !== void 0 ? (0,vue__WEBPACK_IMPORTED_MODULE_3__/* .computed */ .EW)(() => getId(getValue(), required)) : (0,vue__WEBPACK_IMPORTED_MODULE_2__/* .ref */ .KR)(`f_${(0,_utils_uid_uid_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A)()}`); // getId(null, true)
}

/***/ }),

/***/ 4907:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ useQuasar)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7973);



/**
 * Returns the $q instance.
 * Equivalent to `this.$q` inside templates.
 */
function useQuasar() {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .inject */ .WQ)(_utils_private_symbols_symbols_js__WEBPACK_IMPORTED_MODULE_1__/* .quasarKey */ .XA);
}

/***/ }),

/***/ 3403:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  let cache = Object.create(null);
  return {
    getCache:  false ? 0 : (key, defaultValue) => cache[key] === void 0 ? cache[key] = typeof defaultValue === 'function' ? defaultValue() : defaultValue : cache[key],
    setCache(key, obj) {
      cache[key] = obj;
    },
    hasCache(key) {
      return Object.hasOwnProperty.call(cache, key);
    },
    clearCache(key) {
      if (key !== void 0) {
        delete cache[key];
      } else {
        cache = Object.create(null);
      }
    }
  };
}

/***/ }),

/***/ 6019:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5157);



/*
 * Usage:
 *    registerTick(fn)
 *    removeTick()
 */

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  let tickFn;
  const vm = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .getCurrentInstance */ .nI)();
  function removeTick() {
    tickFn = void 0;
  }
  (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .onDeactivated */ .Y4)(removeTick);
  (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .onBeforeUnmount */ .xo)(removeTick);
  return {
    removeTick,
    registerTick(fn) {
      tickFn = fn;
      (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .nextTick */ .dY)(() => {
        if (tickFn === fn) {
          // we also check if VM is destroyed, since if it
          // got to trigger one nextTick() we cannot stop it
          (0,_utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__/* .vmIsDestroyed */ .rU)(vm) === false && tickFn();
          tickFn = void 0;
        }
      });
    }
  };
}

/***/ }),

/***/ 4667:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5157);



/*
 * Usage:
 *    registerTimeout(fn[, delay])
 *    removeTimeout()
 */

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  let timer = null;
  const vm = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .getCurrentInstance */ .nI)();
  function removeTimeout() {
    if (timer !== null) {
      clearTimeout(timer);
      timer = null;
    }
  }
  (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .onDeactivated */ .Y4)(removeTimeout);
  (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .onBeforeUnmount */ .xo)(removeTimeout);
  return {
    removeTimeout,
    registerTimeout(fn, delay) {
      removeTimeout(timer);
      if ((0,_utils_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__/* .vmIsDestroyed */ .rU)(vm) === false) {
        timer = setTimeout(() => {
          timer = null;
          fn();
        }, delay);
      }
    }
  };
}

/***/ }),

/***/ 9626:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ Ripple)
});

// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.push.js
var es_array_push = __webpack_require__(239);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/dom/dom.js
var dom = __webpack_require__(7556);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.keyboard/key-composition.js
var key_composition = __webpack_require__(2906);
;// CONCATENATED MODULE: ./node_modules/quasar/src/utils/throttle/throttle.js
/* harmony default export */ function throttle(fn, limit = 250) {
  let wait = false,
    result;
  return function /* ...args */
  () {
    if (wait === false) {
      wait = true;
      setTimeout(() => {
        wait = false;
      }, limit);
      result = fn.apply(this, arguments);
    }
    return result;
  };
}
;// CONCATENATED MODULE: ./node_modules/quasar/src/directives/ripple/Ripple.js







function showRipple(evt, el, ctx, forceCenter) {
  ctx.modifiers.stop === true && (0,event_event/* stop */.ds)(evt);
  const color = ctx.modifiers.color;
  let center = ctx.modifiers.center;
  center = center === true || forceCenter === true;
  const node = document.createElement('span'),
    innerNode = document.createElement('span'),
    pos = (0,event_event/* position */.G1)(evt),
    {
      left,
      top,
      width,
      height
    } = el.getBoundingClientRect(),
    diameter = Math.sqrt(width * width + height * height),
    radius = diameter / 2,
    centerX = `${(width - diameter) / 2}px`,
    x = center ? centerX : `${pos.left - left - radius}px`,
    centerY = `${(height - diameter) / 2}px`,
    y = center ? centerY : `${pos.top - top - radius}px`;
  innerNode.className = 'q-ripple__inner';
  (0,dom/* css */.AH)(innerNode, {
    height: `${diameter}px`,
    width: `${diameter}px`,
    transform: `translate3d(${x},${y},0) scale3d(.2,.2,1)`,
    opacity: 0
  });
  node.className = `q-ripple${color ? ' text-' + color : ''}`;
  node.setAttribute('dir', 'ltr');
  node.appendChild(innerNode);
  el.appendChild(node);
  const abort = () => {
    node.remove();
    clearTimeout(timer);
  };
  ctx.abort.push(abort);
  let timer = setTimeout(() => {
    innerNode.classList.add('q-ripple__inner--enter');
    innerNode.style.transform = `translate3d(${centerX},${centerY},0) scale3d(1,1,1)`;
    innerNode.style.opacity = 0.2;
    timer = setTimeout(() => {
      innerNode.classList.remove('q-ripple__inner--enter');
      innerNode.classList.add('q-ripple__inner--leave');
      innerNode.style.opacity = 0;
      timer = setTimeout(() => {
        node.remove();
        ctx.abort.splice(ctx.abort.indexOf(abort), 1);
      }, 275);
    }, 250);
  }, 50);
}
function updateModifiers(ctx, {
  modifiers,
  value,
  arg
}) {
  const cfg = Object.assign({}, ctx.cfg.ripple, modifiers, value);
  ctx.modifiers = {
    early: cfg.early === true,
    stop: cfg.stop === true,
    center: cfg.center === true,
    color: cfg.color || arg,
    keyCodes: [].concat(cfg.keyCodes || 13)
  };
}
/* harmony default export */ const Ripple = ((0,create/* createDirective */.Yg)( false ? 0 : {
  name: 'ripple',
  beforeMount(el, binding) {
    const cfg = binding.instance.$.appContext.config.globalProperties.$q.config || {};
    if (cfg.ripple === false) {
      return;
    }
    const ctx = {
      cfg,
      enabled: binding.value !== false,
      modifiers: {},
      abort: [],
      start(evt) {
        if (ctx.enabled === true && evt.qSkipRipple !== true && evt.type === (ctx.modifiers.early === true ? 'pointerdown' : 'click')) {
          showRipple(evt, el, ctx, evt.qKeyEvent === true);
        }
      },
      keystart: throttle(evt => {
        if (ctx.enabled === true && evt.qSkipRipple !== true && (0,key_composition/* isKeyCode */.Dv)(evt, ctx.modifiers.keyCodes) === true && evt.type === `key${ctx.modifiers.early === true ? 'down' : 'up'}`) {
          showRipple(evt, el, ctx, true);
        }
      }, 300)
    };
    updateModifiers(ctx, binding);
    el.__qripple = ctx;
    (0,event_event/* addEvt */.Z4)(ctx, 'main', [[el, 'pointerdown', 'start', 'passive'], [el, 'click', 'start', 'passive'], [el, 'keydown', 'keystart', 'passive'], [el, 'keyup', 'keystart', 'passive']]);
  },
  updated(el, binding) {
    if (binding.oldValue !== binding.value) {
      const ctx = el.__qripple;
      if (ctx !== void 0) {
        ctx.enabled = binding.value !== false;
        if (ctx.enabled === true && Object(binding.value) === binding.value) {
          updateModifiers(ctx, binding);
        }
      }
    }
  },
  beforeUnmount(el) {
    const ctx = el.__qripple;
    if (ctx !== void 0) {
      ctx.abort.forEach(fn => {
        fn();
      });
      (0,event_event/* cleanEvt */.Fh)(ctx, 'main');
      delete el._qripple;
    }
  }
}));

/***/ }),

/***/ 9390:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1597);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_touch_touch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7677);
/* harmony import */ var _utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2500);
/* harmony import */ var _utils_private_selection_selection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2941);






function getChanges(evt, ctx, isFinal) {
  const pos = (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .position */ .G1)(evt);
  let dir,
    distX = pos.left - ctx.event.x,
    distY = pos.top - ctx.event.y,
    absX = Math.abs(distX),
    absY = Math.abs(distY);
  const direction = ctx.direction;
  if (direction.horizontal === true && direction.vertical !== true) {
    dir = distX < 0 ? 'left' : 'right';
  } else if (direction.horizontal !== true && direction.vertical === true) {
    dir = distY < 0 ? 'up' : 'down';
  } else if (direction.up === true && distY < 0) {
    dir = 'up';
    if (absX > absY) {
      if (direction.left === true && distX < 0) {
        dir = 'left';
      } else if (direction.right === true && distX > 0) {
        dir = 'right';
      }
    }
  } else if (direction.down === true && distY > 0) {
    dir = 'down';
    if (absX > absY) {
      if (direction.left === true && distX < 0) {
        dir = 'left';
      } else if (direction.right === true && distX > 0) {
        dir = 'right';
      }
    }
  } else if (direction.left === true && distX < 0) {
    dir = 'left';
    if (absX < absY) {
      if (direction.up === true && distY < 0) {
        dir = 'up';
      } else if (direction.down === true && distY > 0) {
        dir = 'down';
      }
    }
  } else if (direction.right === true && distX > 0) {
    dir = 'right';
    if (absX < absY) {
      if (direction.up === true && distY < 0) {
        dir = 'up';
      } else if (direction.down === true && distY > 0) {
        dir = 'down';
      }
    }
  }
  let synthetic = false;
  if (dir === void 0 && isFinal === false) {
    if (ctx.event.isFirst === true || ctx.event.lastDir === void 0) {
      return {};
    }
    dir = ctx.event.lastDir;
    synthetic = true;
    if (dir === 'left' || dir === 'right') {
      pos.left -= distX;
      absX = 0;
      distX = 0;
    } else {
      pos.top -= distY;
      absY = 0;
      distY = 0;
    }
  }
  return {
    synthetic,
    payload: {
      evt,
      touch: ctx.event.mouse !== true,
      mouse: ctx.event.mouse === true,
      position: pos,
      direction: dir,
      isFirst: ctx.event.isFirst,
      isFinal: isFinal === true,
      duration: Date.now() - ctx.event.time,
      distance: {
        x: absX,
        y: absY
      },
      offset: {
        x: distX,
        y: distY
      },
      delta: {
        x: pos.left - ctx.event.lastX,
        y: pos.top - ctx.event.lastY
      }
    }
  };
}
let uid = 0;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_4__/* .createDirective */ .Yg)( false ? 0 : {
  name: 'touch-pan',
  beforeMount(el, {
    value,
    modifiers
  }) {
    // early return, we don't need to do anything
    if (modifiers.mouse !== true && _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__/* .client */ .Sn.has.touch !== true) {
      return;
    }
    function handleEvent(evt, mouseEvent) {
      if (modifiers.mouse === true && mouseEvent === true) {
        (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .stopAndPrevent */ .Gu)(evt);
      } else {
        modifiers.stop === true && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .stop */ .ds)(evt);
        modifiers.prevent === true && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .prevent */ .F4)(evt);
      }
    }
    const ctx = {
      uid: 'qvtp_' + uid++,
      handler: value,
      modifiers,
      direction: (0,_utils_private_touch_touch_js__WEBPACK_IMPORTED_MODULE_1__/* .getModifierDirections */ .U)(modifiers),
      noop: _utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .noop */ .lQ,
      mouseStart(evt) {
        if ((0,_utils_private_touch_touch_js__WEBPACK_IMPORTED_MODULE_1__/* .shouldStart */ .W)(evt, ctx) && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .leftClick */ .w7)(evt)) {
          (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .addEvt */ .Z4)(ctx, 'temp', [[document, 'mousemove', 'move', 'notPassiveCapture'], [document, 'mouseup', 'end', 'passiveCapture']]);
          ctx.start(evt, true);
        }
      },
      touchStart(evt) {
        if ((0,_utils_private_touch_touch_js__WEBPACK_IMPORTED_MODULE_1__/* .shouldStart */ .W)(evt, ctx)) {
          const target = evt.target;
          (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .addEvt */ .Z4)(ctx, 'temp', [[target, 'touchmove', 'move', 'notPassiveCapture'], [target, 'touchcancel', 'end', 'passiveCapture'], [target, 'touchend', 'end', 'passiveCapture']]);
          ctx.start(evt);
        }
      },
      start(evt, mouseEvent) {
        _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__/* .client */ .Sn.is.firefox === true && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .preventDraggable */ .M5)(el, true);
        ctx.lastEvt = evt;

        /*
        * Stop propagation so possible upper v-touch-pan don't catch this as well;
        * If we're not the target (based on modifiers), we'll re-emit the event later
        */
        if (mouseEvent === true || modifiers.stop === true) {
          /*
          * are we directly switching to detected state?
          * clone event only otherwise
          */
          if (ctx.direction.all !== true
          // account for UMD too where modifiers will be lowercased to work
          && (mouseEvent !== true || ctx.modifiers.mouseAllDir !== true && ctx.modifiers.mousealldir !== true)) {
            const clone = evt.type.indexOf('mouse') !== -1 ? new MouseEvent(evt.type, evt) : new TouchEvent(evt.type, evt);
            evt.defaultPrevented === true && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .prevent */ .F4)(clone);
            evt.cancelBubble === true && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .stop */ .ds)(clone);
            Object.assign(clone, {
              qKeyEvent: evt.qKeyEvent,
              qClickOutside: evt.qClickOutside,
              qAnchorHandled: evt.qAnchorHandled,
              qClonedBy: evt.qClonedBy === void 0 ? [ctx.uid] : evt.qClonedBy.concat(ctx.uid)
            });
            ctx.initialEvent = {
              target: evt.target,
              event: clone
            };
          }
          (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .stop */ .ds)(evt);
        }
        const {
          left,
          top
        } = (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .position */ .G1)(evt);
        ctx.event = {
          x: left,
          y: top,
          time: Date.now(),
          mouse: mouseEvent === true,
          detected: false,
          isFirst: true,
          isFinal: false,
          lastX: left,
          lastY: top
        };
      },
      move(evt) {
        if (ctx.event === void 0) {
          return;
        }
        const pos = (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .position */ .G1)(evt),
          distX = pos.left - ctx.event.x,
          distY = pos.top - ctx.event.y;

        // prevent buggy browser behavior (like Blink-based engine ones on Windows)
        // where the mousemove event occurs even if there's no movement after mousedown
        // https://bugs.chromium.org/p/chromium/issues/detail?id=161464
        // https://bugs.chromium.org/p/chromium/issues/detail?id=721341
        // https://github.com/quasarframework/quasar/issues/10721
        if (distX === 0 && distY === 0) {
          return;
        }
        ctx.lastEvt = evt;
        const isMouseEvt = ctx.event.mouse === true;
        const start = () => {
          handleEvent(evt, isMouseEvt);
          let cursor;
          if (modifiers.preserveCursor !== true && modifiers.preservecursor !== true) {
            cursor = document.documentElement.style.cursor || '';
            document.documentElement.style.cursor = 'grabbing';
          }
          isMouseEvt === true && document.body.classList.add('no-pointer-events--children');
          document.body.classList.add('non-selectable');
          (0,_utils_private_selection_selection_js__WEBPACK_IMPORTED_MODULE_3__/* .clearSelection */ .w)();
          ctx.styleCleanup = withDelayedFn => {
            ctx.styleCleanup = void 0;
            if (cursor !== void 0) {
              document.documentElement.style.cursor = cursor;
            }
            document.body.classList.remove('non-selectable');
            if (isMouseEvt === true) {
              const remove = () => {
                document.body.classList.remove('no-pointer-events--children');
              };
              if (withDelayedFn !== void 0) {
                setTimeout(() => {
                  remove();
                  withDelayedFn();
                }, 50);
              } else {
                remove();
              }
            } else if (withDelayedFn !== void 0) {
              withDelayedFn();
            }
          };
        };
        if (ctx.event.detected === true) {
          ctx.event.isFirst !== true && handleEvent(evt, ctx.event.mouse);
          const {
            payload,
            synthetic
          } = getChanges(evt, ctx, false);
          if (payload !== void 0) {
            if (ctx.handler(payload) === false) {
              ctx.end(evt);
            } else {
              if (ctx.styleCleanup === void 0 && ctx.event.isFirst === true) {
                start();
              }
              ctx.event.lastX = payload.position.left;
              ctx.event.lastY = payload.position.top;
              ctx.event.lastDir = synthetic === true ? void 0 : payload.direction;
              ctx.event.isFirst = false;
            }
          }
          return;
        }
        if (ctx.direction.all === true
        // account for UMD too where modifiers will be lowercased to work
        || isMouseEvt === true && (ctx.modifiers.mouseAllDir === true || ctx.modifiers.mousealldir === true)) {
          start();
          ctx.event.detected = true;
          ctx.move(evt);
          return;
        }
        const absX = Math.abs(distX),
          absY = Math.abs(distY);
        if (absX !== absY) {
          if (ctx.direction.horizontal === true && absX > absY || ctx.direction.vertical === true && absX < absY || ctx.direction.up === true && absX < absY && distY < 0 || ctx.direction.down === true && absX < absY && distY > 0 || ctx.direction.left === true && absX > absY && distX < 0 || ctx.direction.right === true && absX > absY && distX > 0) {
            ctx.event.detected = true;
            ctx.move(evt);
          } else {
            ctx.end(evt, true);
          }
        }
      },
      end(evt, abort) {
        if (ctx.event === void 0) {
          return;
        }
        (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .cleanEvt */ .Fh)(ctx, 'temp');
        _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__/* .client */ .Sn.is.firefox === true && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .preventDraggable */ .M5)(el, false);
        if (abort === true) {
          ctx.styleCleanup !== void 0 && ctx.styleCleanup();
          if (ctx.event.detected !== true && ctx.initialEvent !== void 0) {
            ctx.initialEvent.target.dispatchEvent(ctx.initialEvent.event);
          }
        } else if (ctx.event.detected === true) {
          ctx.event.isFirst === true && ctx.handler(getChanges(evt === void 0 ? ctx.lastEvt : evt, ctx).payload);
          const {
            payload
          } = getChanges(evt === void 0 ? ctx.lastEvt : evt, ctx, true);
          const fn = () => {
            ctx.handler(payload);
          };
          if (ctx.styleCleanup !== void 0) {
            ctx.styleCleanup(fn);
          } else {
            fn();
          }
        }
        ctx.event = void 0;
        ctx.initialEvent = void 0;
        ctx.lastEvt = void 0;
      }
    };
    el.__qtouchpan = ctx;
    if (modifiers.mouse === true) {
      // account for UMD too where modifiers will be lowercased to work
      const capture = modifiers.mouseCapture === true || modifiers.mousecapture === true ? 'Capture' : '';
      (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .addEvt */ .Z4)(ctx, 'main', [[el, 'mousedown', 'mouseStart', `passive${capture}`]]);
    }
    _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__/* .client */ .Sn.has.touch === true && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .addEvt */ .Z4)(ctx, 'main', [[el, 'touchstart', 'touchStart', `passive${modifiers.capture === true ? 'Capture' : ''}`], [el, 'touchmove', 'noop', 'notPassiveCapture'] // cannot be passive (ex: iOS scroll)
    ]);
  },
  updated(el, bindings) {
    const ctx = el.__qtouchpan;
    if (ctx !== void 0) {
      if (bindings.oldValue !== bindings.value) {
        typeof value !== 'function' && ctx.end();
        ctx.handler = bindings.value;
      }
      ctx.direction = (0,_utils_private_touch_touch_js__WEBPACK_IMPORTED_MODULE_1__/* .getModifierDirections */ .U)(bindings.modifiers);
    }
  },
  beforeUnmount(el) {
    const ctx = el.__qtouchpan;
    if (ctx !== void 0) {
      // emit the end event when the directive is destroyed while active
      // this is only needed in TouchPan because the rest of the touch directives do not emit an end event
      // the condition is also checked in the start of function but we avoid the call
      ctx.event !== void 0 && ctx.end();
      (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .cleanEvt */ .Fh)(ctx, 'main');
      (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .cleanEvt */ .Fh)(ctx, 'temp');
      _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__/* .client */ .Sn.is.firefox === true && (0,_utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .preventDraggable */ .M5)(el, false);
      ctx.styleCleanup !== void 0 && ctx.styleCleanup();
      delete el.__qtouchpan;
    }
  }
}));

/***/ }),

/***/ 4835:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  i: () => (/* binding */ createChildApp),
  A: () => (/* binding */ install_quasar)
});

// EXTERNAL MODULE: ./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js
var runtime_dom_esm_bundler = __webpack_require__(9104);
// EXTERNAL MODULE: ./node_modules/quasar/src/plugins/platform/Platform.js
var Platform = __webpack_require__(1597);
// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.push.js
var es_array_push = __webpack_require__(239);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/event/event.js
var event_event = __webpack_require__(2500);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/debounce/debounce.js
var debounce = __webpack_require__(3500);
;// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/screen/Screen.js





const SIZE_LIST = ['sm', 'md', 'lg', 'xl'];
const {
  passive
} = event_event/* listenOpts */.mG;
/* harmony default export */ const Screen = ((0,create/* createReactivePlugin */.Xj)({
  width: 0,
  height: 0,
  name: 'xs',
  sizes: {
    sm: 600,
    md: 1024,
    lg: 1440,
    xl: 1920
  },
  lt: {
    sm: true,
    md: true,
    lg: true,
    xl: true
  },
  gt: {
    xs: false,
    sm: false,
    md: false,
    lg: false
  },
  xs: true,
  sm: false,
  md: false,
  lg: false,
  xl: false
}, {
  setSizes: event_event/* noop */.lQ,
  setDebounce: event_event/* noop */.lQ,
  install({
    $q,
    onSSRHydrated
  }) {
    $q.screen = this;
    if (false) {}
    if (this.__installed === true) {
      if ($q.config.screen !== void 0) {
        if ($q.config.screen.bodyClasses === false) {
          document.body.classList.remove(`screen--${this.name}`);
        } else {
          this.__update(true);
        }
      }
      return;
    }
    const {
      visualViewport
    } = window;
    const target = visualViewport || window;
    const scrollingElement = document.scrollingElement || document.documentElement;
    const getSize = visualViewport === void 0 || Platform/* client */.Sn.is.mobile === true ? () => [Math.max(window.innerWidth, scrollingElement.clientWidth), Math.max(window.innerHeight, scrollingElement.clientHeight)] : () => [visualViewport.width * visualViewport.scale + window.innerWidth - scrollingElement.clientWidth, visualViewport.height * visualViewport.scale + window.innerHeight - scrollingElement.clientHeight];
    const classes = $q.config.screen !== void 0 && $q.config.screen.bodyClasses === true;
    this.__update = force => {
      const [w, h] = getSize();
      if (h !== this.height) {
        this.height = h;
      }
      if (w !== this.width) {
        this.width = w;
      } else if (force !== true) {
        return;
      }
      let s = this.sizes;
      this.gt.xs = w >= s.sm;
      this.gt.sm = w >= s.md;
      this.gt.md = w >= s.lg;
      this.gt.lg = w >= s.xl;
      this.lt.sm = w < s.sm;
      this.lt.md = w < s.md;
      this.lt.lg = w < s.lg;
      this.lt.xl = w < s.xl;
      this.xs = this.lt.sm;
      this.sm = this.gt.xs === true && this.lt.md === true;
      this.md = this.gt.sm === true && this.lt.lg === true;
      this.lg = this.gt.md === true && this.lt.xl === true;
      this.xl = this.gt.lg;
      s = this.xs === true && 'xs' || this.sm === true && 'sm' || this.md === true && 'md' || this.lg === true && 'lg' || 'xl';
      if (s !== this.name) {
        if (classes === true) {
          document.body.classList.remove(`screen--${this.name}`);
          document.body.classList.add(`screen--${s}`);
        }
        this.name = s;
      }
    };
    let updateEvt,
      updateSizes = {},
      updateDebounce = 16;
    this.setSizes = sizes => {
      SIZE_LIST.forEach(name => {
        if (sizes[name] !== void 0) {
          updateSizes[name] = sizes[name];
        }
      });
    };
    this.setDebounce = deb => {
      updateDebounce = deb;
    };
    const start = () => {
      const style = getComputedStyle(document.body);

      // if css props available
      if (style.getPropertyValue('--q-size-sm')) {
        SIZE_LIST.forEach(name => {
          this.sizes[name] = parseInt(style.getPropertyValue(`--q-size-${name}`), 10);
        });
      }
      this.setSizes = sizes => {
        SIZE_LIST.forEach(name => {
          if (sizes[name]) {
            this.sizes[name] = sizes[name];
          }
        });
        this.__update(true);
      };
      this.setDebounce = delay => {
        updateEvt !== void 0 && target.removeEventListener('resize', updateEvt, passive);
        updateEvt = delay > 0 ? (0,debounce/* default */.A)(this.__update, delay) : this.__update;
        target.addEventListener('resize', updateEvt, passive);
      };
      this.setDebounce(updateDebounce);
      if (Object.keys(updateSizes).length !== 0) {
        this.setSizes(updateSizes);
        updateSizes = void 0; // free up memory
      } else {
        this.__update();
      }

      // due to optimizations, this would be left out otherwise
      classes === true && this.name === 'xs' && document.body.classList.add('screen--xs');
    };
    if (Platform/* isRuntimeSsrPreHydration */.ot.value === true) {
      onSSRHydrated.push(start);
    } else {
      start();
    }
  }
}));
;// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/dark/Dark.js

const Plugin = (0,create/* createReactivePlugin */.Xj)({
  isActive: false,
  mode: false
}, {
  __media: void 0,
  set(val) {
    if (false) {}
    Plugin.mode = val;
    if (val === 'auto') {
      if (Plugin.__media === void 0) {
        Plugin.__media = window.matchMedia('(prefers-color-scheme: dark)');
        Plugin.__updateMedia = () => {
          Plugin.set('auto');
        };
        Plugin.__media.addListener(Plugin.__updateMedia);
      }
      val = Plugin.__media.matches;
    } else if (Plugin.__media !== void 0) {
      Plugin.__media.removeListener(Plugin.__updateMedia);
      Plugin.__media = void 0;
    }
    Plugin.isActive = val === true;
    document.body.classList.remove(`body--${val === true ? 'light' : 'dark'}`);
    document.body.classList.add(`body--${val === true ? 'dark' : 'light'}`);
  },
  toggle() {
    if (true) {
      Plugin.set(Plugin.isActive === false);
    }
  },
  install({
    $q,
    ssrContext
  }) {
    const {
      dark
    } = $q.config;
    if (false) {}
    $q.dark = this;
    if (this.__installed !== true) {
      this.set(dark !== void 0 ? dark : false);
    }
  }
});
/* harmony default export */ const Dark = (Plugin);
// EXTERNAL MODULE: ./node_modules/core-js/modules/esnext.set.difference.v2.js
var esnext_set_difference_v2 = __webpack_require__(8812);
// EXTERNAL MODULE: ./node_modules/core-js/modules/esnext.set.intersection.v2.js
var esnext_set_intersection_v2 = __webpack_require__(2042);
// EXTERNAL MODULE: ./node_modules/core-js/modules/esnext.set.is-disjoint-from.v2.js
var esnext_set_is_disjoint_from_v2 = __webpack_require__(9875);
// EXTERNAL MODULE: ./node_modules/core-js/modules/esnext.set.is-subset-of.v2.js
var esnext_set_is_subset_of_v2 = __webpack_require__(2090);
// EXTERNAL MODULE: ./node_modules/core-js/modules/esnext.set.is-superset-of.v2.js
var esnext_set_is_superset_of_v2 = __webpack_require__(8441);
// EXTERNAL MODULE: ./node_modules/core-js/modules/esnext.set.symmetric-difference.v2.js
var esnext_set_symmetric_difference_v2 = __webpack_require__(8462);
// EXTERNAL MODULE: ./node_modules/core-js/modules/esnext.set.union.v2.js
var esnext_set_union_v2 = __webpack_require__(2336);
;// CONCATENATED MODULE: ./node_modules/quasar/src/utils/css-var/set-css-var.js
function setCssVar(propName, value, element = document.body) {
  if (typeof propName !== 'string') {
    throw new TypeError('Expected a string as propName');
  }
  if (typeof value !== 'string') {
    throw new TypeError('Expected a string as value');
  }
  if (!(element instanceof Element)) {
    throw new TypeError('Expected a DOM element');
  }
  element.style.setProperty(`--q-${propName}`, value);
}
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.keyboard/key-composition.js
var key_composition = __webpack_require__(2906);
;// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/private.body/Body.js












function getMobilePlatform(is) {
  if (is.ios === true) return 'ios';
  if (is.android === true) return 'android';
}
function getBodyClasses({
  is,
  has,
  within
}, cfg) {
  const cls = [is.desktop === true ? 'desktop' : 'mobile', `${has.touch === false ? 'no-' : ''}touch`];
  if (is.mobile === true) {
    const mobile = getMobilePlatform(is);
    mobile !== void 0 && cls.push('platform-' + mobile);
  }
  if (is.nativeMobile === true) {
    const type = is.nativeMobileWrapper;
    cls.push(type);
    cls.push('native-mobile');
    if (is.ios === true && (cfg[type] === void 0 || cfg[type].iosStatusBarPadding !== false)) {
      cls.push('q-ios-padding');
    }
  } else if (is.electron === true) {
    cls.push('electron');
  } else if (is.bex === true) {
    cls.push('bex');
  }
  within.iframe === true && cls.push('within-iframe');
  return cls;
}
function applyClientSsrCorrections() {
  const {
    is
  } = Platform/* client */.Sn;
  const classes = document.body.className;
  const classList = new Set(classes.replace(/ {2}/g, ' ').split(' '));
  if (is.nativeMobile !== true && is.electron !== true && is.bex !== true) {
    if (is.desktop === true) {
      classList.delete('mobile');
      classList.delete('platform-ios');
      classList.delete('platform-android');
      classList.add('desktop');
    } else if (is.mobile === true) {
      classList.delete('desktop');
      classList.add('mobile');
      classList.delete('platform-ios');
      classList.delete('platform-android');
      const mobile = getMobilePlatform(is);
      if (mobile !== void 0) {
        classList.add(`platform-${mobile}`);
      }
    }
  }
  if (Platform/* client */.Sn.has.touch === true) {
    classList.delete('no-touch');
    classList.add('touch');
  }
  if (Platform/* client */.Sn.within.iframe === true) {
    classList.add('within-iframe');
  }
  const newCls = Array.from(classList).join(' ');
  if (classes !== newCls) {
    document.body.className = newCls;
  }
}
function setColors(brand) {
  for (const color in brand) {
    setCssVar(color, brand[color]);
  }
}
/* harmony default export */ const Body = ({
  install(opts) {
    if (false) {}
    if (this.__installed === true) return;
    if (Platform/* isRuntimeSsrPreHydration */.ot.value === true) {
      applyClientSsrCorrections();
    } else {
      const {
        $q
      } = opts;
      $q.config.brand !== void 0 && setColors($q.config.brand);
      const cls = getBodyClasses(Platform/* client */.Sn, $q.config);
      document.body.classList.add.apply(document.body.classList, cls);
    }
    if (Platform/* client */.Sn.is.ios === true) {
      // needed for iOS button active state
      document.body.addEventListener('touchstart', event_event/* noop */.lQ);
    }
    window.addEventListener('keydown', key_composition/* onKeyDownComposition */.V7, true);
  }
});
// EXTERNAL MODULE: ./node_modules/quasar/src/plugins/private.history/History.js
var History = __webpack_require__(4848);
// EXTERNAL MODULE: ./node_modules/quasar/src/plugins/lang/Lang.js + 1 modules
var Lang = __webpack_require__(4360);
// EXTERNAL MODULE: ./node_modules/quasar/src/plugins/icon-set/IconSet.js + 1 modules
var IconSet = __webpack_require__(3493);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.symbols/symbols.js
var symbols = __webpack_require__(7973);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.config/instance-config.js
var instance_config = __webpack_require__(8253);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/is/is.js
var is = __webpack_require__(1054);
;// CONCATENATED MODULE: ./node_modules/quasar/src/install-quasar.js












/**
 * If the list below changes, make sure
 * to also edit /ui/testing/specs/generators/generator.plugin.js
 * on the "autoInstalledPlugins" array
 */
const autoInstalledPlugins = [Platform/* default */.Ay, Body, Dark, Screen, History/* default */.A, Lang/* default */.A, IconSet/* default */.A];
function createChildApp(appCfg, parentApp) {
  const app = (0,runtime_dom_esm_bundler/* createApp */.Ef)(appCfg);
  app.config.globalProperties = parentApp.config.globalProperties;
  const {
    reload,
    ...appContext
  } = parentApp._context;
  Object.assign(app._context, appContext);
  return app;
}
function installPlugins(pluginOpts, pluginList) {
  pluginList.forEach(Plugin => {
    Plugin.install(pluginOpts);
    Plugin.__installed = true;
  });
}
function prepareApp(app, uiOpts, pluginOpts) {
  app.config.globalProperties.$q = pluginOpts.$q;
  app.provide(symbols/* quasarKey */.XA, pluginOpts.$q);
  installPlugins(pluginOpts, autoInstalledPlugins);
  uiOpts.components !== void 0 && Object.values(uiOpts.components).forEach(c => {
    if ((0,is/* isObject */.Gv)(c) === true && c.name !== void 0) {
      app.component(c.name, c);
    }
  });
  uiOpts.directives !== void 0 && Object.values(uiOpts.directives).forEach(d => {
    if ((0,is/* isObject */.Gv)(d) === true && d.name !== void 0) {
      app.directive(d.name, d);
    }
  });
  uiOpts.plugins !== void 0 && installPlugins(pluginOpts, Object.values(uiOpts.plugins).filter(p => typeof p.install === 'function' && autoInstalledPlugins.includes(p) === false));
  if (Platform/* isRuntimeSsrPreHydration */.ot.value === true) {
    pluginOpts.$q.onSSRHydrated = () => {
      pluginOpts.onSSRHydrated.forEach(fn => {
        fn();
      });
      pluginOpts.$q.onSSRHydrated = () => {};
    };
  }
}
/* harmony default export */ const install_quasar = ( false ? 0 : function (parentApp, opts = {}) {
  const $q = {
    version: "2.16.6"
  };
  if (instance_config/* globalConfigIsFrozen */.Or === false) {
    if (opts.config !== void 0) {
      Object.assign(instance_config/* globalConfig */.cr, opts.config);
    }
    $q.config = {
      ...instance_config/* globalConfig */.cr
    };
    (0,instance_config/* freezeGlobalConfig */.xX)();
  } else {
    $q.config = opts.config || {};
  }
  prepareApp(parentApp, opts, {
    parentApp,
    $q,
    lang: opts.lang,
    iconSet: opts.iconSet,
    onSSRHydrated: []
  });
});

/***/ }),

/***/ 4806:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9467);
/* harmony import */ var _utils_private_config_nodes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8536);


const prefixes = {};
function assignFn(fn) {
  Object.assign(Plugin, {
    request: fn,
    exit: fn,
    toggle: fn
  });
}
function getFullscreenElement() {
  return document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement || null;
}
function updateEl() {
  const newEl = Plugin.activeEl = Plugin.isActive === false ? null : getFullscreenElement();
  (0,_utils_private_config_nodes_js__WEBPACK_IMPORTED_MODULE_0__/* .changeGlobalNodesTarget */ .YO)(newEl === null || newEl === document.documentElement ? document.body : newEl);
}
function togglePluginState() {
  Plugin.isActive = Plugin.isActive === false;
  updateEl();
}

// needed for consistency across browsers
function promisify(target, fn) {
  try {
    const res = target[fn]();
    return res === void 0 ? Promise.resolve() : res;
  } catch (err) {
    return Promise.reject(err);
  }
}
const Plugin = (0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_1__/* .createReactivePlugin */ .Xj)({
  isActive: false,
  activeEl: null
}, {
  isCapable: false,
  install({
    $q
  }) {
    $q.fullscreen = this;
  }
});
if (false) {} else {
  prefixes.request = ['requestFullscreen', 'msRequestFullscreen', 'mozRequestFullScreen', 'webkitRequestFullscreen'].find(request => document.documentElement[request] !== void 0);
  Plugin.isCapable = prefixes.request !== void 0;
  if (Plugin.isCapable === false) {
    // it means the browser does NOT support it
    assignFn(() => Promise.reject('Not capable'));
  } else {
    Object.assign(Plugin, {
      request(target) {
        const el = target || document.documentElement;
        const {
          activeEl
        } = Plugin;
        if (el === activeEl) {
          return Promise.resolve();
        }
        const queue = activeEl !== null && el.contains(activeEl) === true ? Plugin.exit() : Promise.resolve();
        return queue.finally(() => promisify(el, prefixes.request));
      },
      exit() {
        return Plugin.isActive === true ? promisify(document, prefixes.exit) : Promise.resolve();
      },
      toggle(target) {
        return Plugin.isActive === true ? Plugin.exit() : Plugin.request(target);
      }
    });
    prefixes.exit = ['exitFullscreen', 'msExitFullscreen', 'mozCancelFullScreen', 'webkitExitFullscreen'].find(exit => document[exit]);
    Plugin.isActive = Boolean(getFullscreenElement());
    Plugin.isActive === true && updateEl();
    ['onfullscreenchange', 'onmsfullscreenchange', 'onwebkitfullscreenchange'].forEach(evt => {
      document[evt] = togglePluginState;
    });
  }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Plugin);

/***/ }),

/***/ 3493:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ IconSet)
});

// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.inject-obj-prop/inject-obj-prop.js
var inject_obj_prop = __webpack_require__(2453);
;// CONCATENATED MODULE: ./node_modules/quasar/icon-set/material-icons.js
/* harmony default export */ const material_icons = ({
  name: 'material-icons',
  type: {
    positive: 'check_circle',
    negative: 'warning',
    info: 'info',
    warning: 'priority_high'
  },
  arrow: {
    up: 'arrow_upward',
    right: 'arrow_forward',
    down: 'arrow_downward',
    left: 'arrow_back',
    dropdown: 'arrow_drop_down'
  },
  chevron: {
    left: 'chevron_left',
    right: 'chevron_right'
  },
  colorPicker: {
    spectrum: 'gradient',
    tune: 'tune',
    palette: 'style'
  },
  pullToRefresh: {
    icon: 'refresh'
  },
  carousel: {
    left: 'chevron_left',
    right: 'chevron_right',
    up: 'keyboard_arrow_up',
    down: 'keyboard_arrow_down',
    navigationIcon: 'lens'
  },
  chip: {
    remove: 'cancel',
    selected: 'check'
  },
  datetime: {
    arrowLeft: 'chevron_left',
    arrowRight: 'chevron_right',
    now: 'access_time',
    today: 'today'
  },
  editor: {
    bold: 'format_bold',
    italic: 'format_italic',
    strikethrough: 'strikethrough_s',
    underline: 'format_underlined',
    unorderedList: 'format_list_bulleted',
    orderedList: 'format_list_numbered',
    subscript: 'vertical_align_bottom',
    superscript: 'vertical_align_top',
    hyperlink: 'link',
    toggleFullscreen: 'fullscreen',
    quote: 'format_quote',
    left: 'format_align_left',
    center: 'format_align_center',
    right: 'format_align_right',
    justify: 'format_align_justify',
    print: 'print',
    outdent: 'format_indent_decrease',
    indent: 'format_indent_increase',
    removeFormat: 'format_clear',
    formatting: 'text_format',
    fontSize: 'format_size',
    align: 'format_align_left',
    hr: 'remove',
    undo: 'undo',
    redo: 'redo',
    heading: 'format_size',
    code: 'code',
    size: 'format_size',
    font: 'font_download',
    viewSource: 'code'
  },
  expansionItem: {
    icon: 'keyboard_arrow_down',
    denseIcon: 'arrow_drop_down'
  },
  fab: {
    icon: 'add',
    activeIcon: 'close'
  },
  field: {
    clear: 'cancel',
    error: 'error'
  },
  pagination: {
    first: 'first_page',
    prev: 'keyboard_arrow_left',
    next: 'keyboard_arrow_right',
    last: 'last_page'
  },
  rating: {
    icon: 'grade'
  },
  stepper: {
    done: 'check',
    active: 'edit',
    error: 'warning'
  },
  tabs: {
    left: 'chevron_left',
    right: 'chevron_right',
    up: 'keyboard_arrow_up',
    down: 'keyboard_arrow_down'
  },
  table: {
    arrowUp: 'arrow_upward',
    warning: 'warning',
    firstPage: 'first_page',
    prevPage: 'chevron_left',
    nextPage: 'chevron_right',
    lastPage: 'last_page'
  },
  tree: {
    icon: 'play_arrow'
  },
  uploader: {
    done: 'done',
    clear: 'clear',
    add: 'add_box',
    upload: 'cloud_upload',
    removeQueue: 'clear_all',
    removeUploaded: 'done_all'
  }
});
;// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/icon-set/IconSet.js



const Plugin = (0,create/* createReactivePlugin */.Xj)({
  iconMapFn: null,
  __qIconSet: {}
}, {
  // props: object

  set(setObject, ssrContext) {
    const def = {
      ...setObject
    };
    if (false) {} else {
      def.set = Plugin.set;
      Object.assign(Plugin.__qIconSet, def);
    }
  },
  install({
    $q,
    iconSet,
    ssrContext
  }) {
    if (false) {} else {
      if ($q.config.iconMapFn !== void 0) {
        this.iconMapFn = $q.config.iconMapFn;
      }
      $q.iconSet = this.__qIconSet;
      (0,inject_obj_prop/* injectProp */.$)($q, 'iconMapFn', () => this.iconMapFn, val => {
        this.iconMapFn = val;
      });
      if (this.__installed === true) {
        iconSet !== void 0 && this.set(iconSet);
      } else {
        this.props = new Proxy(this.__qIconSet, {
          get() {
            return Reflect.get(...arguments);
          },
          ownKeys(target) {
            return Reflect.ownKeys(target).filter(key => key !== 'set');
          }
        });
        this.set(iconSet || material_icons);
      }
    }
  }
});
/* harmony default export */ const IconSet = (Plugin);

/***/ }),

/***/ 4360:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  A: () => (/* binding */ Lang),
  o: () => (/* reexport */ en_US)
});

// EXTERNAL MODULE: ./node_modules/quasar/src/utils/private.create/create.js
var create = __webpack_require__(9467);
;// CONCATENATED MODULE: ./node_modules/quasar/lang/en-US.js
/* harmony default export */ const en_US = ({
  isoName: 'en-US',
  nativeName: 'English (US)',
  label: {
    clear: 'Clear',
    ok: 'OK',
    cancel: 'Cancel',
    close: 'Close',
    set: 'Set',
    select: 'Select',
    reset: 'Reset',
    remove: 'Remove',
    update: 'Update',
    create: 'Create',
    search: 'Search',
    filter: 'Filter',
    refresh: 'Refresh',
    expand: label => label ? `Expand "${label}"` : 'Expand',
    collapse: label => label ? `Collapse "${label}"` : 'Collapse'
  },
  date: {
    days: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    daysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    firstDayOfWeek: 0,
    // 0-6, 0 - Sunday, 1 Monday, ...
    format24h: false,
    pluralDay: 'days'
  },
  table: {
    noData: 'No data available',
    noResults: 'No matching records found',
    loading: 'Loading...',
    selectedRecords: rows => rows === 1 ? '1 record selected.' : (rows === 0 ? 'No' : rows) + ' records selected.',
    recordsPerPage: 'Records per page:',
    allRows: 'All',
    pagination: (start, end, total) => start + '-' + end + ' of ' + total,
    columns: 'Columns'
  },
  editor: {
    url: 'URL',
    bold: 'Bold',
    italic: 'Italic',
    strikethrough: 'Strikethrough',
    underline: 'Underline',
    unorderedList: 'Unordered List',
    orderedList: 'Ordered List',
    subscript: 'Subscript',
    superscript: 'Superscript',
    hyperlink: 'Hyperlink',
    toggleFullscreen: 'Toggle Fullscreen',
    quote: 'Quote',
    left: 'Left align',
    center: 'Center align',
    right: 'Right align',
    justify: 'Justify align',
    print: 'Print',
    outdent: 'Decrease indentation',
    indent: 'Increase indentation',
    removeFormat: 'Remove formatting',
    formatting: 'Formatting',
    fontSize: 'Font Size',
    align: 'Align',
    hr: 'Insert Horizontal Rule',
    undo: 'Undo',
    redo: 'Redo',
    heading1: 'Heading 1',
    heading2: 'Heading 2',
    heading3: 'Heading 3',
    heading4: 'Heading 4',
    heading5: 'Heading 5',
    heading6: 'Heading 6',
    paragraph: 'Paragraph',
    code: 'Code',
    size1: 'Very small',
    size2: 'A bit small',
    size3: 'Normal',
    size4: 'Medium-large',
    size5: 'Big',
    size6: 'Very big',
    size7: 'Maximum',
    defaultFont: 'Default Font',
    viewSource: 'View Source'
  },
  tree: {
    noNodes: 'No nodes available',
    noResults: 'No matching nodes found'
  }
});
;// CONCATENATED MODULE: ./node_modules/quasar/src/plugins/lang/Lang.js


function getLocale() {
  if (false) {}
  const val = Array.isArray(navigator.languages) === true && navigator.languages.length !== 0 ? navigator.languages[0] : navigator.language;
  if (typeof val === 'string') {
    return val.split(/[-_]/).map((v, i) => i === 0 ? v.toLowerCase() : i > 1 || v.length < 4 ? v.toUpperCase() : v[0].toUpperCase() + v.slice(1).toLowerCase()).join('-');
  }
}
const Plugin = (0,create/* createReactivePlugin */.Xj)({
  __qLang: {}
}, {
  // props: object
  // __langConfig: object

  getLocale,
  set(langObject = en_US, ssrContext) {
    const lang = {
      ...langObject,
      rtl: langObject.rtl === true,
      getLocale
    };
    if (false) {} else {
      lang.set = Plugin.set;
      if (Plugin.__langConfig === void 0 || Plugin.__langConfig.noHtmlAttrs !== true) {
        const el = document.documentElement;
        el.setAttribute('dir', lang.rtl === true ? 'rtl' : 'ltr');
        el.setAttribute('lang', lang.isoName);
      }
      Object.assign(Plugin.__qLang, lang);
    }
  },
  install({
    $q,
    lang,
    ssrContext
  }) {
    if (false) {} else {
      $q.lang = Plugin.__qLang;
      Plugin.__langConfig = $q.config.lang;
      if (this.__installed === true) {
        lang !== void 0 && this.set(lang);
      } else {
        this.props = new Proxy(this.__qLang, {
          get() {
            return Reflect.get(...arguments);
          },
          ownKeys(target) {
            return Reflect.ownKeys(target).filter(key => key !== 'set' && key !== 'getLocale');
          }
        });
        this.set(lang || en_US);
      }
    }
  }
});
/* harmony default export */ const Lang = (Plugin);


/***/ }),

/***/ 989:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(8734);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(1758);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(9104);
/* harmony import */ var _components_avatar_QAvatar_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3952);
/* harmony import */ var _components_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(492);
/* harmony import */ var _components_btn_QBtn_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6384);
/* harmony import */ var _components_spinner_QSpinner_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8210);
/* harmony import */ var _install_quasar_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4835);
/* harmony import */ var _utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9467);
/* harmony import */ var _utils_event_event_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2500);
/* harmony import */ var _utils_private_config_nodes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8536);
/* harmony import */ var _utils_is_is_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(1054);











let uid = 0;
const defaults = {};
const groups = {};
const notificationsList = {};
const positionClass = {};
const emptyRE = /^\s*$/;
const notifRefs = [];
const invalidTimeoutValues = [void 0, null, true, false, ''];
const positionList = ['top-left', 'top-right', 'bottom-left', 'bottom-right', 'top', 'bottom', 'left', 'right', 'center'];
const badgePositions = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];
const notifTypes = {
  positive: {
    icon: $q => $q.iconSet.type.positive,
    color: 'positive'
  },
  negative: {
    icon: $q => $q.iconSet.type.negative,
    color: 'negative'
  },
  warning: {
    icon: $q => $q.iconSet.type.warning,
    color: 'warning',
    textColor: 'dark'
  },
  info: {
    icon: $q => $q.iconSet.type.info,
    color: 'info'
  },
  ongoing: {
    group: false,
    timeout: 0,
    spinner: true,
    color: 'grey-8'
  }
};
function addNotification(config, $q, originalApi) {
  if (!config) {
    return logError('parameter required');
  }
  let Api;
  const notif = {
    textColor: 'white'
  };
  if (config.ignoreDefaults !== true) {
    Object.assign(notif, defaults);
  }
  if ((0,_utils_is_is_js__WEBPACK_IMPORTED_MODULE_8__/* .isObject */ .Gv)(config) === false) {
    if (notif.type) {
      Object.assign(notif, notifTypes[notif.type]);
    }
    config = {
      message: config
    };
  }
  Object.assign(notif, notifTypes[config.type || notif.type], config);
  if (typeof notif.icon === 'function') {
    notif.icon = notif.icon($q);
  }
  if (!notif.spinner) {
    notif.spinner = false;
  } else {
    if (notif.spinner === true) {
      notif.spinner = _components_spinner_QSpinner_js__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A;
    }
    notif.spinner = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .markRaw */ .IG)(notif.spinner);
  }
  notif.meta = {
    hasMedia: Boolean(notif.spinner !== false || notif.icon || notif.avatar),
    hasText: hasContent(notif.message) || hasContent(notif.caption)
  };
  if (notif.position) {
    if (positionList.includes(notif.position) === false) {
      return logError('wrong position', config);
    }
  } else {
    notif.position = 'bottom';
  }
  if (invalidTimeoutValues.includes(notif.timeout) === true) {
    notif.timeout = 5000;
  } else {
    const t = Number(notif.timeout); // we catch exponential notation too with Number() casting
    if (isNaN(t) || t < 0) {
      return logError('wrong timeout', config);
    }
    notif.timeout = Number.isFinite(t) ? t : 0;
  }
  if (notif.timeout === 0) {
    notif.progress = false;
  } else if (notif.progress === true) {
    notif.meta.progressClass = 'q-notification__progress' + (notif.progressClass ? ` ${notif.progressClass}` : '');
    notif.meta.progressStyle = {
      animationDuration: `${notif.timeout + 1000}ms`
    };
  }
  const actions = (Array.isArray(config.actions) === true ? config.actions : []).concat(config.ignoreDefaults !== true && Array.isArray(defaults.actions) === true ? defaults.actions : []).concat(notifTypes[config.type] !== void 0 && Array.isArray(notifTypes[config.type].actions) === true ? notifTypes[config.type].actions : []);
  const {
    closeBtn
  } = notif;
  closeBtn && actions.push({
    label: typeof closeBtn === 'string' ? closeBtn : $q.lang.label.close
  });
  notif.actions = actions.map(({
    handler,
    noDismiss,
    ...item
  }) => ({
    flat: true,
    ...item,
    onClick: typeof handler === 'function' ? () => {
      handler();
      noDismiss !== true && dismiss();
    } : () => {
      dismiss();
    }
  }));
  if (notif.multiLine === void 0) {
    notif.multiLine = notif.actions.length > 1;
  }
  Object.assign(notif.meta, {
    class: 'q-notification row items-stretch' + ` q-notification--${notif.multiLine === true ? 'multi-line' : 'standard'}` + (notif.color !== void 0 ? ` bg-${notif.color}` : '') + (notif.textColor !== void 0 ? ` text-${notif.textColor}` : '') + (notif.classes !== void 0 ? ` ${notif.classes}` : ''),
    wrapperClass: 'q-notification__wrapper col relative-position border-radius-inherit ' + (notif.multiLine === true ? 'column no-wrap justify-center' : 'row items-center'),
    contentClass: 'q-notification__content row items-center' + (notif.multiLine === true ? '' : ' col'),
    leftClass: notif.meta.hasText === true ? 'additional' : 'single',
    attrs: {
      role: 'alert',
      ...notif.attrs
    }
  });
  if (notif.group === false) {
    notif.group = void 0;
    notif.meta.group = void 0;
  } else {
    if (notif.group === void 0 || notif.group === true) {
      // do not replace notifications with different buttons
      notif.group = [notif.message, notif.caption, notif.multiline].concat(notif.actions.map(props => `${props.label}*${props.icon}`)).join('|');
    }
    notif.meta.group = notif.group + '|' + notif.position;
  }
  if (notif.actions.length === 0) {
    notif.actions = void 0;
  } else {
    notif.meta.actionsClass = 'q-notification__actions row items-center ' + (notif.multiLine === true ? 'justify-end' : 'col-auto') + (notif.meta.hasMedia === true ? ' q-notification__actions--with-media' : '');
  }
  if (originalApi !== void 0) {
    // reset timeout if any
    if (originalApi.notif.meta.timer) {
      clearTimeout(originalApi.notif.meta.timer);
      originalApi.notif.meta.timer = void 0;
    }

    // retain uid
    notif.meta.uid = originalApi.notif.meta.uid;

    // replace notif
    const index = notificationsList[notif.position].value.indexOf(originalApi.notif);
    notificationsList[notif.position].value[index] = notif;
  } else {
    const original = groups[notif.meta.group];

    // woohoo, it's a new notification
    if (original === void 0) {
      notif.meta.uid = uid++;
      notif.meta.badge = 1;
      if (['left', 'right', 'center'].indexOf(notif.position) !== -1) {
        notificationsList[notif.position].value.splice(Math.floor(notificationsList[notif.position].value.length / 2), 0, notif);
      } else {
        const action = notif.position.indexOf('top') !== -1 ? 'unshift' : 'push';
        notificationsList[notif.position].value[action](notif);
      }
      if (notif.group !== void 0) {
        groups[notif.meta.group] = notif;
      }
    }
    // ok, so it's NOT a new one
    else {
      // reset timeout if any
      if (original.meta.timer) {
        clearTimeout(original.meta.timer);
        original.meta.timer = void 0;
      }
      if (notif.badgePosition !== void 0) {
        if (badgePositions.includes(notif.badgePosition) === false) {
          return logError('wrong badgePosition', config);
        }
      } else {
        notif.badgePosition = `top-${notif.position.indexOf('left') !== -1 ? 'right' : 'left'}`;
      }
      notif.meta.uid = original.meta.uid;
      notif.meta.badge = original.meta.badge + 1;
      notif.meta.badgeClass = `q-notification__badge q-notification__badge--${notif.badgePosition}` + (notif.badgeColor !== void 0 ? ` bg-${notif.badgeColor}` : '') + (notif.badgeTextColor !== void 0 ? ` text-${notif.badgeTextColor}` : '') + (notif.badgeClass ? ` ${notif.badgeClass}` : '');
      const index = notificationsList[notif.position].value.indexOf(original);
      notificationsList[notif.position].value[index] = groups[notif.meta.group] = notif;
    }
  }
  const dismiss = () => {
    removeNotification(notif);
    Api = void 0;
  };
  if (notif.timeout > 0) {
    notif.meta.timer = setTimeout(() => {
      notif.meta.timer = void 0;
      dismiss();
    }, notif.timeout + /* show duration */1000);
  }

  // only non-groupable can be updated
  if (notif.group !== void 0) {
    return props => {
      if (props !== void 0) {
        logError('trying to update a grouped one which is forbidden', config);
      } else {
        dismiss();
      }
    };
  }
  Api = {
    dismiss,
    config,
    notif
  };
  if (originalApi !== void 0) {
    Object.assign(originalApi, Api);
    return;
  }
  return props => {
    // if notification wasn't previously dismissed
    if (Api !== void 0) {
      // if no params, then we must dismiss the notification
      if (props === void 0) {
        Api.dismiss();
      }
      // otherwise we're updating it
      else {
        const newNotif = Object.assign({}, Api.config, props, {
          group: false,
          position: notif.position
        });
        addNotification(newNotif, $q, Api);
      }
    }
  };
}
function removeNotification(notif) {
  if (notif.meta.timer) {
    clearTimeout(notif.meta.timer);
    notif.meta.timer = void 0;
  }
  const index = notificationsList[notif.position].value.indexOf(notif);
  if (index !== -1) {
    if (notif.group !== void 0) {
      delete groups[notif.meta.group];
    }
    const el = notifRefs['' + notif.meta.uid];
    if (el) {
      const {
        width,
        height
      } = getComputedStyle(el);
      el.style.left = `${el.offsetLeft}px`;
      el.style.width = width;
      el.style.height = height;
    }
    notificationsList[notif.position].value.splice(index, 1);
    if (typeof notif.onDismiss === 'function') {
      notif.onDismiss();
    }
  }
}
function hasContent(str) {
  return str !== void 0 && str !== null && emptyRE.test(str) !== true;
}
function logError(error, config) {
  console.error(`Notify: ${error}`, config);
  return false;
}
function getComponent() {
  return (0,_utils_private_create_create_js__WEBPACK_IMPORTED_MODULE_10__/* .createComponent */ .a0)({
    name: 'QNotifications',
    // hide App from Vue devtools
    devtools: {
      hide: true
    },
    setup() {
      return () => (0,vue__WEBPACK_IMPORTED_MODULE_11__.h)('div', {
        class: 'q-notifications'
      }, positionList.map(pos => {
        return (0,vue__WEBPACK_IMPORTED_MODULE_11__.h)(vue__WEBPACK_IMPORTED_MODULE_12__/* .TransitionGroup */ .F, {
          key: pos,
          class: positionClass[pos],
          tag: 'div',
          name: `q-notification--${pos}`
        }, () => notificationsList[pos].value.map(notif => {
          const meta = notif.meta;
          const mainChild = [];
          if (meta.hasMedia === true) {
            if (notif.spinner !== false) {
              mainChild.push((0,vue__WEBPACK_IMPORTED_MODULE_11__.h)(notif.spinner, {
                class: 'q-notification__spinner q-notification__spinner--' + meta.leftClass,
                color: notif.spinnerColor,
                size: notif.spinnerSize
              }));
            } else if (notif.icon) {
              mainChild.push((0,vue__WEBPACK_IMPORTED_MODULE_11__.h)(_components_icon_QIcon_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A, {
                class: 'q-notification__icon q-notification__icon--' + meta.leftClass,
                name: notif.icon,
                color: notif.iconColor,
                size: notif.iconSize,
                role: 'img'
              }));
            } else if (notif.avatar) {
              mainChild.push((0,vue__WEBPACK_IMPORTED_MODULE_11__.h)(_components_avatar_QAvatar_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A, {
                class: 'q-notification__avatar q-notification__avatar--' + meta.leftClass
              }, () => (0,vue__WEBPACK_IMPORTED_MODULE_11__.h)('img', {
                src: notif.avatar,
                'aria-hidden': 'true'
              })));
            }
          }
          if (meta.hasText === true) {
            let msgChild;
            const msgData = {
              class: 'q-notification__message col'
            };
            if (notif.html === true) {
              msgData.innerHTML = notif.caption ? `<div>${notif.message}</div><div class="q-notification__caption">${notif.caption}</div>` : notif.message;
            } else {
              const msgNode = [notif.message];
              msgChild = notif.caption ? [(0,vue__WEBPACK_IMPORTED_MODULE_11__.h)('div', msgNode), (0,vue__WEBPACK_IMPORTED_MODULE_11__.h)('div', {
                class: 'q-notification__caption'
              }, [notif.caption])] : msgNode;
            }
            mainChild.push((0,vue__WEBPACK_IMPORTED_MODULE_11__.h)('div', msgData, msgChild));
          }
          const child = [(0,vue__WEBPACK_IMPORTED_MODULE_11__.h)('div', {
            class: meta.contentClass
          }, mainChild)];
          notif.progress === true && child.push((0,vue__WEBPACK_IMPORTED_MODULE_11__.h)('div', {
            key: `${meta.uid}|p|${meta.badge}`,
            class: meta.progressClass,
            style: meta.progressStyle
          }));
          notif.actions !== void 0 && child.push((0,vue__WEBPACK_IMPORTED_MODULE_11__.h)('div', {
            class: meta.actionsClass
          }, notif.actions.map(props => (0,vue__WEBPACK_IMPORTED_MODULE_11__.h)(_components_btn_QBtn_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A, props))));
          meta.badge > 1 && child.push((0,vue__WEBPACK_IMPORTED_MODULE_11__.h)('div', {
            key: `${meta.uid}|${meta.badge}`,
            class: notif.meta.badgeClass,
            style: notif.badgeStyle
          }, [meta.badge]));
          return (0,vue__WEBPACK_IMPORTED_MODULE_11__.h)('div', {
            ref: el => {
              notifRefs['' + meta.uid] = el;
            },
            key: meta.uid,
            class: meta.class,
            ...meta.attrs
          }, [(0,vue__WEBPACK_IMPORTED_MODULE_11__.h)('div', {
            class: meta.wrapperClass
          }, child)]);
        }));
      }));
    }
  });
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  setDefaults(opts) {
    if (true) {
      (0,_utils_is_is_js__WEBPACK_IMPORTED_MODULE_8__/* .isObject */ .Gv)(opts) === true && Object.assign(defaults, opts);
    }
  },
  registerType(typeName, typeOpts) {
    if ( true && (0,_utils_is_is_js__WEBPACK_IMPORTED_MODULE_8__/* .isObject */ .Gv)(typeOpts) === true) {
      notifTypes[typeName] = typeOpts;
    }
  },
  install({
    $q,
    parentApp
  }) {
    $q.notify = this.create =  false ? 0 : opts => addNotification(opts, $q);
    $q.notify.setDefaults = this.setDefaults;
    $q.notify.registerType = this.registerType;
    if ($q.config.notify !== void 0) {
      this.setDefaults($q.config.notify);
    }
    if ( true && this.__installed !== true) {
      positionList.forEach(pos => {
        notificationsList[pos] = (0,vue__WEBPACK_IMPORTED_MODULE_9__/* .ref */ .KR)([]);
        const vert = ['left', 'center', 'right'].includes(pos) === true ? 'center' : pos.indexOf('top') !== -1 ? 'top' : 'bottom',
          align = pos.indexOf('left') !== -1 ? 'start' : pos.indexOf('right') !== -1 ? 'end' : 'center',
          classes = ['left', 'right'].includes(pos) ? `items-${pos === 'left' ? 'start' : 'end'} justify-center` : pos === 'center' ? 'flex-center' : `items-${align}`;
        positionClass[pos] = `q-notifications__list q-notifications__list--${vert} fixed column no-wrap ${classes}`;
      });
      const el = (0,_utils_private_config_nodes_js__WEBPACK_IMPORTED_MODULE_7__/* .createGlobalNode */ .US)('q-notify');
      (0,_install_quasar_js__WEBPACK_IMPORTED_MODULE_5__/* .createChildApp */ .i)(getComponent(), parentApp).mount(el);
    }
  }
});

/***/ }),

/***/ 1597:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   Sn: () => (/* binding */ client),
/* harmony export */   ot: () => (/* binding */ isRuntimeSsrPreHydration)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8734);
/* harmony import */ var _utils_private_inject_obj_prop_inject_obj_prop_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2453);

/* eslint-disable no-useless-escape */




/**
 * __ QUASAR_SSR __            -> runs on SSR on client or server
 * __ QUASAR_SSR_SERVER __     -> runs on SSR on server
 * __ QUASAR_SSR_CLIENT __     -> runs on SSR on client
 * __ QUASAR_SSR_PWA __        -> built with SSR+PWA; may run on SSR on client or on PWA client
 *                              (needs runtime detection)
 */

const isRuntimeSsrPreHydration =  false ? 0 : (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .ref */ .KR)( false && (0));
let preHydrationBrowser;
function getMatch(userAgent, platformMatch) {
  const match = /(edg|edge|edga|edgios)\/([\w.]+)/.exec(userAgent) || /(opr)[\/]([\w.]+)/.exec(userAgent) || /(vivaldi)[\/]([\w.]+)/.exec(userAgent) || /(chrome|crios)[\/]([\w.]+)/.exec(userAgent) || /(version)(applewebkit)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(userAgent) || /(webkit)[\/]([\w.]+).*(version)[\/]([\w.]+).*(safari)[\/]([\w.]+)/.exec(userAgent) || /(firefox|fxios)[\/]([\w.]+)/.exec(userAgent) || /(webkit)[\/]([\w.]+)/.exec(userAgent) || /(opera)(?:.*version|)[\/]([\w.]+)/.exec(userAgent) || [];
  return {
    browser: match[5] || match[3] || match[1] || '',
    version: match[4] || match[2] || '0',
    platform: platformMatch[0] || ''
  };
}
function getPlatformMatch(userAgent) {
  return /(ipad)/.exec(userAgent) || /(ipod)/.exec(userAgent) || /(windows phone)/.exec(userAgent) || /(iphone)/.exec(userAgent) || /(kindle)/.exec(userAgent) || /(silk)/.exec(userAgent) || /(android)/.exec(userAgent) || /(win)/.exec(userAgent) || /(mac)/.exec(userAgent) || /(linux)/.exec(userAgent) || /(cros)/.exec(userAgent)
  // TODO: Remove BlackBerry detection. BlackBerry OS, BlackBerry 10, and BlackBerry PlayBook OS
  // is officially dead as of January 4, 2022 (https://www.blackberry.com/us/en/support/devices/end-of-life)
  || /(playbook)/.exec(userAgent) || /(bb)/.exec(userAgent) || /(blackberry)/.exec(userAgent) || [];
}
const hasTouch =  false ? 0 : 'ontouchstart' in window || window.navigator.maxTouchPoints > 0;
function getPlatform(UA) {
  const userAgent = UA.toLowerCase(),
    platformMatch = getPlatformMatch(userAgent),
    matched = getMatch(userAgent, platformMatch),
    browser = {};
  if (matched.browser) {
    browser[matched.browser] = true;
    browser.version = matched.version;
    browser.versionNumber = parseInt(matched.version, 10);
  }
  if (matched.platform) {
    browser[matched.platform] = true;
  }
  const knownMobiles = browser.android || browser.ios || browser.bb || browser.blackberry || browser.ipad || browser.iphone || browser.ipod || browser.kindle || browser.playbook || browser.silk || browser['windows phone'];

  // These are all considered mobile platforms, meaning they run a mobile browser
  if (knownMobiles === true || userAgent.indexOf('mobile') !== -1) {
    browser.mobile = true;
  }
  // If it's not mobile we should consider it's desktop platform, meaning it runs a desktop browser
  // It's a workaround for anonymized user agents
  // (browser.cros || browser.mac || browser.linux || browser.win)
  else {
    browser.desktop = true;
  }
  if (browser['windows phone']) {
    browser.winphone = true;
    delete browser['windows phone'];
  }
  if (browser.edga || browser.edgios || browser.edg) {
    browser.edge = true;
    matched.browser = 'edge';
  } else if (browser.crios) {
    browser.chrome = true;
    matched.browser = 'chrome';
  } else if (browser.fxios) {
    browser.firefox = true;
    matched.browser = 'firefox';
  }

  // Set iOS if on iPod, iPad or iPhone
  if (browser.ipod || browser.ipad || browser.iphone) {
    browser.ios = true;
  }
  if (browser.vivaldi) {
    matched.browser = 'vivaldi';
    browser.vivaldi = true;
  }

  // TODO: The assumption about WebKit based browsers below is not completely accurate.
  // Google released Blink(a fork of WebKit) engine on April 3, 2013, which is really different than WebKit today.
  // Today, one might want to check for WebKit to deal with its bugs, which is used on all browsers on iOS, and Safari browser on all platforms.
  if (
  // Chrome, Opera 15+, Vivaldi and Safari are webkit based browsers
  browser.chrome || browser.opr || browser.safari || browser.vivaldi
  // we expect unknown, non iOS mobile browsers to be webkit based
  || browser.mobile === true && browser.ios !== true && knownMobiles !== true) {
    browser.webkit = true;
  }

  // Opera 15+ are identified as opr
  if (browser.opr) {
    matched.browser = 'opera';
    browser.opera = true;
  }

  // Some browsers are marked as Safari but are not
  if (browser.safari) {
    if (browser.blackberry || browser.bb) {
      matched.browser = 'blackberry';
      browser.blackberry = true;
    } else if (browser.playbook) {
      matched.browser = 'playbook';
      browser.playbook = true;
    } else if (browser.android) {
      matched.browser = 'android';
      browser.android = true;
    } else if (browser.kindle) {
      matched.browser = 'kindle';
      browser.kindle = true;
    } else if (browser.silk) {
      matched.browser = 'silk';
      browser.silk = true;
    }
  }

  // Assign the name and platform variable
  browser.name = matched.browser;
  browser.platform = matched.platform;
  if (true) {
    if (userAgent.indexOf('electron') !== -1) {
      browser.electron = true;
    } else if (document.location.href.indexOf('-extension://') !== -1) {
      browser.bex = true;
    } else {
      if (window.Capacitor !== void 0) {
        browser.capacitor = true;
        browser.nativeMobile = true;
        browser.nativeMobileWrapper = 'capacitor';
      } else if (window._cordovaNative !== void 0 || window.cordova !== void 0) {
        browser.cordova = true;
        browser.nativeMobile = true;
        browser.nativeMobileWrapper = 'cordova';
      }
      if (isRuntimeSsrPreHydration.value === true) {
        /*
         * We need to remember the current state as
         * everything that follows can only be corrected client-side,
         * but we don't want to brake the hydration.
         *
         * The "client" object is imported throughout the UI and should
         * be as accurate as possible given all the knowledge that we posses
         * because decisions are required to be made immediately, even
         * before the hydration occurs.
         */
        preHydrationBrowser = {
          is: {
            ...browser
          }
        };
      }

      /*
       * All the following should be client-side corrections only
       */

      if (hasTouch === true && browser.mac === true && (browser.desktop === true && browser.safari === true || browser.nativeMobile === true && browser.android !== true && browser.ios !== true && browser.ipad !== true)) {
        /*
         * Correction needed for iOS since the default
         * setting on iPad is to request desktop view; if we have
         * touch support and the user agent says it's a
         * desktop, we infer that it's an iPhone/iPad with desktop view
         * so we must fix the false positives
         */

        delete browser.mac;
        delete browser.desktop;
        const platform = Math.min(window.innerHeight, window.innerWidth) > 414 ? 'ipad' : 'iphone';
        Object.assign(browser, {
          mobile: true,
          ios: true,
          platform,
          [platform]: true
        });
      }
      if (browser.mobile !== true && window.navigator.userAgentData && window.navigator.userAgentData.mobile) {
        /*
         * Correction needed on client-side when
         * we also have the navigator userAgentData
         */

        delete browser.desktop;
        browser.mobile = true;
      }
    }
  }
  return browser;
}
const userAgent =  false ? 0 : navigator.userAgent || navigator.vendor || window.opera;
const ssrClient = {
  has: {
    touch: false,
    webStorage: false
  },
  within: {
    iframe: false
  }
};

// We export "client" for hydration error-free parts,
// like touch directives who do not (and must NOT) wait
// for the client takeover;
// Do NOT import this directly in your app, unless you really know
// what you are doing.
const client =  false ? 0 : {
  userAgent,
  is: getPlatform(userAgent),
  has: {
    touch: hasTouch
  },
  within: {
    iframe: window.self !== window.top
  }
};
const Platform = {
  install(opts) {
    const {
      $q
    } = opts;
    if (false) {} else if (isRuntimeSsrPreHydration.value === true) {
      // takeover should increase accuracy for
      // the rest of the props; we also avoid
      // hydration errors
      opts.onSSRHydrated.push(() => {
        Object.assign($q.platform, client);
        isRuntimeSsrPreHydration.value = false;
      });

      // we need to make platform reactive
      // for the takeover phase
      $q.platform = (0,vue__WEBPACK_IMPORTED_MODULE_1__/* .reactive */ .Kh)(this);
    } else {
      $q.platform = this;
    }
  }
};
if (false) {} else {
  // do not access window.localStorage without
  // devland actually using it as this will get
  // reported under "Cookies" in Google Chrome
  let hasWebStorage;
  (0,_utils_private_inject_obj_prop_inject_obj_prop_js__WEBPACK_IMPORTED_MODULE_2__/* .injectProp */ .$)(client.has, 'webStorage', () => {
    if (hasWebStorage !== void 0) {
      return hasWebStorage;
    }
    try {
      if (window.localStorage) {
        hasWebStorage = true;
        return true;
      }
    } catch (_) {}
    hasWebStorage = false;
    return false;
  });
  Object.assign(Platform, client);
  if (isRuntimeSsrPreHydration.value === true) {
    // must match with server-side before
    // client taking over in order to prevent
    // hydration errors
    Object.assign(Platform, preHydrationBrowser, ssrClient);

    // free up memory
    preHydrationBrowser = null;
  }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Platform);

/***/ }),

/***/ 4848:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var _platform_Platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1597);
/* harmony import */ var _utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2500);



const getTrue = () => true;
function filterInvalidPath(path) {
  return typeof path === 'string' && path !== '' && path !== '/' && path !== '#/';
}
function normalizeExitPath(path) {
  path.startsWith('#') === true && (path = path.substring(1));
  path.startsWith('/') === false && (path = '/' + path);
  path.endsWith('/') === true && (path = path.substring(0, path.length - 1));
  return '#' + path;
}
function getShouldExitFn(cfg) {
  if (cfg.backButtonExit === false) {
    return () => false;
  }
  if (cfg.backButtonExit === '*') {
    return getTrue;
  }

  // Add default root path
  const exitPaths = ['#/'];

  // Add custom exit paths
  Array.isArray(cfg.backButtonExit) === true && exitPaths.push(...cfg.backButtonExit.filter(filterInvalidPath).map(normalizeExitPath));
  return () => exitPaths.includes(window.location.hash);
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __history: [],
  add: _utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .noop */ .lQ,
  remove: _utils_event_event_js__WEBPACK_IMPORTED_MODULE_2__/* .noop */ .lQ,
  install({
    $q
  }) {
    if ( false || this.__installed === true) return;
    const {
      cordova,
      capacitor
    } = _platform_Platform_js__WEBPACK_IMPORTED_MODULE_1__/* .client */ .Sn.is;
    if (cordova !== true && capacitor !== true) {
      return;
    }
    const qConf = $q.config[cordova === true ? 'cordova' : 'capacitor'];
    if (qConf !== void 0 && qConf.backButton === false) {
      return;
    }

    // if the '@capacitor/app' plugin is not installed
    // then we got nothing to do
    if (
    // if we're on Capacitor mode
    capacitor === true
    // and it's also not in Capacitor's main instance
    && (window.Capacitor === void 0 || window.Capacitor.Plugins.App === void 0)) {
      return;
    }
    this.add = entry => {
      if (entry.condition === void 0) {
        entry.condition = getTrue;
      }
      this.__history.push(entry);
    };
    this.remove = entry => {
      const index = this.__history.indexOf(entry);
      if (index >= 0) {
        this.__history.splice(index, 1);
      }
    };
    const shouldExit = getShouldExitFn(Object.assign({
      backButtonExit: true
    }, qConf));
    const backHandler = () => {
      if (this.__history.length) {
        const entry = this.__history[this.__history.length - 1];
        if (entry.condition() === true) {
          this.__history.pop();
          entry.handler();
        }
      } else if (shouldExit() === true) {
        navigator.app.exitApp();
      } else {
        window.history.back();
      }
    };
    if (cordova === true) {
      document.addEventListener('deviceready', () => {
        document.addEventListener('backbutton', backHandler, false);
      });
    } else {
      window.Capacitor.Plugins.App.addListener('backButton', backHandler);
    }
  }
});

/***/ }),

/***/ 6246:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   F: () => (/* binding */ __splitDate),
/* harmony export */   Yq: () => (/* binding */ formatDate),
/* harmony export */   ie: () => (/* binding */ getDateDiff)
/* harmony export */ });
/* unused harmony exports adjustDate, extractDate, isValid, buildDate, getDayOfWeek, getWeekOfYear, isBetweenDates, addToDate, subtractFromDate, startOfDate, endOfDate, getMaxDate, getMinDate, getDayOfYear, inferDateFormat, getDateBetween, isSameDate, daysInMonth, clone */
/* harmony import */ var _is_is_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1054);
/* harmony import */ var _format_format_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2732);
/* harmony import */ var _private_persian_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9617);
/* harmony import */ var _plugins_lang_Lang_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4360);
/* eslint no-fallthrough: 0 */





const MILLISECONDS_IN_DAY = 86400000,
  MILLISECONDS_IN_HOUR = 3600000,
  MILLISECONDS_IN_MINUTE = 60000,
  defaultMask = 'YYYY-MM-DDTHH:mm:ss.SSSZ',
  token = /\[((?:[^\]\\]|\\]|\\)*)\]|d{1,4}|M{1,4}|m{1,2}|w{1,2}|Qo|Do|D{1,4}|YY(?:YY)?|H{1,2}|h{1,2}|s{1,2}|S{1,3}|Z{1,2}|a{1,2}|[AQExX]/g,
  reverseToken = /(\[[^\]]*\])|d{1,4}|M{1,4}|m{1,2}|w{1,2}|Qo|Do|D{1,4}|YY(?:YY)?|H{1,2}|h{1,2}|s{1,2}|S{1,3}|Z{1,2}|a{1,2}|[AQExX]|([.*+:?^,\s${}()|\\]+)/g,
  regexStore = {};
function getRegexData(mask, dateLocale) {
  const days = '(' + dateLocale.days.join('|') + ')',
    key = mask + days;
  if (regexStore[key] !== void 0) {
    return regexStore[key];
  }
  const daysShort = '(' + dateLocale.daysShort.join('|') + ')',
    months = '(' + dateLocale.months.join('|') + ')',
    monthsShort = '(' + dateLocale.monthsShort.join('|') + ')';
  const map = {};
  let index = 0;
  const regexText = mask.replace(reverseToken, match => {
    index++;
    switch (match) {
      case 'YY':
        map.YY = index;
        return '(-?\\d{1,2})';
      case 'YYYY':
        map.YYYY = index;
        return '(-?\\d{1,4})';
      case 'M':
        map.M = index;
        return '(\\d{1,2})';
      case 'MM':
        map.M = index; // bumping to M
        return '(\\d{2})';
      case 'MMM':
        map.MMM = index;
        return monthsShort;
      case 'MMMM':
        map.MMMM = index;
        return months;
      case 'D':
        map.D = index;
        return '(\\d{1,2})';
      case 'Do':
        map.D = index++; // bumping to D
        return '(\\d{1,2}(st|nd|rd|th))';
      case 'DD':
        map.D = index; // bumping to D
        return '(\\d{2})';
      case 'H':
        map.H = index;
        return '(\\d{1,2})';
      case 'HH':
        map.H = index; // bumping to H
        return '(\\d{2})';
      case 'h':
        map.h = index;
        return '(\\d{1,2})';
      case 'hh':
        map.h = index; // bumping to h
        return '(\\d{2})';
      case 'm':
        map.m = index;
        return '(\\d{1,2})';
      case 'mm':
        map.m = index; // bumping to m
        return '(\\d{2})';
      case 's':
        map.s = index;
        return '(\\d{1,2})';
      case 'ss':
        map.s = index; // bumping to s
        return '(\\d{2})';
      case 'S':
        map.S = index;
        return '(\\d{1})';
      case 'SS':
        map.S = index; // bump to S
        return '(\\d{2})';
      case 'SSS':
        map.S = index; // bump to S
        return '(\\d{3})';
      case 'A':
        map.A = index;
        return '(AM|PM)';
      case 'a':
        map.a = index;
        return '(am|pm)';
      case 'aa':
        map.aa = index;
        return '(a\\.m\\.|p\\.m\\.)';
      case 'ddd':
        return daysShort;
      case 'dddd':
        return days;
      case 'Q':
      case 'd':
      case 'E':
        return '(\\d{1})';
      case 'Qo':
        return '(1st|2nd|3rd|4th)';
      case 'DDD':
      case 'DDDD':
        return '(\\d{1,3})';
      case 'w':
        return '(\\d{1,2})';
      case 'ww':
        return '(\\d{2})';
      case 'Z':
        // to split: (?:(Z)()()|([+-])?(\\d{2}):?(\\d{2}))
        map.Z = index;
        return '(Z|[+-]\\d{2}:\\d{2})';
      case 'ZZ':
        map.ZZ = index;
        return '(Z|[+-]\\d{2}\\d{2})';
      case 'X':
        map.X = index;
        return '(-?\\d+)';
      case 'x':
        map.x = index;
        return '(-?\\d{4,})';
      default:
        index--;
        if (match[0] === '[') {
          match = match.substring(1, match.length - 1);
        }
        return match.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
  });
  const res = {
    map,
    regex: new RegExp('^' + regexText)
  };
  regexStore[key] = res;
  return res;
}
function getDateLocale(paramDateLocale, langProps) {
  return paramDateLocale !== void 0 ? paramDateLocale : langProps !== void 0 ? langProps.date : _plugins_lang_Lang_js__WEBPACK_IMPORTED_MODULE_2__/* .defaultLang */ .o.date;
}
function formatTimezone(offset, delimeter = '') {
  const sign = offset > 0 ? '-' : '+',
    absOffset = Math.abs(offset),
    hours = Math.floor(absOffset / 60),
    minutes = absOffset % 60;
  return sign + (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(hours) + delimeter + (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(minutes);
}
function applyYearMonthDayChange(date, mod, sign) {
  let year = date.getFullYear(),
    month = date.getMonth();
  const day = date.getDate();
  if (mod.year !== void 0) {
    year += sign * mod.year;
    delete mod.year;
  }
  if (mod.month !== void 0) {
    month += sign * mod.month;
    delete mod.month;
  }
  date.setDate(1);
  date.setMonth(2);
  date.setFullYear(year);
  date.setMonth(month);
  date.setDate(Math.min(day, daysInMonth(date)));
  if (mod.date !== void 0) {
    date.setDate(date.getDate() + sign * mod.date);
    delete mod.date;
  }
  return date;
}
function applyYearMonthDay(date, mod, middle) {
  const year = mod.year !== void 0 ? mod.year : date[`get${middle}FullYear`](),
    month = mod.month !== void 0 ? mod.month - 1 : date[`get${middle}Month`](),
    maxDay = new Date(year, month + 1, 0).getDate(),
    day = Math.min(maxDay, mod.date !== void 0 ? mod.date : date[`get${middle}Date`]());
  date[`set${middle}Date`](1);
  date[`set${middle}Month`](2);
  date[`set${middle}FullYear`](year);
  date[`set${middle}Month`](month);
  date[`set${middle}Date`](day);
  delete mod.year;
  delete mod.month;
  delete mod.date;
  return date;
}
function getChange(date, rawMod, sign) {
  const mod = normalizeMod(rawMod),
    d = new Date(date),
    t = mod.year !== void 0 || mod.month !== void 0 || mod.date !== void 0 ? applyYearMonthDayChange(d, mod, sign) // removes year/month/day
    : d;
  for (const key in mod) {
    const op = (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .capitalize */ .ZH)(key);
    t[`set${op}`](t[`get${op}`]() + sign * mod[key]);
  }
  return t;
}
function normalizeMod(mod) {
  const acc = {
    ...mod
  };
  if (mod.years !== void 0) {
    acc.year = mod.years;
    delete acc.years;
  }
  if (mod.months !== void 0) {
    acc.month = mod.months;
    delete acc.months;
  }
  if (mod.days !== void 0) {
    acc.date = mod.days;
    delete acc.days;
  }
  if (mod.day !== void 0) {
    acc.date = mod.day;
    delete acc.day;
  }
  if (mod.hour !== void 0) {
    acc.hours = mod.hour;
    delete acc.hour;
  }
  if (mod.minute !== void 0) {
    acc.minutes = mod.minute;
    delete acc.minute;
  }
  if (mod.second !== void 0) {
    acc.seconds = mod.second;
    delete acc.second;
  }
  if (mod.millisecond !== void 0) {
    acc.milliseconds = mod.millisecond;
    delete acc.millisecond;
  }
  return acc;
}
function adjustDate(date, rawMod, utc) {
  const mod = normalizeMod(rawMod),
    middle = utc === true ? 'UTC' : '',
    d = new Date(date),
    t = mod.year !== void 0 || mod.month !== void 0 || mod.date !== void 0 ? applyYearMonthDay(d, mod, middle) // removes year/month/day
    : d;
  for (const key in mod) {
    const op = key.charAt(0).toUpperCase() + key.slice(1);
    t[`set${middle}${op}`](mod[key]);
  }
  return t;
}
function extractDate(str, mask, dateLocale) {
  const d = __splitDate(str, mask, dateLocale);
  const date = new Date(d.year, d.month === null ? null : d.month - 1, d.day === null ? 1 : d.day, d.hour, d.minute, d.second, d.millisecond);
  const tzOffset = date.getTimezoneOffset();
  return d.timezoneOffset === null || d.timezoneOffset === tzOffset ? date : getChange(date, {
    minutes: d.timezoneOffset - tzOffset
  }, 1);
}
function __splitDate(str, mask, dateLocale, calendar, defaultModel) {
  const date = {
    year: null,
    month: null,
    day: null,
    hour: null,
    minute: null,
    second: null,
    millisecond: null,
    timezoneOffset: null,
    dateHash: null,
    timeHash: null
  };
  defaultModel !== void 0 && Object.assign(date, defaultModel);
  if (str === void 0 || str === null || str === '' || typeof str !== 'string') {
    return date;
  }
  if (mask === void 0) {
    mask = defaultMask;
  }
  const langOpts = getDateLocale(dateLocale, _plugins_lang_Lang_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A.props),
    months = langOpts.months,
    monthsShort = langOpts.monthsShort;
  const {
    regex,
    map
  } = getRegexData(mask, langOpts);
  const match = str.match(regex);
  if (match === null) {
    return date;
  }
  let tzString = '';
  if (map.X !== void 0 || map.x !== void 0) {
    const stamp = parseInt(match[map.X !== void 0 ? map.X : map.x], 10);
    if (isNaN(stamp) === true || stamp < 0) {
      return date;
    }
    const d = new Date(stamp * (map.X !== void 0 ? 1000 : 1));
    date.year = d.getFullYear();
    date.month = d.getMonth() + 1;
    date.day = d.getDate();
    date.hour = d.getHours();
    date.minute = d.getMinutes();
    date.second = d.getSeconds();
    date.millisecond = d.getMilliseconds();
  } else {
    if (map.YYYY !== void 0) {
      date.year = parseInt(match[map.YYYY], 10);
    } else if (map.YY !== void 0) {
      const y = parseInt(match[map.YY], 10);
      date.year = y < 0 ? y : 2000 + y;
    }
    if (map.M !== void 0) {
      date.month = parseInt(match[map.M], 10);
      if (date.month < 1 || date.month > 12) {
        return date;
      }
    } else if (map.MMM !== void 0) {
      date.month = monthsShort.indexOf(match[map.MMM]) + 1;
    } else if (map.MMMM !== void 0) {
      date.month = months.indexOf(match[map.MMMM]) + 1;
    }
    if (map.D !== void 0) {
      date.day = parseInt(match[map.D], 10);
      if (date.year === null || date.month === null || date.day < 1) {
        return date;
      }
      const maxDay = calendar !== 'persian' ? new Date(date.year, date.month, 0).getDate() : (0,_private_persian_js__WEBPACK_IMPORTED_MODULE_3__/* .jalaaliMonthLength */ .fB)(date.year, date.month);
      if (date.day > maxDay) {
        return date;
      }
    }
    if (map.H !== void 0) {
      date.hour = parseInt(match[map.H], 10) % 24;
    } else if (map.h !== void 0) {
      date.hour = parseInt(match[map.h], 10) % 12;
      if (map.A && match[map.A] === 'PM' || map.a && match[map.a] === 'pm' || map.aa && match[map.aa] === 'p.m.') {
        date.hour += 12;
      }
      date.hour = date.hour % 24;
    }
    if (map.m !== void 0) {
      date.minute = parseInt(match[map.m], 10) % 60;
    }
    if (map.s !== void 0) {
      date.second = parseInt(match[map.s], 10) % 60;
    }
    if (map.S !== void 0) {
      date.millisecond = parseInt(match[map.S], 10) * 10 ** (3 - match[map.S].length);
    }
    if (map.Z !== void 0 || map.ZZ !== void 0) {
      tzString = map.Z !== void 0 ? match[map.Z].replace(':', '') : match[map.ZZ];
      date.timezoneOffset = (tzString[0] === '+' ? -1 : 1) * (60 * tzString.slice(1, 3) + 1 * tzString.slice(3, 5));
    }
  }
  date.dateHash = (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.year, 6) + '/' + (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.month) + '/' + (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.day);
  date.timeHash = (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.hour) + ':' + (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.minute) + ':' + (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.second) + tzString;
  return date;
}
function isValid(date) {
  return typeof date === 'number' ? true : isNaN(Date.parse(date)) === false;
}
function buildDate(mod, utc) {
  return adjustDate(new Date(), mod, utc);
}
function getDayOfWeek(date) {
  const dow = new Date(date).getDay();
  return dow === 0 ? 7 : dow;
}
function getWeekOfYear(date) {
  // Remove time components of date
  const thursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());

  // Change date to Thursday same week
  thursday.setDate(thursday.getDate() - (thursday.getDay() + 6) % 7 + 3);

  // Take January 4th as it is always in week 1 (see ISO 8601)
  const firstThursday = new Date(thursday.getFullYear(), 0, 4);

  // Change date to Thursday same week
  firstThursday.setDate(firstThursday.getDate() - (firstThursday.getDay() + 6) % 7 + 3);

  // Check if daylight-saving-time-switch occurred and correct for it
  const ds = thursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
  thursday.setHours(thursday.getHours() - ds);

  // Number of weeks between target Thursday and first Thursday
  const weekDiff = (thursday - firstThursday) / (MILLISECONDS_IN_DAY * 7);
  return 1 + Math.floor(weekDiff);
}
function getDayIdentifier(date) {
  return date.getFullYear() * 10000 + date.getMonth() * 100 + date.getDate();
}
function getDateIdentifier(date, onlyDate /* = false */) {
  const d = new Date(date);
  return onlyDate === true ? getDayIdentifier(d) : d.getTime();
}
function isBetweenDates(date, from, to, opts = {}) {
  const d1 = getDateIdentifier(from, opts.onlyDate),
    d2 = getDateIdentifier(to, opts.onlyDate),
    cur = getDateIdentifier(date, opts.onlyDate);
  return (cur > d1 || opts.inclusiveFrom === true && cur === d1) && (cur < d2 || opts.inclusiveTo === true && cur === d2);
}
function addToDate(date, mod) {
  return getChange(date, mod, 1);
}
function subtractFromDate(date, mod) {
  return getChange(date, mod, -1);
}
function startOfDate(date, unit, utc) {
  const t = new Date(date),
    prefix = `set${utc === true ? 'UTC' : ''}`;
  switch (unit) {
    case 'year':
    case 'years':
      t[`${prefix}Month`](0);
    case 'month':
    case 'months':
      t[`${prefix}Date`](1);
    case 'day':
    case 'days':
    case 'date':
      t[`${prefix}Hours`](0);
    case 'hour':
    case 'hours':
      t[`${prefix}Minutes`](0);
    case 'minute':
    case 'minutes':
      t[`${prefix}Seconds`](0);
    case 'second':
    case 'seconds':
      t[`${prefix}Milliseconds`](0);
  }
  return t;
}
function endOfDate(date, unit, utc) {
  const t = new Date(date),
    prefix = `set${utc === true ? 'UTC' : ''}`;
  switch (unit) {
    case 'year':
    case 'years':
      t[`${prefix}Month`](11);
    case 'month':
    case 'months':
      t[`${prefix}Date`](daysInMonth(t));
    case 'day':
    case 'days':
    case 'date':
      t[`${prefix}Hours`](23);
    case 'hour':
    case 'hours':
      t[`${prefix}Minutes`](59);
    case 'minute':
    case 'minutes':
      t[`${prefix}Seconds`](59);
    case 'second':
    case 'seconds':
      t[`${prefix}Milliseconds`](999);
  }
  return t;
}
function getMaxDate(date /* , ...args */) {
  let t = new Date(date);
  Array.prototype.slice.call(arguments, 1).forEach(d => {
    t = Math.max(t, new Date(d));
  });
  return t;
}
function getMinDate(date /*, ...args */) {
  let t = new Date(date);
  Array.prototype.slice.call(arguments, 1).forEach(d => {
    t = Math.min(t, new Date(d));
  });
  return t;
}
function getDiff(t, sub, interval) {
  return (t.getTime() - t.getTimezoneOffset() * MILLISECONDS_IN_MINUTE - (sub.getTime() - sub.getTimezoneOffset() * MILLISECONDS_IN_MINUTE)) / interval;
}
function getDateDiff(date, subtract, unit = 'days') {
  const t = new Date(date),
    sub = new Date(subtract);
  switch (unit) {
    case 'years':
    case 'year':
      return t.getFullYear() - sub.getFullYear();
    case 'months':
    case 'month':
      return (t.getFullYear() - sub.getFullYear()) * 12 + t.getMonth() - sub.getMonth();
    case 'days':
    case 'day':
    case 'date':
      return getDiff(startOfDate(t, 'day'), startOfDate(sub, 'day'), MILLISECONDS_IN_DAY);
    case 'hours':
    case 'hour':
      return getDiff(startOfDate(t, 'hour'), startOfDate(sub, 'hour'), MILLISECONDS_IN_HOUR);
    case 'minutes':
    case 'minute':
      return getDiff(startOfDate(t, 'minute'), startOfDate(sub, 'minute'), MILLISECONDS_IN_MINUTE);
    case 'seconds':
    case 'second':
      return getDiff(startOfDate(t, 'second'), startOfDate(sub, 'second'), 1000);
  }
}
function getDayOfYear(date) {
  return getDateDiff(date, startOfDate(date, 'year'), 'days') + 1;
}
function inferDateFormat(date) {
  return (0,_is_is_js__WEBPACK_IMPORTED_MODULE_0__/* .isDate */ .$P)(date) === true ? 'date' : typeof date === 'number' ? 'number' : 'string';
}
function getDateBetween(date, min, max) {
  const t = new Date(date);
  if (min) {
    const low = new Date(min);
    if (t < low) {
      return low;
    }
  }
  if (max) {
    const high = new Date(max);
    if (t > high) {
      return high;
    }
  }
  return t;
}
function isSameDate(date, date2, unit) {
  const t = new Date(date),
    d = new Date(date2);
  if (unit === void 0) {
    return t.getTime() === d.getTime();
  }
  switch (unit) {
    case 'second':
    case 'seconds':
      if (t.getSeconds() !== d.getSeconds()) {
        return false;
      }
    case 'minute': // intentional fall-through
    case 'minutes':
      if (t.getMinutes() !== d.getMinutes()) {
        return false;
      }
    case 'hour': // intentional fall-through
    case 'hours':
      if (t.getHours() !== d.getHours()) {
        return false;
      }
    case 'day': // intentional fall-through
    case 'days':
    case 'date':
      if (t.getDate() !== d.getDate()) {
        return false;
      }
    case 'month': // intentional fall-through
    case 'months':
      if (t.getMonth() !== d.getMonth()) {
        return false;
      }
    case 'year': // intentional fall-through
    case 'years':
      if (t.getFullYear() !== d.getFullYear()) {
        return false;
      }
      break;
    default:
      throw new Error(`date isSameDate unknown unit ${unit}`);
  }
  return true;
}
function daysInMonth(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
}
function getOrdinal(n) {
  if (n >= 11 && n <= 13) {
    return `${n}th`;
  }
  switch (n % 10) {
    case 1:
      return `${n}st`;
    case 2:
      return `${n}nd`;
    case 3:
      return `${n}rd`;
  }
  return `${n}th`;
}
const formatter = {
  // Year: 00, 01, ..., 99
  YY(date, dateLocale, forcedYear) {
    // workaround for < 1900 with new Date()
    const y = this.YYYY(date, dateLocale, forcedYear) % 100;
    return y >= 0 ? (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(y) : '-' + (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(Math.abs(y));
  },
  // Year: 1900, 1901, ..., 2099
  YYYY(date, _dateLocale, forcedYear) {
    // workaround for < 1900 with new Date()
    return forcedYear !== void 0 && forcedYear !== null ? forcedYear : date.getFullYear();
  },
  // Month: 1, 2, ..., 12
  M(date) {
    return date.getMonth() + 1;
  },
  // Month: 01, 02, ..., 12
  MM(date) {
    return (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.getMonth() + 1);
  },
  // Month Short Name: Jan, Feb, ...
  MMM(date, dateLocale) {
    return dateLocale.monthsShort[date.getMonth()];
  },
  // Month Name: January, February, ...
  MMMM(date, dateLocale) {
    return dateLocale.months[date.getMonth()];
  },
  // Quarter: 1, 2, 3, 4
  Q(date) {
    return Math.ceil((date.getMonth() + 1) / 3);
  },
  // Quarter: 1st, 2nd, 3rd, 4th
  Qo(date) {
    return getOrdinal(this.Q(date));
  },
  // Day of month: 1, 2, ..., 31
  D(date) {
    return date.getDate();
  },
  // Day of month: 1st, 2nd, ..., 31st
  Do(date) {
    return getOrdinal(date.getDate());
  },
  // Day of month: 01, 02, ..., 31
  DD(date) {
    return (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.getDate());
  },
  // Day of year: 1, 2, ..., 366
  DDD(date) {
    return getDayOfYear(date);
  },
  // Day of year: 001, 002, ..., 366
  DDDD(date) {
    return (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(getDayOfYear(date), 3);
  },
  // Day of week: 0, 1, ..., 6
  d(date) {
    return date.getDay();
  },
  // Day of week: Su, Mo, ...
  dd(date, dateLocale) {
    return this.dddd(date, dateLocale).slice(0, 2);
  },
  // Day of week: Sun, Mon, ...
  ddd(date, dateLocale) {
    return dateLocale.daysShort[date.getDay()];
  },
  // Day of week: Sunday, Monday, ...
  dddd(date, dateLocale) {
    return dateLocale.days[date.getDay()];
  },
  // Day of ISO week: 1, 2, ..., 7
  E(date) {
    return date.getDay() || 7;
  },
  // Week of Year: 1 2 ... 52 53
  w(date) {
    return getWeekOfYear(date);
  },
  // Week of Year: 01 02 ... 52 53
  ww(date) {
    return (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(getWeekOfYear(date));
  },
  // Hour: 0, 1, ... 23
  H(date) {
    return date.getHours();
  },
  // Hour: 00, 01, ..., 23
  HH(date) {
    return (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.getHours());
  },
  // Hour: 1, 2, ..., 12
  h(date) {
    const hours = date.getHours();
    return hours === 0 ? 12 : hours > 12 ? hours % 12 : hours;
  },
  // Hour: 01, 02, ..., 12
  hh(date) {
    return (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(this.h(date));
  },
  // Minute: 0, 1, ..., 59
  m(date) {
    return date.getMinutes();
  },
  // Minute: 00, 01, ..., 59
  mm(date) {
    return (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.getMinutes());
  },
  // Second: 0, 1, ..., 59
  s(date) {
    return date.getSeconds();
  },
  // Second: 00, 01, ..., 59
  ss(date) {
    return (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.getSeconds());
  },
  // 1/10 of second: 0, 1, ..., 9
  S(date) {
    return Math.floor(date.getMilliseconds() / 100);
  },
  // 1/100 of second: 00, 01, ..., 99
  SS(date) {
    return (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(Math.floor(date.getMilliseconds() / 10));
  },
  // Millisecond: 000, 001, ..., 999
  SSS(date) {
    return (0,_format_format_js__WEBPACK_IMPORTED_MODULE_1__/* .pad */ .eV)(date.getMilliseconds(), 3);
  },
  // Meridiem: AM, PM
  A(date) {
    return this.H(date) < 12 ? 'AM' : 'PM';
  },
  // Meridiem: am, pm
  a(date) {
    return this.H(date) < 12 ? 'am' : 'pm';
  },
  // Meridiem: a.m., p.m.
  aa(date) {
    return this.H(date) < 12 ? 'a.m.' : 'p.m.';
  },
  // Timezone: -01:00, +00:00, ... +12:00
  Z(date, _dateLocale, _forcedYear, forcedTimezoneOffset) {
    const tzOffset = forcedTimezoneOffset === void 0 || forcedTimezoneOffset === null ? date.getTimezoneOffset() : forcedTimezoneOffset;
    return formatTimezone(tzOffset, ':');
  },
  // Timezone: -0100, +0000, ... +1200
  ZZ(date, _dateLocale, _forcedYear, forcedTimezoneOffset) {
    const tzOffset = forcedTimezoneOffset === void 0 || forcedTimezoneOffset === null ? date.getTimezoneOffset() : forcedTimezoneOffset;
    return formatTimezone(tzOffset);
  },
  // Seconds timestamp: 512969520
  X(date) {
    return Math.floor(date.getTime() / 1000);
  },
  // Milliseconds timestamp: 512969520900
  x(date) {
    return date.getTime();
  }
};
function formatDate(val, mask, dateLocale, __forcedYear, __forcedTimezoneOffset) {
  if (val !== 0 && !val || val === Infinity || val === -Infinity) {
    return;
  }
  const date = new Date(val);
  if (isNaN(date)) {
    return;
  }
  if (mask === void 0) {
    mask = defaultMask;
  }
  const locale = getDateLocale(dateLocale, _plugins_lang_Lang_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A.props);
  return mask.replace(token, (match, text) => match in formatter ? formatter[match](date, locale, __forcedYear, __forcedTimezoneOffset) : text === void 0 ? match : text.split('\\]').join(']'));
}
function clone(date) {
  return (0,_is_is_js__WEBPACK_IMPORTED_MODULE_0__/* .isDate */ .$P)(date) === true ? new Date(date.getTime()) : date;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isValid,
  extractDate,
  buildDate,
  getDayOfWeek,
  getWeekOfYear,
  isBetweenDates,
  addToDate,
  subtractFromDate,
  adjustDate,
  startOfDate,
  endOfDate,
  getMaxDate,
  getMinDate,
  getDateDiff,
  getDayOfYear,
  inferDateFormat,
  getDateBetween,
  isSameDate,
  daysInMonth,
  formatDate,
  clone
});

/***/ }),

/***/ 9617:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   fB: () => (/* binding */ jalaaliMonthLength),
/* harmony export */   m6: () => (/* binding */ toGregorian),
/* harmony export */   q5: () => (/* binding */ toJalaali)
/* harmony export */ });
// taken from https://github.com/jalaali/jalaali-js

/*
  Jalaali years starting the 33-year rule.
*/
const breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178];

/*
  Converts a Gregorian date to Jalaali.
*/
function toJalaali(gy, gm, gd) {
  if (Object.prototype.toString.call(gy) === '[object Date]') {
    gd = gy.getDate();
    gm = gy.getMonth() + 1;
    gy = gy.getFullYear();
  }
  return d2j(g2d(gy, gm, gd));
}

/*
  Converts a Jalaali date to Gregorian.
*/
function toGregorian(jy, jm, jd) {
  return d2g(j2d(jy, jm, jd));
}

/*
  Is this a leap year or not?
*/
function isLeapJalaaliYear(jy) {
  return jalCalLeap(jy) === 0;
}

/*
  Number of days in a given month in a Jalaali year.
*/
function jalaaliMonthLength(jy, jm) {
  if (jm <= 6) return 31;
  if (jm <= 11) return 30;
  if (isLeapJalaaliYear(jy)) return 30;
  return 29;
}

/*
    This function determines if the Jalaali (Persian) year is
    leap (366-day long) or is the common year (365 days)

    @param jy Jalaali calendar year (-61 to 3177)
    @returns number of years since the last leap year (0 to 4)
 */
function jalCalLeap(jy) {
  const bl = breaks.length;
  let jp = breaks[0],
    jm,
    jump,
    leap,
    n,
    i;
  if (jy < jp || jy >= breaks[bl - 1]) {
    throw new Error('Invalid Jalaali year ' + jy);
  }
  for (i = 1; i < bl; i += 1) {
    jm = breaks[i];
    jump = jm - jp;
    if (jy < jm) {
      break;
    }
    jp = jm;
  }
  n = jy - jp;
  if (jump - n < 6) {
    n = n - jump + div(jump + 4, 33) * 33;
  }
  leap = mod(mod(n + 1, 33) - 1, 4);
  if (leap === -1) {
    leap = 4;
  }
  return leap;
}

/*
  This function determines if the Jalaali (Persian) year is
  leap (366-day long) or is the common year (365 days), and
  finds the day in March (Gregorian calendar) of the first
  day of the Jalaali year (jy).

  @param jy Jalaali calendar year (-61 to 3177)
  @param withoutLeap when don't need leap (true or false) default is false
  @return
    leap: number of years since the last leap year (0 to 4)
    gy: Gregorian year of the beginning of Jalaali year
    march: the March day of Farvardin the 1st (1st day of jy)
  @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm
  @see: http://www.fourmilab.ch/documents/calendar/
*/
function jalCal(jy, withoutLeap) {
  const bl = breaks.length,
    gy = jy + 621;
  let leapJ = -14,
    jp = breaks[0],
    jm,
    jump,
    leap,
    n,
    i;
  if (jy < jp || jy >= breaks[bl - 1]) {
    throw new Error('Invalid Jalaali year ' + jy);
  }

  // Find the limiting years for the Jalaali year jy.
  for (i = 1; i < bl; i += 1) {
    jm = breaks[i];
    jump = jm - jp;
    if (jy < jm) {
      break;
    }
    leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4);
    jp = jm;
  }
  n = jy - jp;

  // Find the number of leap years from AD 621 to the beginning
  // of the current Jalaali year in the Persian calendar.
  leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4);
  if (mod(jump, 33) === 4 && jump - n === 4) {
    leapJ += 1;
  }

  // And the same in the Gregorian calendar (until the year gy).
  const leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150;

  // Determine the Gregorian date of Farvardin the 1st.
  const march = 20 + leapJ - leapG;

  // Find how many years have passed since the last leap year.
  if (!withoutLeap) {
    if (jump - n < 6) {
      n = n - jump + div(jump + 4, 33) * 33;
    }
    leap = mod(mod(n + 1, 33) - 1, 4);
    if (leap === -1) {
      leap = 4;
    }
  }
  return {
    leap,
    gy,
    march
  };
}

/*
  Converts a date of the Jalaali calendar to the Julian Day number.

  @param jy Jalaali year (1 to 3100)
  @param jm Jalaali month (1 to 12)
  @param jd Jalaali day (1 to 29/31)
  @return Julian Day number
*/
function j2d(jy, jm, jd) {
  const r = jalCal(jy, true);
  return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1;
}

/*
  Converts the Julian Day number to a date in the Jalaali calendar.

  @param jdn Julian Day number
  @return
    jy: Jalaali year (1 to 3100)
    jm: Jalaali month (1 to 12)
    jd: Jalaali day (1 to 29/31)
*/
function d2j(jdn) {
  const gy = d2g(jdn).gy; // Calculate Gregorian year (gy).
  let jy = gy - 621,
    jd,
    jm,
    k;
  const r = jalCal(jy, false),
    jdn1f = g2d(gy, 3, r.march);

  // Find number of days that passed since 1 Farvardin.
  k = jdn - jdn1f;
  if (k >= 0) {
    if (k <= 185) {
      // The first 6 months.
      jm = 1 + div(k, 31);
      jd = mod(k, 31) + 1;
      return {
        jy,
        jm,
        jd
      };
    } else {
      // The remaining months.
      k -= 186;
    }
  } else {
    // Previous Jalaali year.
    jy -= 1;
    k += 179;
    if (r.leap === 1) {
      k += 1;
    }
  }
  jm = 7 + div(k, 30);
  jd = mod(k, 30) + 1;
  return {
    jy,
    jm,
    jd
  };
}

/*
  Calculates the Julian Day number from Gregorian or Julian
  calendar dates. This integer number corresponds to the noon of
  the date (i.e. 12 hours of Universal Time).
  The procedure was tested to be good since 1 March, -100100 (of both
  calendars) up to a few million years into the future.

  @param gy Calendar year (years BC numbered 0, -1, -2, ...)
  @param gm Calendar month (1 to 12)
  @param gd Calendar day of the month (1 to 28/29/30/31)
  @return Julian Day number
*/
function g2d(gy, gm, gd) {
  let d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod(gm + 9, 12) + 2, 5) + gd - 34840408;
  d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
  return d;
}

/*
  Calculates Gregorian and Julian calendar dates from the Julian Day number
  (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both
  calendars) to some millions years ahead of the present.

  @param jdn Julian Day number
  @return
    gy: Calendar year (years BC numbered 0, -1, -2, ...)
    gm: Calendar month (1 to 12)
    gd: Calendar day of the month M (1 to 28/29/30/31)
*/
function d2g(jdn) {
  let j = 4 * jdn + 139361631;
  j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
  const i = div(mod(j, 1461), 4) * 5 + 308,
    gd = div(mod(i, 153), 5) + 1,
    gm = mod(div(i, 153), 12) + 1,
    gy = div(j, 1461) - 100100 + div(8 - gm, 6);
  return {
    gy,
    gm,
    gd
  };
}

/*
  Utility helper functions.
*/

function div(a, b) {
  return ~~(a / b);
}
function mod(a, b) {
  return a - ~~(a / b) * b;
}

/***/ }),

/***/ 3500:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(fn, wait = 250, immediate) {
  let timer = null;
  function debounced( /* ...args */
  ) {
    const args = arguments;
    const later = () => {
      timer = null;
      if (immediate !== true) {
        fn.apply(this, args);
      }
    };
    if (timer !== null) {
      clearTimeout(timer);
    } else if (immediate === true) {
      fn.apply(this, args);
    }
    timer = setTimeout(later, wait);
  }
  debounced.cancel = () => {
    timer !== null && clearTimeout(timer);
  };
  return debounced;
}

/***/ }),

/***/ 7556:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $J: () => (/* binding */ childHasFocus),
/* harmony export */   AH: () => (/* binding */ css),
/* harmony export */   V6: () => (/* binding */ getElement)
/* harmony export */ });
/* unused harmony exports offset, style, height, width, cssBatch, ready */
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8734);

function offset(el) {
  if (el === window) {
    return {
      top: 0,
      left: 0
    };
  }
  const {
    top,
    left
  } = el.getBoundingClientRect();
  return {
    top,
    left
  };
}
function style(el, property) {
  return window.getComputedStyle(el).getPropertyValue(property);
}
function height(el) {
  return el === window ? window.innerHeight : el.getBoundingClientRect().height;
}
function width(el) {
  return el === window ? window.innerWidth : el.getBoundingClientRect().width;
}
function css(element, css) {
  const style = element.style;
  for (const prop in css) {
    style[prop] = css[prop];
  }
}
function cssBatch(elements, style) {
  elements.forEach(el => css(el, style));
}
function ready(fn) {
  if (typeof fn !== 'function') {
    return;
  }
  if (document.readyState !== 'loading') {
    return fn();
  }
  document.addEventListener('DOMContentLoaded', fn, false);
}

// internal
function getElement(el) {
  if (el === void 0 || el === null) {
    return void 0;
  }
  if (typeof el === 'string') {
    try {
      return document.querySelector(el) || void 0;
    } catch (err) {
      return void 0;
    }
  }
  const target = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .unref */ .R1)(el);
  if (target) {
    return target.$el || target;
  }
}

// internal
function childHasFocus(el, focusedEl) {
  if (el === void 0 || el === null || el.contains(focusedEl) === true) {
    return true;
  }
  for (let next = el.nextElementSibling; next !== null; next = next.nextElementSibling) {
    if (next.contains(focusedEl)) {
      return true;
    }
  }
  return false;
}
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ({
  offset,
  style,
  height,
  width,
  css,
  cssBatch,
  ready
});

/***/ }),

/***/ 2500:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   F4: () => (/* binding */ prevent),
/* harmony export */   Fh: () => (/* binding */ cleanEvt),
/* harmony export */   G1: () => (/* binding */ position),
/* harmony export */   Gu: () => (/* binding */ stopAndPrevent),
/* harmony export */   M5: () => (/* binding */ preventDraggable),
/* harmony export */   Z4: () => (/* binding */ addEvt),
/* harmony export */   ds: () => (/* binding */ stop),
/* harmony export */   en: () => (/* binding */ getEventPath),
/* harmony export */   lQ: () => (/* binding */ noop),
/* harmony export */   mG: () => (/* binding */ listenOpts),
/* harmony export */   w7: () => (/* binding */ leftClick)
/* harmony export */ });
/* unused harmony exports middleClick, rightClick, getMouseWheelDistance */
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);

const listenOpts = {
  hasPassive: false,
  passiveCapture: true,
  notPassiveCapture: true
};
try {
  const opts = Object.defineProperty({}, 'passive', {
    get() {
      Object.assign(listenOpts, {
        hasPassive: true,
        passive: {
          passive: true
        },
        notPassive: {
          passive: false
        },
        passiveCapture: {
          passive: true,
          capture: true
        },
        notPassiveCapture: {
          passive: false,
          capture: true
        }
      });
    }
  });
  window.addEventListener('qtest', null, opts);
  window.removeEventListener('qtest', null, opts);
} catch (_) {}
function noop() {}
function leftClick(e) {
  return e.button === 0;
}
function middleClick(e) {
  return e.button === 1;
}
function rightClick(e) {
  return e.button === 2;
}
function position(e) {
  if (e.touches && e.touches[0]) {
    e = e.touches[0];
  } else if (e.changedTouches && e.changedTouches[0]) {
    e = e.changedTouches[0];
  } else if (e.targetTouches && e.targetTouches[0]) {
    e = e.targetTouches[0];
  }
  return {
    top: e.clientY,
    left: e.clientX
  };
}
function getEventPath(e) {
  if (e.path) {
    return e.path;
  }
  if (e.composedPath) {
    return e.composedPath();
  }
  const path = [];
  let el = e.target;
  while (el) {
    path.push(el);
    if (el.tagName === 'HTML') {
      path.push(document);
      path.push(window);
      return path;
    }
    el = el.parentElement;
  }
}

// Reasonable defaults
const LINE_HEIGHT = 40,
  PAGE_HEIGHT = 800;
function getMouseWheelDistance(e) {
  let x = e.deltaX,
    y = e.deltaY;
  if ((x || y) && e.deltaMode) {
    const multiplier = e.deltaMode === 1 ? LINE_HEIGHT : PAGE_HEIGHT;
    x *= multiplier;
    y *= multiplier;
  }
  if (e.shiftKey && !x) {
    [y, x] = [x, y];
  }
  return {
    x,
    y
  };
}
function stop(e) {
  e.stopPropagation();
}
function prevent(e) {
  e.cancelable !== false && e.preventDefault();
}
function stopAndPrevent(e) {
  e.cancelable !== false && e.preventDefault();
  e.stopPropagation();
}
function preventDraggable(el, status) {
  if (el === void 0 || status === true && el.__dragPrevented === true) {
    return;
  }
  const fn = status === true ? el => {
    el.__dragPrevented = true;
    el.addEventListener('dragstart', prevent, listenOpts.notPassiveCapture);
  } : el => {
    delete el.__dragPrevented;
    el.removeEventListener('dragstart', prevent, listenOpts.notPassiveCapture);
  };
  el.querySelectorAll('a, img').forEach(fn);
}
function addEvt(ctx, targetName, events) {
  const name = `__q_${targetName}_evt`;
  ctx[name] = ctx[name] !== void 0 ? ctx[name].concat(events) : events;
  events.forEach(evt => {
    evt[0].addEventListener(evt[1], ctx[evt[2]], listenOpts[evt[3]]);
  });
}
function cleanEvt(ctx, targetName) {
  const name = `__q_${targetName}_evt`;
  if (ctx[name] !== void 0) {
    ctx[name].forEach(evt => {
      evt[0].removeEventListener(evt[1], ctx[evt[2]], listenOpts[evt[3]]);
    });
    ctx[name] = void 0;
  }
}

/*
 * also update /types/utils/event.d.ts
 */

/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ({
  listenOpts,
  leftClick,
  middleClick,
  rightClick,
  position,
  getEventPath,
  getMouseWheelDistance,
  stop,
  prevent,
  stopAndPrevent,
  preventDraggable
});

/***/ }),

/***/ 2732:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tq: () => (/* binding */ between),
/* harmony export */   ZH: () => (/* binding */ capitalize),
/* harmony export */   eV: () => (/* binding */ pad),
/* harmony export */   eo: () => (/* binding */ normalizeToInterval)
/* harmony export */ });
/* unused harmony export humanStorageSize */
const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
function humanStorageSize(bytes, decimals = 1) {
  let u = 0;
  while (parseInt(bytes, 10) >= 1024 && u < units.length - 1) {
    bytes /= 1024;
    ++u;
  }
  return `${bytes.toFixed(decimals)}${units[u]}`;
}
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function between(v, min, max) {
  return max <= min ? min : Math.min(max, Math.max(min, v));
}
function normalizeToInterval(v, min, max) {
  if (max <= min) {
    return min;
  }
  const size = max - min + 1;
  let index = min + (v - min) % size;
  if (index < min) {
    index = size + index;
  }
  return index === 0 ? 0 : index; // fix for (-a % a) => -0
}
function pad(v, length = 2, char = '0') {
  if (v === void 0 || v === null) {
    return v;
  }
  const val = '' + v;
  return val.length >= length ? val : new Array(length - val.length + 1).join(char) + val;
}
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ({
  humanStorageSize,
  capitalize,
  between,
  normalizeToInterval,
  pad
});

/***/ }),

/***/ 1054:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $P: () => (/* binding */ isDate),
/* harmony export */   Et: () => (/* binding */ isNumber),
/* harmony export */   Gv: () => (/* binding */ isObject),
/* harmony export */   Hv: () => (/* binding */ isDeepEqual)
/* harmony export */ });
/* unused harmony export isRegexp */
/* harmony import */ var core_js_modules_es_array_buffer_detached_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3186);
/* harmony import */ var core_js_modules_es_array_buffer_transfer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5531);
/* harmony import */ var core_js_modules_es_array_buffer_transfer_to_fixed_length_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5683);
/* harmony import */ var core_js_modules_esnext_set_difference_v2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8812);
/* harmony import */ var core_js_modules_esnext_set_intersection_v2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2042);
/* harmony import */ var core_js_modules_esnext_set_is_disjoint_from_v2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9875);
/* harmony import */ var core_js_modules_esnext_set_is_subset_of_v2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2090);
/* harmony import */ var core_js_modules_esnext_set_is_superset_of_v2_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8441);
/* harmony import */ var core_js_modules_esnext_set_symmetric_difference_v2_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8462);
/* harmony import */ var core_js_modules_esnext_set_union_v2_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(2336);










function isDeepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (a !== null && b !== null && typeof a === 'object' && typeof b === 'object') {
    if (a.constructor !== b.constructor) {
      return false;
    }
    let length, i;
    if (a.constructor === Array) {
      length = a.length;
      if (length !== b.length) {
        return false;
      }
      for (i = length; i-- !== 0;) {
        if (isDeepEqual(a[i], b[i]) !== true) {
          return false;
        }
      }
      return true;
    }
    if (a.constructor === Map) {
      if (a.size !== b.size) {
        return false;
      }
      let iter = a.entries();
      i = iter.next();
      while (i.done !== true) {
        if (b.has(i.value[0]) !== true) {
          return false;
        }
        i = iter.next();
      }
      iter = a.entries();
      i = iter.next();
      while (i.done !== true) {
        if (isDeepEqual(i.value[1], b.get(i.value[0])) !== true) {
          return false;
        }
        i = iter.next();
      }
      return true;
    }
    if (a.constructor === Set) {
      if (a.size !== b.size) {
        return false;
      }
      const iter = a.entries();
      i = iter.next();
      while (i.done !== true) {
        if (b.has(i.value[0]) !== true) {
          return false;
        }
        i = iter.next();
      }
      return true;
    }
    if (a.buffer != null && a.buffer.constructor === ArrayBuffer) {
      length = a.length;
      if (length !== b.length) {
        return false;
      }
      for (i = length; i-- !== 0;) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    }
    if (a.constructor === RegExp) {
      return a.source === b.source && a.flags === b.flags;
    }
    if (a.valueOf !== Object.prototype.valueOf) {
      return a.valueOf() === b.valueOf();
    }
    if (a.toString !== Object.prototype.toString) {
      return a.toString() === b.toString();
    }
    const keys = Object.keys(a).filter(key => a[key] !== void 0);
    length = keys.length;
    if (length !== Object.keys(b).filter(key => b[key] !== void 0).length) {
      return false;
    }
    for (i = length; i-- !== 0;) {
      const key = keys[i];
      if (isDeepEqual(a[key], b[key]) !== true) {
        return false;
      }
    }
    return true;
  }

  // true if both NaN, false otherwise
  return a !== a && b !== b; // eslint-disable-line no-self-compare
}

// not perfect, but what we ARE interested is for Arrays not to slip in
// as spread operator will mess things up in various areas
function isObject(v) {
  return v !== null && typeof v === 'object' && Array.isArray(v) !== true;
}
function isDate(v) {
  return Object.prototype.toString.call(v) === '[object Date]';
}
function isRegexp(v) {
  return Object.prototype.toString.call(v) === '[object RegExp]';
}
function isNumber(v) {
  return typeof v === 'number' && isFinite(v);
}
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ({
  deepEqual: isDeepEqual,
  object: isObject,
  date: isDate,
  regexp: isRegexp,
  number: isNumber
});

/***/ }),

/***/ 8253:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Or: () => (/* binding */ globalConfigIsFrozen),
/* harmony export */   cr: () => (/* binding */ globalConfig),
/* harmony export */   xX: () => (/* binding */ freezeGlobalConfig)
/* harmony export */ });
const globalConfig = {};
let globalConfigIsFrozen = false;
function freezeGlobalConfig() {
  globalConfigIsFrozen = true;
}

/***/ }),

/***/ 8536:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   US: () => (/* binding */ createGlobalNode),
/* harmony export */   YO: () => (/* binding */ changeGlobalNodesTarget),
/* harmony export */   _J: () => (/* binding */ removeGlobalNode)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var _private_config_instance_config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8253);


const nodesList = [];
const portalTypeList = [];
let portalIndex = 1;
let target =  false ? 0 : document.body;
function createGlobalNode(id, portalType) {
  const el = document.createElement('div');
  el.id = portalType !== void 0 ? `q-portal--${portalType}--${portalIndex++}` : id;
  if (_private_config_instance_config_js__WEBPACK_IMPORTED_MODULE_1__/* .globalConfig */ .cr.globalNodes !== void 0) {
    const cls = _private_config_instance_config_js__WEBPACK_IMPORTED_MODULE_1__/* .globalConfig */ .cr.globalNodes.class;
    if (cls !== void 0) {
      el.className = cls;
    }
  }
  target.appendChild(el);
  nodesList.push(el);
  portalTypeList.push(portalType);
  return el;
}
function removeGlobalNode(el) {
  const nodeIndex = nodesList.indexOf(el);
  nodesList.splice(nodeIndex, 1);
  portalTypeList.splice(nodeIndex, 1);
  el.remove();
}
function changeGlobalNodesTarget(newTarget) {
  if (newTarget === target) {
    return;
  }
  target = newTarget;
  if (target === document.body
  // or we have less than 2 dialogs:
  || portalTypeList.reduce((acc, type) => type === 'dialog' ? acc + 1 : acc, 0) < 2) {
    nodesList.forEach(node => {
      if (node.contains(target) === false) {
        target.appendChild(node);
      }
    });
    return;
  }
  const lastDialogIndex = portalTypeList.lastIndexOf('dialog');
  for (let i = 0; i < nodesList.length; i++) {
    const el = nodesList[i];
    if ((i === lastDialogIndex || portalTypeList[i] !== 'dialog') && el.contains(target) === false) {
      target.appendChild(el);
    }
  }
}

/***/ }),

/***/ 9467:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Xj: () => (/* binding */ createReactivePlugin),
/* harmony export */   Yg: () => (/* binding */ createDirective),
/* harmony export */   a0: () => (/* binding */ createComponent)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8734);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1758);
/* harmony import */ var _private_inject_obj_prop_inject_obj_prop_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2453);


function createComponent(raw) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .markRaw */ .IG)((0,vue__WEBPACK_IMPORTED_MODULE_1__/* .defineComponent */ .pM)(raw));
}
function createDirective(raw) {
  return (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .markRaw */ .IG)(raw);
}
const createReactivePlugin =  false ? 0 : (state, plugin) => {
  const reactiveState = (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .reactive */ .Kh)(state);
  for (const name in state) {
    (0,_private_inject_obj_prop_inject_obj_prop_js__WEBPACK_IMPORTED_MODULE_2__/* .injectProp */ .$)(plugin, name, () => reactiveState[name], val => {
      reactiveState[name] = val;
    });
  }
  return plugin;
};

/***/ }),

/***/ 8983:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FD: () => (/* binding */ addFocusWaitFlag),
/* harmony export */   Gy: () => (/* binding */ addFocusFn),
/* harmony export */   gv: () => (/* binding */ removeFocusWaitFlag),
/* harmony export */   vQ: () => (/* binding */ removeFocusFn)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);

let queue = [];
let waitFlags = [];
function clearFlag(flag) {
  waitFlags = waitFlags.filter(entry => entry !== flag);
}
function addFocusWaitFlag(flag) {
  clearFlag(flag);
  waitFlags.push(flag);
}
function removeFocusWaitFlag(flag) {
  clearFlag(flag);
  if (waitFlags.length === 0 && queue.length !== 0) {
    // only call last focus handler (can't focus multiple things at once)
    queue[queue.length - 1]();
    queue = [];
  }
}
function addFocusFn(fn) {
  if (waitFlags.length === 0) {
    fn();
  } else {
    queue.push(fn);
  }
}
function removeFocusFn(fn) {
  queue = queue.filter(entry => entry !== fn);
}

/***/ }),

/***/ 8173:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   g: () => (/* binding */ addFocusout),
/* harmony export */   v: () => (/* binding */ removeFocusout)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1597);


const handlers = [];
function trigger(e) {
  handlers[handlers.length - 1](e);
}
function addFocusout(fn) {
  if (_plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_1__/* .client */ .Sn.is.desktop === true) {
    handlers.push(fn);
    if (handlers.length === 1) {
      document.body.addEventListener('focusin', trigger);
    }
  }
}
function removeFocusout(fn) {
  const index = handlers.indexOf(fn);
  if (index !== -1) {
    handlers.splice(index, 1);
    if (handlers.length === 0) {
      document.body.removeEventListener('focusin', trigger);
    }
  }
}

/***/ }),

/***/ 2453:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $: () => (/* binding */ injectProp),
/* harmony export */   M: () => (/* binding */ injectMultipleProps)
/* harmony export */ });
function injectProp(target, propName, get, set) {
  Object.defineProperty(target, propName, {
    get,
    set,
    enumerable: true
  });
  return target;
}
function injectMultipleProps(target, props) {
  for (const key in props) {
    injectProp(target, key, props[key]);
  }
  return target;
}

/***/ }),

/***/ 8773:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   I: () => (/* binding */ addEscapeKey),
/* harmony export */   V: () => (/* binding */ removeEscapeKey)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1597);
/* harmony import */ var _private_keyboard_key_composition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2906);



const handlers = [];
let escDown;
function onKeydown(evt) {
  escDown = evt.keyCode === 27;
}
function onBlur() {
  if (escDown === true) {
    escDown = false;
  }
}
function onKeyup(evt) {
  if (escDown === true) {
    escDown = false;
    if ((0,_private_keyboard_key_composition_js__WEBPACK_IMPORTED_MODULE_2__/* .isKeyCode */ .Dv)(evt, 27) === true) {
      handlers[handlers.length - 1](evt);
    }
  }
}
function update(action) {
  window[action]('keydown', onKeydown);
  window[action]('blur', onBlur);
  window[action]('keyup', onKeyup);
  escDown = false;
}
function addEscapeKey(fn) {
  if (_plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_1__/* .client */ .Sn.is.desktop === true) {
    handlers.push(fn);
    if (handlers.length === 1) {
      update('addEventListener');
    }
  }
}
function removeEscapeKey(fn) {
  const index = handlers.indexOf(fn);
  if (index !== -1) {
    handlers.splice(index, 1);
    if (handlers.length === 0) {
      update('removeEventListener');
    }
  }
}

/***/ }),

/***/ 2906:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Dv: () => (/* binding */ isKeyCode),
/* harmony export */   JL: () => (/* binding */ shouldIgnoreKey),
/* harmony export */   V7: () => (/* binding */ onKeyDownComposition)
/* harmony export */ });
let lastKeyCompositionStatus = false;
function onKeyDownComposition(evt) {
  lastKeyCompositionStatus = evt.isComposing === true;
}
function shouldIgnoreKey(evt) {
  return lastKeyCompositionStatus === true || evt !== Object(evt) || evt.isComposing === true || evt.qKeyEvent === true;
}
function isKeyCode(evt, keyCodes) {
  return shouldIgnoreKey(evt) === true ? false : [].concat(keyCodes).includes(evt.keyCode);
}

/***/ }),

/***/ 5563:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bc: () => (/* binding */ closePortalMenus),
/* harmony export */   jx: () => (/* binding */ portalProxyList)
/* harmony export */ });
/* unused harmony exports getPortalProxy, closePortals */
/* harmony import */ var _private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5157);

const portalProxyList = [];
function getPortalProxy(el) {
  return portalProxyList.find(proxy => proxy.contentEl !== null && proxy.contentEl.contains(el));
}
function closePortalMenus(proxy, evt) {
  do {
    if (proxy.$options.name === 'QMenu') {
      proxy.hide(evt);

      // is this a point of separation?
      if (proxy.$props.separateClosePopup === true) {
        return (0,_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__/* .getParentProxy */ .V_)(proxy);
      }
    } else if (proxy.__qPortal === true) {
      // treat it as point of separation if parent is QPopupProxy
      // (so mobile matches desktop behavior)
      // and hide it too
      const parent = (0,_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__/* .getParentProxy */ .V_)(proxy);
      if (parent !== void 0 && parent.$options.name === 'QPopupProxy') {
        proxy.hide(evt);
        return parent;
      } else {
        return proxy;
      }
    }
    proxy = (0,_private_vm_vm_js__WEBPACK_IMPORTED_MODULE_0__/* .getParentProxy */ .V_)(proxy);
  } while (proxy !== void 0 && proxy !== null);
}
function closePortals(proxy, evt, depth) {
  while (depth !== 0 && proxy !== void 0 && proxy !== null) {
    if (proxy.__qPortal === true) {
      depth--;
      if (proxy.$options.name === 'QMenu') {
        proxy = closePortalMenus(proxy, evt);
        continue;
      }
      proxy.hide(evt);
    }
    proxy = getParentProxy(proxy);
  }
}

/***/ }),

/***/ 5139:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hp: () => (/* binding */ hMergeSlot),
/* harmony export */   Ij: () => (/* binding */ hUniqueSlot),
/* harmony export */   Kf: () => (/* binding */ hDir),
/* harmony export */   bG: () => (/* binding */ hMergeSlotSafely),
/* harmony export */   zm: () => (/* binding */ hSlot)
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1758);

function hSlot(slot, otherwise) {
  return slot !== void 0 ? slot() || otherwise : otherwise;
}
function hUniqueSlot(slot, otherwise) {
  if (slot !== void 0) {
    const vnode = slot();
    if (vnode !== void 0 && vnode !== null) {
      return vnode.slice();
    }
  }
  return otherwise;
}

/**
 * Source definitely exists,
 * so it's merged with the possible slot
 */
function hMergeSlot(slot, source) {
  return slot !== void 0 ? source.concat(slot()) : source;
}

/**
 * Merge with possible slot,
 * even if source might not exist
 */
function hMergeSlotSafely(slot, source) {
  if (slot === void 0) {
    return source;
  }
  return source !== void 0 ? source.concat(slot()) : slot();
}

/*
 * (String)  key       - unique vnode key
 * (Boolean) condition - should change ONLY when adding/removing directive
 */
function hDir(tag, data, children, key, condition, getDirsFn) {
  data.key = key + condition;
  const vnode = (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(tag, data, children);
  return condition === true ? (0,vue__WEBPACK_IMPORTED_MODULE_0__/* .withDirectives */ .bo)(vnode, getDirsFn()) : vnode;
}

/***/ }),

/***/ 4897:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ rtlHasScrollBug)
/* harmony export */ });
let rtlHasScrollBug = false;

// mobile Chrome takes the crown for this
if (true) {
  const scroller = document.createElement('div');
  scroller.setAttribute('dir', 'rtl');
  Object.assign(scroller.style, {
    width: '1px',
    height: '1px',
    overflow: 'auto'
  });
  const spacer = document.createElement('div');
  Object.assign(spacer.style, {
    width: '1000px',
    height: '1px'
  });
  document.body.appendChild(scroller);
  scroller.appendChild(spacer);
  scroller.scrollLeft = -1000;
  rtlHasScrollBug = scroller.scrollLeft >= 0;
  scroller.remove();
}


/***/ }),

/***/ 2941:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   w: () => (/* binding */ clearSelection)
/* harmony export */ });
/* harmony import */ var _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1597);

function clearSelection() {
  if (window.getSelection !== void 0) {
    const selection = window.getSelection();
    if (selection.empty !== void 0) {
      selection.empty();
    } else if (selection.removeAllRanges !== void 0) {
      selection.removeAllRanges();
      _plugins_platform_Platform_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Ay.is.mobile !== true && selection.addRange(document.createRange());
    }
  } else if (document.selection !== void 0) {
    document.selection.empty();
  }
}

/***/ }),

/***/ 7973:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $3: () => (/* binding */ stepperKey),
/* harmony export */   BE: () => (/* binding */ fabKey),
/* harmony export */   ON: () => (/* binding */ layoutKey),
/* harmony export */   U_: () => (/* binding */ emptyRenderFn),
/* harmony export */   Uv: () => (/* binding */ tabsKey),
/* harmony export */   XA: () => (/* binding */ quasarKey),
/* harmony export */   YR: () => (/* binding */ pageContainerKey),
/* harmony export */   q3: () => (/* binding */ formKey)
/* harmony export */ });
/* unused harmony exports timelineKey, uploaderKey */
const quasarKey = '_q_';
const timelineKey = '_q_t_';
const stepperKey = '_q_s_';
const layoutKey = '_q_l_';
const pageContainerKey = '_q_pc_';
const fabKey = '_q_f_';
const formKey = '_q_fo_';
const tabsKey = '_q_tabs_';
const uploaderKey = '_q_u_';
function emptyRenderFn() {}

/***/ }),

/***/ 7677:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ getModifierDirections),
/* harmony export */   W: () => (/* binding */ shouldStart)
/* harmony export */ });
const modifiersAll = {
  left: true,
  right: true,
  up: true,
  down: true,
  horizontal: true,
  vertical: true
};
const directionList = Object.keys(modifiersAll);
modifiersAll.all = true;
function getModifierDirections(mod) {
  const dir = {};
  for (const direction of directionList) {
    if (mod[direction] === true) {
      dir[direction] = true;
    }
  }
  if (Object.keys(dir).length === 0) {
    return modifiersAll;
  }
  if (dir.horizontal === true) {
    dir.left = dir.right = true;
  } else if (dir.left === true && dir.right === true) {
    dir.horizontal = true;
  }
  if (dir.vertical === true) {
    dir.up = dir.down = true;
  } else if (dir.up === true && dir.down === true) {
    dir.vertical = true;
  }
  if (dir.horizontal === true && dir.vertical === true) {
    dir.all = true;
  }
  return dir;
}

// This is especially important (not the main reason, but important)
// for TouchSwipe directive running on Firefox
// because text selection on such elements cannot be determined
// without additional work (on top of getSelection() API)
// https://bugzilla.mozilla.org/show_bug.cgi?id=85686
const avoidNodeNamesList = ['INPUT', 'TEXTAREA'];
function shouldStart(evt, ctx) {
  return ctx.event === void 0 && evt.target !== void 0 && evt.target.draggable !== true && typeof ctx.handler === 'function' && avoidNodeNamesList.includes(evt.target.nodeName.toUpperCase()) === false && (evt.qClonedBy === void 0 || evt.qClonedBy.indexOf(ctx.uid) === -1);
}

/***/ }),

/***/ 5157:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $b: () => (/* binding */ vmHasRouter),
/* harmony export */   Hl: () => (/* binding */ getNormalizedVNodes),
/* harmony export */   V_: () => (/* binding */ getParentProxy),
/* harmony export */   rU: () => (/* binding */ vmIsDestroyed)
/* harmony export */ });
/* harmony import */ var core_js_modules_esnext_set_difference_v2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8812);
/* harmony import */ var core_js_modules_esnext_set_intersection_v2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2042);
/* harmony import */ var core_js_modules_esnext_set_is_disjoint_from_v2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9875);
/* harmony import */ var core_js_modules_esnext_set_is_subset_of_v2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2090);
/* harmony import */ var core_js_modules_esnext_set_is_superset_of_v2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8441);
/* harmony import */ var core_js_modules_esnext_set_symmetric_difference_v2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8462);
/* harmony import */ var core_js_modules_esnext_set_union_v2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(2336);







// copied to docs too
function getParentProxy(proxy) {
  if (Object(proxy.$parent) === proxy.$parent) {
    return proxy.$parent;
  }
  let {
    parent
  } = proxy.$;
  while (Object(parent) === parent) {
    if (Object(parent.proxy) === parent.proxy) {
      return parent.proxy;
    }
    parent = parent.parent;
  }
}
function fillNormalizedVNodes(children, vnode) {
  if (typeof vnode.type === 'symbol') {
    if (Array.isArray(vnode.children) === true) {
      vnode.children.forEach(child => {
        fillNormalizedVNodes(children, child);
      });
    }
  } else {
    children.add(vnode);
  }
}

// vnodes from rendered in advanced slots
function getNormalizedVNodes(vnodes) {
  const children = new Set();
  vnodes.forEach(vnode => {
    fillNormalizedVNodes(children, vnode);
  });
  return Array.from(children);
}
function vmHasRouter(vm) {
  return vm.appContext.config.globalProperties.$router !== void 0;
}
function vmIsDestroyed(vm) {
  return vm.isUnmounted === true || vm.isDeactivated === true;
}

/***/ }),

/***/ 8336:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D_: () => (/* binding */ hasScrollbar),
/* harmony export */   RZ: () => (/* binding */ setVerticalScrollPosition),
/* harmony export */   XJ: () => (/* binding */ getScrollbarWidth),
/* harmony export */   cP: () => (/* binding */ scrollTargetProp),
/* harmony export */   fQ: () => (/* binding */ getVerticalScrollPosition),
/* harmony export */   hD: () => (/* binding */ getScrollTarget),
/* harmony export */   lS: () => (/* binding */ getHorizontalScrollPosition),
/* harmony export */   rr: () => (/* binding */ setHorizontalScrollPosition)
/* harmony export */ });
/* unused harmony exports getScrollHeight, getScrollWidth, animVerticalScrollTo, animHorizontalScrollTo */
/* harmony import */ var _dom_dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7556);

const scrollTargetProp =  false ? 0 /* SSR does not know about Element */ : [Element, String];
const scrollTargets =  false ? 0 : [null, document, document.body, document.scrollingElement, document.documentElement];
function getScrollTarget(el, targetEl) {
  let target = (0,_dom_dom_js__WEBPACK_IMPORTED_MODULE_0__/* .getElement */ .V6)(targetEl);
  if (target === void 0) {
    if (el === void 0 || el === null) {
      return window;
    }
    target = el.closest('.scroll,.scroll-y,.overflow-auto');
  }
  return scrollTargets.includes(target) ? window : target;
}
function getScrollHeight(el) {
  return (el === window ? document.body : el).scrollHeight;
}
function getScrollWidth(el) {
  return (el === window ? document.body : el).scrollWidth;
}
function getVerticalScrollPosition(scrollTarget) {
  return scrollTarget === window ? window.pageYOffset || window.scrollY || document.body.scrollTop || 0 : scrollTarget.scrollTop;
}
function getHorizontalScrollPosition(scrollTarget) {
  return scrollTarget === window ? window.pageXOffset || window.scrollX || document.body.scrollLeft || 0 : scrollTarget.scrollLeft;
}
function animVerticalScrollTo(el, to, duration = 0 /* , prevTime */) {
  const prevTime = arguments[3] === void 0 ? performance.now() : arguments[3];
  const pos = getVerticalScrollPosition(el);
  if (duration <= 0) {
    if (pos !== to) {
      setScroll(el, to);
    }
    return;
  }
  requestAnimationFrame(nowTime => {
    const frameTime = nowTime - prevTime;
    const newPos = pos + (to - pos) / Math.max(frameTime, duration) * frameTime;
    setScroll(el, newPos);
    if (newPos !== to) {
      animVerticalScrollTo(el, to, duration - frameTime, nowTime);
    }
  });
}
function animHorizontalScrollTo(el, to, duration = 0 /* , prevTime */) {
  const prevTime = arguments[3] === void 0 ? performance.now() : arguments[3];
  const pos = getHorizontalScrollPosition(el);
  if (duration <= 0) {
    if (pos !== to) {
      setHorizontalScroll(el, to);
    }
    return;
  }
  requestAnimationFrame(nowTime => {
    const frameTime = nowTime - prevTime;
    const newPos = pos + (to - pos) / Math.max(frameTime, duration) * frameTime;
    setHorizontalScroll(el, newPos);
    if (newPos !== to) {
      animHorizontalScrollTo(el, to, duration - frameTime, nowTime);
    }
  });
}
function setScroll(scrollTarget, offset) {
  if (scrollTarget === window) {
    window.scrollTo(window.pageXOffset || window.scrollX || document.body.scrollLeft || 0, offset);
    return;
  }
  scrollTarget.scrollTop = offset;
}
function setHorizontalScroll(scrollTarget, offset) {
  if (scrollTarget === window) {
    window.scrollTo(offset, window.pageYOffset || window.scrollY || document.body.scrollTop || 0);
    return;
  }
  scrollTarget.scrollLeft = offset;
}
function setVerticalScrollPosition(scrollTarget, offset, duration) {
  if (duration) {
    animVerticalScrollTo(scrollTarget, offset, duration);
    return;
  }
  setScroll(scrollTarget, offset);
}
function setHorizontalScrollPosition(scrollTarget, offset, duration) {
  if (duration) {
    animHorizontalScrollTo(scrollTarget, offset, duration);
    return;
  }
  setHorizontalScroll(scrollTarget, offset);
}
let size;
function getScrollbarWidth() {
  if (size !== undefined) {
    return size;
  }
  const inner = document.createElement('p'),
    outer = document.createElement('div');
  (0,_dom_dom_js__WEBPACK_IMPORTED_MODULE_0__/* .css */ .AH)(inner, {
    width: '100%',
    height: '200px'
  });
  (0,_dom_dom_js__WEBPACK_IMPORTED_MODULE_0__/* .css */ .AH)(outer, {
    position: 'absolute',
    top: '0px',
    left: '0px',
    visibility: 'hidden',
    width: '200px',
    height: '150px',
    overflow: 'hidden'
  });
  outer.appendChild(inner);
  document.body.appendChild(outer);
  const w1 = inner.offsetWidth;
  outer.style.overflow = 'scroll';
  let w2 = inner.offsetWidth;
  if (w1 === w2) {
    w2 = outer.clientWidth;
  }
  outer.remove();
  size = w1 - w2;
  return size;
}
function hasScrollbar(el, onY = true) {
  if (!el || el.nodeType !== Node.ELEMENT_NODE) {
    return false;
  }
  return onY ? el.scrollHeight > el.clientHeight && (el.classList.contains('scroll') || el.classList.contains('overflow-auto') || ['auto', 'scroll'].includes(window.getComputedStyle(el)['overflow-y'])) : el.scrollWidth > el.clientWidth && (el.classList.contains('scroll') || el.classList.contains('overflow-auto') || ['auto', 'scroll'].includes(window.getComputedStyle(el)['overflow-x']));
}
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ({
  getScrollTarget,
  getScrollHeight,
  getScrollWidth,
  getVerticalScrollPosition,
  getHorizontalScrollPosition,
  animVerticalScrollTo,
  animHorizontalScrollTo,
  setVerticalScrollPosition,
  setHorizontalScrollPosition,
  getScrollbarWidth,
  hasScrollbar
});

/***/ }),

/***/ 5192:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var core_js_modules_es_array_buffer_detached_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3186);
/* harmony import */ var core_js_modules_es_array_buffer_transfer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5531);
/* harmony import */ var core_js_modules_es_array_buffer_transfer_to_fixed_length_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5683);
/* harmony import */ var core_js_modules_es_typed_array_with_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9048);





/**
 * Based on the work of https://github.com/jchook/uuid-random
 */

let buf,
  bufIdx = 0;
const hexBytes = new Array(256);

// Pre-calculate toString(16) for speed
for (let i = 0; i < 256; i++) {
  hexBytes[i] = (i + 0x100).toString(16).substring(1);
}

// Use best available PRNG
const randomBytes = (() => {
  // Node & Browser support
  const lib = typeof crypto !== 'undefined' ? crypto : typeof window !== 'undefined' ? window.crypto || window.msCrypto : void 0;
  if (lib !== void 0) {
    if (lib.randomBytes !== void 0) {
      return lib.randomBytes;
    }
    if (lib.getRandomValues !== void 0) {
      return n => {
        const bytes = new Uint8Array(n);
        lib.getRandomValues(bytes);
        return bytes;
      };
    }
  }
  return n => {
    const r = [];
    for (let i = n; i > 0; i--) {
      r.push(Math.floor(Math.random() * 256));
    }
    return r;
  };
})();

// Buffer random numbers for speed
// Reduce memory usage by decreasing this number (min 16)
// or improve speed by increasing this number (try 16384)
const BUFFER_SIZE = 4096;
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {
  // Buffer some random bytes for speed
  if (buf === void 0 || bufIdx + 16 > BUFFER_SIZE) {
    bufIdx = 0;
    buf = randomBytes(BUFFER_SIZE);
  }
  const b = Array.prototype.slice.call(buf, bufIdx, bufIdx += 16);
  b[6] = b[6] & 0x0f | 0x40;
  b[8] = b[8] & 0x3f | 0x80;
  return hexBytes[b[0]] + hexBytes[b[1]] + hexBytes[b[2]] + hexBytes[b[3]] + '-' + hexBytes[b[4]] + hexBytes[b[5]] + '-' + hexBytes[b[6]] + hexBytes[b[7]] + '-' + hexBytes[b[8]] + hexBytes[b[9]] + '-' + hexBytes[b[10]] + hexBytes[b[11]] + hexBytes[b[12]] + hexBytes[b[13]] + hexBytes[b[14]] + hexBytes[b[15]];
}

/***/ }),

/***/ 6501:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _install_quasar_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4835);
/* harmony import */ var _plugins_lang_Lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4360);
/* harmony import */ var _plugins_icon_set_IconSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3493);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'Quasar',
  version: "2.16.6",
  install: _install_quasar_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A,
  // TODO: remove in Qv3 (should only be used through the plugin)
  // We provide a deprecated fallback here
  lang: _plugins_lang_Lang_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A,
  // TODO: remove in Qv3 (should only be used through the plugin)
  // We provide a deprecated fallback here
  iconSet: _plugins_icon_set_IconSet_js__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A
});

/***/ }),

/***/ 1573:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   M_: () => (/* binding */ store),
/* harmony export */   wE: () => (/* binding */ route),
/* harmony export */   zj: () => (/* binding */ boot)
/* harmony export */ });
/* unused harmony exports configure, preFetch, ssrMiddleware, bexBackground, bexContent, bexDom, ssrProductionExport, ssrCreate, ssrListen, ssrClose, ssrServeStaticContent, ssrRenderPreloadTag */
// Functions in this file are no-op,
//  they just take a callback function and return it
// They're used to apply typings to the callback
//  parameters and return value when using Quasar with TypeScript
// We need these in `ui` folder to make `quasar/wrapper` import work,
//  but they are useful only for Quasar CLI projects
// They are typed via module augmentation by `@quasar/app-webpack` / `@quasar/app-vite`

function boot(callback) {
  return callback;
}
function configure(callback) {
  return callback;
}
function preFetch(callback) {
  return callback;
}
function route(callback) {
  return callback;
}
function store(callback) {
  return callback;
}
function ssrMiddleware(callback) {
  return callback;
}
function bexBackground(callback) {
  return callback;
}
function bexContent(callback) {
  return callback;
}
function bexDom(callback) {
  return callback;
}

/**
 * Below only for @quasar/app-webpack v3
 */

function ssrProductionExport(callback) {
  return callback;
}

/**
 * Below only for @quasar/app-vite & @quasar/app-webpack v4+
 */

function ssrCreate(callback) {
  return callback;
}
function ssrListen(callback) {
  return callback;
}
function ssrClose(callback) {
  return callback;
}
function ssrServeStaticContent(callback) {
  return callback;
}
function ssrRenderPreloadTag(callback) {
  return callback;
}

/***/ })

}]);
//# sourceMappingURL=vendor.97ee73d4.js.map