{"version":3,"file":"css/157.5b03a8f3.css","mappings":";AAkMA;EACE,SAAS;EACT,OAAO;EACP,QAAQ;EACR,eAAe,GAAG,mDAAmD;AACvE;AAEA;IACI,YAAY;AAChB;AAEA;IACI,WAAW;IACX,aAAa;IACb,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,mBAAmB;AACvB;AAEA;IACI,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,gBAAgB;AACpB;AAEA;IACI,kCAAkC;IAClC,UAAU;AACd;AAEA;IACI,kCAAkC;IAClC,0BAA0B,EAAE,uCAAuC;IACnE,UAAU;AACd;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,uBAAuB;IACvB,UAAU;AACd;AAEA;IACI,uBAAuB;AAC3B;AAEA;IACI,QAAQ;IACR,SAAS;IACT,kCAAkC;IAClC,qCAAqC;IACrC,kBAAkB;IAClB,QAAQ;IACR,2BAA2B;AAC/B;AAEA;IACI,6BAA6B;IAC7B,OAAO;AACX;AAEA;IACI,8BAA8B;IAC9B,QAAQ;AACZ;AAEA;IACI,eAAe;IACf,WAAW;IACX,aAAa;IACb,uBAAuB;AAC3B","sources":["webpack://pok/./src/pages/TunerPage.vue"],"sourcesContent":["<template>\n  <q-page>\n      <q-card flat>\n        <q-card-section class=\"flex flex-center\" style=\"margin-top: 90px;\">\n          <div v-if='isTunerOn' class=\"tuner-device\">\n            <div class=\"tuner-container\">\n              <div class=\"circle fixed-background-circle\"></div>\n              <div class=\"circle moving-circle\" :class=\"isInTune\" :style=\"{ left: centsToPosition }\" ></div>\n              <div class=\"circle note-circle\">{{ note }}</div>\n              <div class=\"triangle left-triangle\" :style=\"{ display: leftTriangleDisplayStyle }\"></div>\n              <div class=\"triangle right-triangle\" :style=\"{ display: rightTriangleDisplayStyle }\"></div>\n            </div>\n\n            <div class=\"cents-container\">\n                <div>{{ displayCents }}</div>\n            </div>\n          </div>\n\n          <div v-else class=\"column full-width\">\n            <div>\n            Du bist noch nicht fertig mit dem Stimmen deines Instruments?\n            </div>\n            <div class=\"column q-mt-xl\">\n            <q-btn no-caps rounded color=\"primary\" size='xl' label=\"Weiter stimmen\" @click=\"restartTuner\"/>\n            </div>\n          </div>\n\n        </q-card-section>\n      </q-card>\n\n      <q-linear-progress\n      :value=\"progress\"\n      size=\"lg\"\n      stripe\n      color=\"secondary\"\n      position=\"absolute\"\n      class=\"progress-bar-bottom\"\n      />\n\n  </q-page>\n</template>\n\n<script>\nimport { useInstrumentStore } from 'stores/instruments-store';\nimport { turnTunerOn, turnTunerOff, getTuning } from '@/services/apiServices';\n\nexport default {\n  setup() {\n    const TUNING_DURATTION_MAX = 90000; // how long to run one turing iteration in milliseconds\n    const TUING_UPDATE_INTERVAL = 200;  // how often to update tuning in milliseconds\n\n    return { TUNING_DURATTION_MAX, TUING_UPDATE_INTERVAL };\n  },\n  data() {\n    return {\n      isTunerOn: true,\n      timer: null,\n      note: 'E',\n      cents: '0',\n      intervalId: null,\n      instrumentId: this.$route.params.id,\n      progress: 1,\n      fetchTunerIteration: 0,\n    };\n  },\n  computed: {\n    isInTune() {\n      return {\n        'green-circle': this.cents >= -2 && this.cents <= 2\n      };\n    },\n    displayCents: {\n      get() {\n        return this.cents + ' ct';\n      }\n    } ,\n    centsToPosition: {\n      get() {\n        const deviation = Math.min(Math.max(parseInt(this.cents), -10), 10);\n        return ((deviation * 5) + 75) + 'px';\n      }\n    } ,\n    leftTriangleDisplayStyle: {\n      get() {\n        if (this.cents < -2) {\n          return 'block';\n        } else {\n          return 'none';\n        }\n      },\n    },\n    rightTriangleDisplayStyle: {\n      get() {\n        if (this.cents > 2) {\n          return 'block';\n        } else {\n          return 'none';\n        }\n      }\n    }\n  },\n  mounted() {\n    this.startReminderTimer();\n    this.startTuner();\n    this.fetchTuning();\n\n    if (this.instrumentId)\n    {\n      this.intervalId = setInterval(this.fetchTuning, this.TUING_UPDATE_INTERVAL);\n    }\n  },\n  beforeUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  },\n  unmounted() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n\n    this.stopTuner();\n  },\n  methods: {\n    restartTuner() {\n      this.fetchTunerIteration = 0;\n      this.isTunerOn = true;\n      this.startTuner();\n      this.fetchTuning();\n      this.startReminderTimer();\n\n      if (this.instrumentId)\n      {\n        this.intervalId = setInterval(this.fetchTuning, this.TUING_UPDATE_INTERVAL);\n      }\n    },\n    startReminderTimer()\n    {\n      this.timer = setTimeout(() => {\n        this.isTunerOn = false;\n\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n          this.intervalId = null;\n        }\n\n        this.stopTuner();\n      }, this.TUNING_DURATTION_MAX);\n    },  \n    startTuner() {\n        if (!this.instrumentId)\n        {\n          return;\n        }\n\n        turnTunerOn(this.instrumentId)\n        .catch(error => {\n          console.error('Error starting tuner:', error);\n        });\n    },\n    stopTuner() {\n        if (!this.instrumentId)\n        {\n          return;\n        }\n\n        turnTunerOff(this.instrumentId)\n        .catch(error => {\n          console.error('Error stopping tuner:', error);\n        });\n    },\n    fetchTuning() {\n      if (!this.instrumentId)\n      {\n        return;\n      }\n\n      this.progress = 1 - (this.fetchTunerIteration++ / (this.TUNING_DURATTION_MAX / this.TUING_UPDATE_INTERVAL));\n\n      getTuning(this.instrumentId)\n        .then(response => {\n          this.note = response.data.note;\n          this.cents = response.data.deviation;\n        })\n        .catch(error => {\n          console.error('Error fetching tuning:', error);\n        });\n\n    },\n  }\n}\n</script>\n\n<style scoped>\n.progress-bar-bottom {\n  bottom: 0;\n  left: 0;\n  right: 0;\n  position: fixed;  /* Ensure the progress bar is fixed at the bottom */\n}\n\n.tuner-device {\n    width: 300px;\n}\n\n.tuner-container {\n    width: 100%;\n    height: 200px;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 20px;\n}\n\n.circle {\n    width: 150px;\n    height: 150px;\n    border-radius: 50%;\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 100px;\n}\n\n.fixed-background-circle {\n    background-color: rgb(232,232,232);\n    z-index: 1;\n}\n\n.moving-circle {\n    background-color: rgb(253,178, 36);\n    transition: left 0.1s ease; /* Add transition for smooth movement */\n    z-index: 2; \n}\n\n.note-circle {\n    background-color: transparent;\n    color: black;\n    font-family: sans-serif;\n    z-index: 3; \n}\n\n.green-circle {\n    background-color: green;\n}\n\n.triangle {\n    width: 0;\n    height: 0;\n    border-top: 20px solid transparent;\n    border-bottom: 20px solid transparent;\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n}\n\n.left-triangle {\n    border-left: 20px solid white;\n    left: 0;\n}\n\n.right-triangle {\n    border-right: 20px solid white;\n    right: 0;\n}\n\n.cents-container {\n    font-size: 40px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n}\n</style>"],"names":[],"sourceRoot":""}