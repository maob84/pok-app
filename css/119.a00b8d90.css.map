{"version":3,"file":"css/119.a00b8d90.css","mappings":";AAqPA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,gBAAgB;AAClB","sources":["webpack://pok/./src/components/InstrumentControl.vue"],"sourcesContent":["<template>\n  <q-card flat>\n    <q-card-section class=\"q-pb-xl\">\n      <q-btn color='secondary' class=\"q-mt-sm\" no-caps rounded @click=\"selectInstrument\">{{ selectedInstrumentName || \"Wähle dein Instrument\"}}</q-btn>\n      <q-fab v-if='selectedInstrumentId && !isMuted' class='float-right' color=\"primary\"  icon=\"keyboard_arrow_left\" direction=\"left\">\n          <q-fab-action  color='secondary' @click=\"toggleMute\" icon=\"volume_off\">\n          </q-fab-action>\n          <q-fab-action  color='secondary' @click=\"openPanorama\" icon=\"panorama_horizontal\">\n          </q-fab-action>\n          <q-fab-action  color='secondary' v-if='selectedInstrumentHasTuner' @click=\"openTuner\">\n            <img class='icon-img' src=\"@/assets/icons/tuning-fork.png\">\n          </q-fab-action>\n        \n      </q-fab>\n    </q-card-section>\n\n    <q-card-section v-if='selectedInstrumentId && !isMuted' flat class=\"full-width q-pa-none row no-wrap items-start q-pa-none\">\n      <div class=\"col-5\">\n        <q-card flat>\n          <q-card-section class=\"q-mr-sm\">\n            <div class=\"full-width q-mb-md flex flex-center\">\n              <q-btn :disable='isMuted' round icon=\"volume_up\" color='primary' @click='changeVolume(1)' size=\"lg\"></q-btn>\n            </div>\n            \n            <div class=\"full-width flex flex-center\">\n              <q-slider\n                :disable=\"isMuted\"\n                class='vertical-slider'\n                v-model=\"intVolume\"\n                track-size=\"40px\"\n                thumb-size=\"0px\"\n                color=\"grey-6\"\n                reverse\n                :min=\"0\"\n                :max=\"100\"\n                vertical\n              />\n            </div>\n            <div class=\"full-width q-mt-md q-mb-xl flex flex-center\">\n              <q-btn :disable='isMuted' round icon=\"volume_down\" color='primary' @click='changeVolume(-1)' size=\"lg\"></q-btn>\n            </div>\n            <div class='full-width flex flex-center'>\n              {{  displayVolume }}\n            </div>\n          </q-card-section>\n        </q-card>\n      </div>\n\n      <div class=\"col-7\">\n        <q-card flat>\n          <q-card-section class=\"q-pl-md q-pr-lg\">\n            <q-btn padding=''\n                      :disable=\"isMuted\"\n                      dense\n                      no-wrap\n                      no-caps size='md' \n                      class='full-width q-mb-md q-pa-md' \n                      :class=\"getPresetButtonClass(index+1)\"\n                      :label=\"presets[index]\"\n                      v-for=\"(preset, index) in presets\" :key=\"index\"\n                      @click=\"selectPreset(index + 1)\">\n              </q-btn>\n          </q-card-section>\n        </q-card>\n      </div>\n\n    </q-card-section>\n\n    <q-card-section v-if='selectedInstrumentId && isMuted' flat class=\"column items-center\" style=\"margin-top: 120px;\">\n          <q-btn round icon=\"volume_off\" color='primary' @click='toggleMute' size=\"xl\"></q-btn>\n          <div class=\"q-mt-lg\">\n          Instrument ist stummgeschaltet\n          </div>\n    </q-card-section>\n\n  </q-card>\n</template>\n\n<script>\nimport { useInstrumentStore } from '@/stores/instruments-store';\nimport { useRouter } from 'vue-router';\nimport { computed, watch } from 'vue';\nimport { getInstrumentById, selectInstrumentPreset, toggleInstrumentMute, updateInstrumentVolume } from '@/services/apiServices';\n\nexport default {\nsetup() {\n  const store = useInstrumentStore();\n  const router = useRouter();\n\n  const selectedInstrumentName = computed(() => store.getSelectedInstrumentName);\n  const selectedInstrumentId = computed(() => store.getSelectedInstrumentId);\n  const selectedInstrumentHasTuner = computed(() => store.selectedInstrumentHasTuner);\n\n  const selectInstrument = () => {\n    router.push('/select-instrument');\n  }\n\n  const openTuner = () => {\n    router.push(`/tuner/${selectedInstrumentId.value}`);\n  }\n\n  const openPanorama = () => {\n    router.push(`/panorama/${selectedInstrumentId.value}`);\n  }\n\n  return { \n    selectedInstrumentName,\n    selectedInstrumentId,\n    selectedInstrumentHasTuner,\n    selectInstrument,\n    openTuner,\n    openPanorama,\n  };\n},\ncreated() {\n  const store = useInstrumentStore();\n\n  this.updateInstrumentState(store.getSelectedInstrumentId)\n},\n\nname: 'InstrumentControl',\ndata() {\n  return {\n    isLoading: true,\n    volume: 30,\n    isMuted: false,\n    currentPreset: null,       // we start with index 0, in the REST api the first element is 1\n    presets: [],\n  };\n},\ncomponents:\n{\n},\ncomputed: {\n  intVolume: {\n    get() {\n      return this.volume;\n    },\n    set(value) {\n      let volume = parseInt(value, 10);\n\n      this.changeVolume(volume - this.volume);\n    }\n  },\n  displayVolume: {\n    get() {\n      return \"Lautstärke \" + this.volume + ' %';\n    }\n  } \n},\nmounted() {\n  const store = useInstrumentStore();\n\n  watch(() => store.selectedInstrumentId, (newValue) => {\n    this.updateInstrumentState(newValue);\n  });\n  \n},\nmethods: {\n  getPresetButtonClass(index) {\n    if (this.currentPreset === index) {\n      return 'bg-primary text-white';\n    } else \n    {\n      return 'bg-secondary text-white';\n    }\n  },\n  getMuteButtonClass() {\n      return {\n        'bg-primary text-white': this.isMuted\n      };\n  },\n  updateInstrumentState(selectedInstrumentId) {\n    if (!selectedInstrumentId) return;\n\n    getInstrumentById(selectedInstrumentId)\n      .then(response => {\n        this.isMuted = response.data.is_muted;\n        this.volume = response.data.volume;\n        this.currentPreset = response.data.selected_preset.id;\n\n        // retrieve reported presets and store names in local array\n        this.presets = response.data.presets.slice(0, 6).map(preset => preset.name);\n      })\n      .catch(error => {\n        console.error('Error fetching instrument state:', error);\n      });\n\n      this.isLoading = false;\n  },\n  toggleMute() {\n    const store = useInstrumentStore();\n    const selectedInstrumentId = store.getSelectedInstrumentId;\n    if (!selectedInstrumentId) return;\n\n    this.isMuted = !this.isMuted;\n\n    toggleInstrumentMute(selectedInstrumentId)\n      .then(response => {\n        this.isMuted = response.data.is_muted\n      })\n      .catch(error => {\n        console.error('Error toggling mute:', error);\n      });\n\n  },\n  changeVolume(amount) {\n    const store = useInstrumentStore();\n    const selectedInstrumentId = store.getSelectedInstrumentId;\n    if (!selectedInstrumentId) return;\n\n    this.volume = Math.max(0, Math.min(100, this.volume + amount));\n\n    // perform REST api call and update state with response\n    updateInstrumentVolume(selectedInstrumentId, this.volume)\n      .then(response => {\n        this.volume = response.data.volume\n      })\n      .catch(error => {\n        console.error('Error setting volume:', error);\n      });\n\n\n  },\n  selectPreset(presetId) {\n    const store = useInstrumentStore();\n    const selectedInstrumentId = store.getSelectedInstrumentId;\n    if (!selectedInstrumentId) return;\n\n    this.currentPreset = presetId;\n\n    selectInstrumentPreset(selectedInstrumentId, presetId)\n      .then(response => {\n        this.currentPreset = response.data.selected_preset.id;\n      })\n      .catch(error => {\n        console.error('Error setting preset:', error);\n      });\n\n  }\n}\n};\n</script>\n\n<style scoped>\n.icon-img {\n  width: 24px;\n  height: 24px;\n  max-width: 100%;\n  max-height: 100%;\n}\n\n</style>"],"names":[],"sourceRoot":""}