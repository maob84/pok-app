{"version":3,"file":"css/74.4b5e23b7.css","mappings":";AAiJA;IACI,YAAY;AAChB;AAEA;IACI,WAAW;IACX,aAAa;IACb,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,mBAAmB;AACvB;AAEA;IACI,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,gBAAgB;AACpB;AAEA;IACI,kCAAkC;IAClC,UAAU;AACd;AAEA;IACI,kCAAkC;IAClC,0BAA0B,EAAE,uCAAuC;IACnE,UAAU;AACd;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,uBAAuB;IACvB,UAAU;AACd;AAEA;IACI,uBAAuB;AAC3B;AAEA;IACI,QAAQ;IACR,SAAS;IACT,kCAAkC;IAClC,qCAAqC;IACrC,kBAAkB;IAClB,QAAQ;IACR,2BAA2B;AAC/B;AAEA;IACI,6BAA6B;IAC7B,OAAO;AACX;AAEA;IACI,8BAA8B;IAC9B,QAAQ;AACZ;AAEA;IACI,eAAe;IACf,WAAW;IACX,aAAa;IACb,uBAAuB;AAC3B;;;ACLA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,gBAAgB;AAClB;AAEA;EACE,YAAY;AACd","sources":["webpack://pok/./src/components/TunerDialog.vue","webpack://pok/./src/components/InstrumentControlFixed.vue"],"sourcesContent":["<template>\n  <q-dialog v-model=\"showDialog\" @hide=\"close\">\n      <q-card>\n        <q-toolbar>\n          <q-toolbar-title>Chromatisches Stimmger√§t</q-toolbar-title>\n          <q-btn flat round dense icon=\"close\" v-close-popup />\n        </q-toolbar>\n\n        <q-card-section class=\"flex flex-center\">\n          <div class=\"tuner-device\">\n            <div class=\"tuner-container\">\n              <div class=\"circle fixed-background-circle\"></div>\n              <div class=\"circle moving-circle\" :class=\"isInTune\" :style=\"{ left: centsToPosition }\" ></div>\n              <div class=\"circle note-circle\">{{ note }}</div>\n              <div class=\"triangle left-triangle\" :style=\"{ display: leftTriangleDisplayStyle }\"></div>\n              <div class=\"triangle right-triangle\" :style=\"{ display: rightTriangleDisplayStyle }\"></div>\n            </div>\n\n            <div class=\"cents-container\">\n                <div>{{ displayCents }}</div>\n            </div>\n          </div>\n        </q-card-section>\n      </q-card>\n    </q-dialog>\n\n</template>\n\n<script>\nimport { computed } from 'vue'\nimport { useInstrumentStore } from 'stores/instruments-store';\nimport { turnTunerOn, turnTunerOff, getTuning } from '@/services/apiServices';\n\nexport default {\n  name: 'TemplateDialog',\n  setup() {\n  },\n  data() {\n    return {\n      showDialog: false,\n      note: 'E',\n      cents: '0',\n      intervalId: null,\n      instrumentId: null,\n    };\n  },\n  computed: {\n    isInTune() {\n      return {\n        'green-circle': this.cents >= -2 && this.cents <= 2\n      };\n    },\n    displayCents: {\n      get() {\n        return this.cents + ' ct';\n      }\n    } ,\n    centsToPosition: {\n      get() {\n        const deviation = Math.min(Math.max(parseInt(this.cents), -10), 10);\n        return ((deviation * 5) + 75) + 'px';\n      }\n    } ,\n    leftTriangleDisplayStyle: {\n      get() {\n        if (this.cents < -2) {\n          return 'block';\n        } else {\n          return 'none';\n        }\n      },\n    },\n    rightTriangleDisplayStyle: {\n      get() {\n        if (this.cents > 2) {\n          return 'block';\n        } else {\n          return 'none';\n        }\n      }\n    }\n  },\n  methods: {\n    startTuner() {\n        if (!this.instrumentId)\n        {\n          return;\n        }\n\n        turnTunerOn(this.instrumentId)\n        .catch(error => {\n          console.error('Error starting tuner:', error);\n        });\n    },\n    stopTuner() {\n        if (!this.instrumentId)\n        {\n          return;\n        }\n\n        turnTunerOff(this.instrumentId)\n        .catch(error => {\n          console.error('Error stopping tuner:', error);\n        });\n    },\n    fetchTuning() {\n      if (!this.instrumentId)\n      {\n        return;\n      }\n\n      getTuning(this.instrumentId)\n        .then(response => {\n          this.note = response.data.note;\n          this.cents = response.data.deviation;\n        })\n        .catch(error => {\n          console.error('Error fetching tuning:', error);\n        });\n\n    },\n    show(instrumentId) {\n      this.instrumentId = instrumentId;\n      this.showDialog = true;\n      this.startTuner();\n      this.fetchTuning();\n\n      if (this.instrumentId)\n      {\n        this.intervalId = setInterval(this.fetchTuning, 500);\n      }\n    },\n    close() {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n      }\n\n      this.stopTuner();\n      this.showDialog = false\n    },\n  }\n}\n</script>\n\n<style scoped>\n.tuner-device {\n    width: 300px;\n}\n\n.tuner-container {\n    width: 100%;\n    height: 200px;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-bottom: 20px;\n}\n\n.circle {\n    width: 150px;\n    height: 150px;\n    border-radius: 50%;\n    position: absolute;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 100px;\n}\n\n.fixed-background-circle {\n    background-color: rgb(232,232,232);\n    z-index: 1;\n}\n\n.moving-circle {\n    background-color: rgb(253,178, 36);\n    transition: left 0.1s ease; /* Add transition for smooth movement */\n    z-index: 2; \n}\n\n.note-circle {\n    background-color: transparent;\n    color: black;\n    font-family: sans-serif;\n    z-index: 3; \n}\n\n.green-circle {\n    background-color: green;\n}\n\n.triangle {\n    width: 0;\n    height: 0;\n    border-top: 20px solid transparent;\n    border-bottom: 20px solid transparent;\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n}\n\n.left-triangle {\n    border-left: 20px solid black;\n    left: 0;\n}\n\n.right-triangle {\n    border-right: 20px solid black;\n    right: 0;\n}\n\n.cents-container {\n    font-size: 40px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n}\n</style>","<template>\n  <tuner-dialog ref=\"tunerDialog\"></tuner-dialog>\n  <panorama-dialog ref=\"panoramaDialog\"></panorama-dialog>\n\n  <q-card flat class=\"fixed-width q-mr-xl\">\n    <q-card-section class=\"q-pb-xl\">\n      <span class=\"text-h5\">{{ selectedInstrumentName }}</span>\n      <q-fab v-if='!isMuted' class='float-right' color=\"primary\"  icon=\"keyboard_arrow_left\" direction=\"left\">\n          <q-fab-action  @click=\"toggleMute\" icon=\"volume_off\">\n          </q-fab-action>\n          <q-fab-action  @click=\"openPanoramaSelect\" icon=\"panorama_horizontal\">\n          </q-fab-action>\n          <q-fab-action  v-if='selectedInstrumentHasTuner' @click=\"openTuner\">\n            <img class='icon-img' src=\"@/assets/icons/tuning-fork.png\">\n          </q-fab-action>\n        \n      </q-fab>\n    </q-card-section>\n\n    <q-card-section v-if='!isMuted' flat class=\"full-width q-pa-none row no-wrap items-start q-pa-none\">\n      <div class=\"col-5\">\n        <q-card flat>\n          <q-card-section class=\"q-mr-sm\">\n            <div class=\"full-width q-mb-md flex flex-center\">\n              <q-btn :disable='isMuted' round icon=\"volume_up\" color='primary' @click='changeVolume(1)' size=\"lg\"></q-btn>\n            </div>\n            \n            <div class=\"full-width flex flex-center\">\n              <q-slider\n                :disable=\"isMuted\"\n                class='vertical-slider'\n                v-model=\"intVolume\"\n                track-size=\"40px\"\n                thumb-size=\"0px\"\n                color=\"grey-6\"\n                reverse\n                :min=\"0\"\n                :max=\"100\"\n                vertical\n              />\n            </div>\n            <div class=\"full-width q-mt-md q-mb-xl flex flex-center\">\n              <q-btn :disable='isMuted' round icon=\"volume_down\" color='primary' @click='changeVolume(-1)' size=\"lg\"></q-btn>\n            </div>\n            <div class='full-width flex flex-center'>\n              {{  displayVolume }}\n            </div>\n          </q-card-section>\n        </q-card>\n      </div>\n\n      <div class=\"col-7\">\n        <q-card flat>\n          <q-card-section class=\"q-pl-xs q-pr-md\">\n            <q-btn padding=''\n                      :disable=\"isMuted\"\n                      dense\n                      no-wrap\n                      no-caps size='lg' \n                      class='full-width q-mb-md q-pa-sm' \n                      :class=\"getPresetButtonClass(index+1)\"\n                      :label=\"presets[index]\"\n                      v-for=\"(preset, index) in presets\" :key=\"index\"\n                      @click=\"selectPreset(index + 1)\">\n              </q-btn>\n          </q-card-section>\n        </q-card>\n      </div>\n\n    </q-card-section>\n\n    <q-card-section v-if='isMuted' flat class=\"column items-center\" style=\"margin-top: 100px;\">\n          <q-btn round icon=\"volume_off\" color='primary' @click='toggleMute' size=\"xl\"></q-btn>\n          <div class=\"q-mt-lg\">\n            Instrument ist stummgeschaltet\n          </div>\n    </q-card-section>\n\n  </q-card>\n</template>\n\n<script>\nimport { getInstrumentById, selectInstrumentPreset, toggleInstrumentMute, updateInstrumentVolume } from '@/services/apiServices';\nimport TunerDialog from '@/components/TunerDialog.vue';  \nimport PanoramaDialog from '@/components/PanoramaDialog.vue';\n\nexport default {\nsetup() {\n},\ncreated() {\n  this.updateInstrumentState(this.selectedInstrumentId);\n},\n\nname: 'InstrumentControl',\ndata() {\n  return {\n    volume: 30,\n    isMuted: false,\n    currentPreset: null,       // we start with index 0, in the REST api the first element is 1\n    presets: [],\n  };\n},\ncomponents:\n{\n  TunerDialog,\n  PanoramaDialog,\n},\nprops: {\n  selectedInstrumentName: {\n    type: String,\n  },\n  selectedInstrumentId: {\n    type: Number,\n  },\n  selectedInstrumentHasTuner: {\n    type: Boolean,\n  }\n},\ncomputed: {\n  intVolume: {\n    get() {\n      return this.volume;\n    },\n    set(value) {\n      let volume = parseInt(value, 10);\n\n      this.changeVolume(volume - this.volume);\n    }\n  },\n  displayVolume: {\n    get() {\n      return \"Lautst√§rke \" + this.volume + ' %';\n    }\n  } \n},\nmethods: {\n  getPresetButtonClass(index) {\n      return {\n        'bg-primary text-white': index === this.currentPreset\n      };\n  },\n  getMuteButtonClass() {\n      return {\n        'bg-primary text-white': this.isMuted\n      };\n  },\n  openPanoramaSelect() {\n    this.$refs.panoramaDialog.show(this.selectedInstrumentId);\n  },\n  openTuner() \n  {\n    this.$refs.tunerDialog.show(this.selectedInstrumentId);\n  },\n\n  updateInstrumentState(selectedInstrumentId) {\n    if (!selectedInstrumentId) return;\n\n    getInstrumentById(selectedInstrumentId)\n      .then(response => {\n        this.isMuted = response.data.is_muted;\n        this.volume = response.data.volume;\n        this.currentPreset = response.data.selected_preset.id;\n\n        // retrieve reported presets and store names in local array\n        this.presets = response.data.presets.slice(0, 6).map(preset => preset.name);\n      })\n      .catch(error => {\n        console.error('Error fetching instrument state:', error);\n      });\n\n  },\n  toggleMute() {\n    toggleInstrumentMute(this.selectedInstrumentId)\n      .then(response => {\n        this.isMuted = response.data.is_muted\n      })\n      .catch(error => {\n        console.error('Error toggling mute:', error);\n      });\n\n  },\n  changeVolume(amount) {\n    this.volume = Math.max(0, Math.min(100, this.volume + amount));\n\n    // perform REST api call and update state with response\n    updateInstrumentVolume(this.selectedInstrumentId, this.volume)\n      .then(response => {\n        this.volume = response.data.volume\n      })\n      .catch(error => {\n        console.error('Error setting volume:', error);\n      });\n\n\n  },\n  selectPreset(presetId) {\n    this.currentPreset = presetId;\n\n    selectInstrumentPreset(this.selectedInstrumentId, presetId)\n      .then(response => {\n        this.currentPreset = response.data.selected_preset.id;\n      })\n      .catch(error => {\n        console.error('Error setting preset:', error);\n      });\n\n  }\n}\n};\n</script>\n\n<style scoped>\n.icon-img {\n  width: 24px;\n  height: 24px;\n  max-width: 100%;\n  max-height: 100%;\n}\n\n.fixed-width {\n  width: 380px;\n}\n\n</style>"],"names":[],"sourceRoot":""}